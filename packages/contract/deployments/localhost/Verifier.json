{
  "address": "0x0B306BF915C4d645ff596e518fAf3F9669b97016",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidInputVal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProofQ",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PairingAddFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PairingMulFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PairingOpcodeFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PRIME_Q",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[8]",
          "name": "_proof",
          "type": "uint256[8]"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Pairing.G1Point",
              "name": "alpha1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "beta2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "gamma2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "delta2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Pairing.G1Point[]",
              "name": "ic",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct SnarkCommon.VerifyingKey",
          "name": "vk",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "input",
          "type": "uint256"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isValid",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbe25f1e066e6d5d6818a0c1bd874fa7580afb588f19a2822e987267c1a9f5df4",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x0B306BF915C4d645ff596e518fAf3F9669b97016",
    "transactionIndex": 0,
    "gasUsed": "628188",
    "logsBloom": "0x
    "blockHash": "0x858ba9ec04efd3cf785f4263c3853e7c79d4490bcc17c37bd95cb8cb192aa1fc",
    "transactionHash": "0xbe25f1e066e6d5d6818a0c1bd874fa7580afb588f19a2822e987267c1a9f5df4",
    "logs": [],
    "blockNumber": 30,
    "cumulativeGasUsed": "628188",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d4edc97ed9e4f18935e5ac94c4119edc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInputVal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProofQ\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PairingAddFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PairingMulFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PairingOpcodeFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PRIME_Q\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[8]\",\"name\":\"_proof\",\"type\":\"uint256[8]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Pairing.G1Point\",\"name\":\"alpha1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"beta2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"gamma2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"delta2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Pairing.G1Point[]\",\"name\":\"ic\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SnarkCommon.VerifyingKey\",\"name\":\"vk\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"input\",\"type\":\"uint256\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"verify(uint256[8],((uint256,uint256),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256,uint256)[]),uint256)\":{\"params\":{\"_proof\":\"The proof\",\"input\":\"The public inputs to the circuit\",\"vk\":\"The verifying key\"},\"returns\":{\"isValid\":\"Whether the proof is valid given the verifying key and public          input. Note that this function only supports one public input.          Refer to the Semaphore source code for a verifier that supports          multiple public inputs.\"}}},\"title\":\"Verifier\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidProofQ()\":[{\"notice\":\"custom errors\"}],\"PairingAddFailed()\":[{\"notice\":\"custom errors\"}]},\"kind\":\"user\",\"methods\":{\"verify(uint256[8],((uint256,uint256),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256,uint256)[]),uint256)\":{\"notice\":\"Verify a zk-SNARK proof\"}},\"notice\":\"a Groth16 verifier contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"maci-contracts/contracts/crypto/Verifier.sol\":\"Verifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"maci-contracts/contracts/crypto/Pairing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to\\n// deal in the Software without restriction, including without limitation the\\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\\n// sell copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\\n// IN THE SOFTWARE.\\n\\n// 2019 OKIMS\\n\\npragma solidity ^0.8.20;\\n\\n/// @title Pairing\\n/// @notice A library implementing the alt_bn128 elliptic curve operations.\\nlibrary Pairing {\\n  uint256 public constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n  struct G1Point {\\n    uint256 x;\\n    uint256 y;\\n  }\\n\\n  // Encoding of field elements is: X[0] * z + X[1]\\n  struct G2Point {\\n    uint256[2] x;\\n    uint256[2] y;\\n  }\\n\\n  /// @notice custom errors\\n  error PairingAddFailed();\\n  error PairingMulFailed();\\n  error PairingOpcodeFailed();\\n\\n  /// @notice The negation of p, i.e. p.plus(p.negate()) should be zero.\\n  function negate(G1Point memory p) internal pure returns (G1Point memory) {\\n    // The prime q in the base field F_q for G1\\n    if (p.x == 0 && p.y == 0) {\\n      return G1Point(0, 0);\\n    } else {\\n      return G1Point(p.x, PRIME_Q - (p.y % PRIME_Q));\\n    }\\n  }\\n\\n  /// @notice r Returns the sum of two points of G1.\\n  function plus(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {\\n    uint256[4] memory input;\\n    input[0] = p1.x;\\n    input[1] = p1.y;\\n    input[2] = p2.x;\\n    input[3] = p2.y;\\n    bool success;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n\\n    if (!success) {\\n      revert PairingAddFailed();\\n    }\\n  }\\n\\n  /// @notice r Return the product of a point on G1 and a scalar, i.e.\\n  ///         p == p.scalarMul(1) and p.plus(p) == p.scalarMul(2) for all\\n  ///         points p.\\n  function scalarMul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\\n    uint256[3] memory input;\\n    input[0] = p.x;\\n    input[1] = p.y;\\n    input[2] = s;\\n    bool success;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n\\n    if (!success) {\\n      revert PairingMulFailed();\\n    }\\n  }\\n\\n  /// @return isValid The result of computing the pairing check\\n  ///         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n  ///        For example,\\n  ///        pairing([P1(), P1().negate()], [P2(), P2()]) should return true.\\n  function pairing(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2,\\n    G1Point memory c1,\\n    G2Point memory c2,\\n    G1Point memory d1,\\n    G2Point memory d2\\n  ) internal view returns (bool isValid) {\\n    G1Point[4] memory p1;\\n    p1[0] = a1;\\n    p1[1] = b1;\\n    p1[2] = c1;\\n    p1[3] = d1;\\n\\n    G2Point[4] memory p2;\\n    p2[0] = a2;\\n    p2[1] = b2;\\n    p2[2] = c2;\\n    p2[3] = d2;\\n\\n    uint256 inputSize = 24;\\n    uint256[] memory input = new uint256[](inputSize);\\n\\n    for (uint8 i = 0; i < 4; ) {\\n      uint8 j = i * 6;\\n      input[j + 0] = p1[i].x;\\n      input[j + 1] = p1[i].y;\\n      input[j + 2] = p2[i].x[0];\\n      input[j + 3] = p2[i].x[1];\\n      input[j + 4] = p2[i].y[0];\\n      input[j + 5] = p2[i].y[1];\\n\\n      unchecked {\\n        i++;\\n      }\\n    }\\n\\n    uint256[1] memory out;\\n    bool success;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n\\n    if (!success) {\\n      revert PairingOpcodeFailed();\\n    }\\n\\n    isValid = out[0] != 0;\\n  }\\n}\\n\",\"keccak256\":\"0x3efa7d9dc2beee359445d7083d857e4c08a399443ac3f489a73ccc270bcc8bdd\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/SnarkCommon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\nimport { Pairing } from \\\"./Pairing.sol\\\";\\n\\n/// @title SnarkCommon\\n/// @notice a Contract which holds a struct\\n/// representing a Groth16 verifying key\\ncontract SnarkCommon {\\n  /// @notice a struct representing a Groth16 verifying key\\n  struct VerifyingKey {\\n    Pairing.G1Point alpha1;\\n    Pairing.G2Point beta2;\\n    Pairing.G2Point gamma2;\\n    Pairing.G2Point delta2;\\n    Pairing.G1Point[] ic;\\n  }\\n}\\n\",\"keccak256\":\"0x41a3c06b5e34c032c618e3b9bf2286e128a1565f12bfec58b8b3951f3601be2d\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/SnarkConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @title SnarkConstants\\n/// @notice This contract contains constants related to the SNARK\\n/// components of MACI.\\ncontract SnarkConstants {\\n  /// @notice The scalar field\\n  uint256 internal constant SNARK_SCALAR_FIELD =\\n    21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n  /// @notice The public key here is the first Pedersen base\\n  /// point from iden3's circomlib implementation of the Pedersen hash.\\n  /// Since it is generated using a hash-to-curve function, we are\\n  /// confident that no-one knows the private key associated with this\\n  /// public key. See:\\n  /// https://github.com/iden3/circomlib/blob/d5ed1c3ce4ca137a6b3ca48bec4ac12c1b38957a/src/pedersen_printbases.js\\n  /// Its hash should equal\\n  /// 6769006970205099520508948723718471724660867171122235270773600567925038008762.\\n  uint256 internal constant PAD_PUBKEY_X =\\n    10457101036533406547632367118273992217979173478358440826365724437999023779287;\\n  uint256 internal constant PAD_PUBKEY_Y =\\n    19824078218392094440610104313265183977899662750282163392862422243483260492317;\\n\\n  /// @notice The Keccack256 hash of 'Maci'\\n  uint256 internal constant NOTHING_UP_MY_SLEEVE =\\n    8370432830353022751713833565135785980866757267633941821328460903436894336785;\\n}\\n\",\"keccak256\":\"0xef88737ff3d47333964f4fd6b939a12fe6e2ca64b069b26600a10c6a8f52fc7b\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/Verifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { Pairing } from \\\"./Pairing.sol\\\";\\nimport { SnarkConstants } from \\\"./SnarkConstants.sol\\\";\\nimport { SnarkCommon } from \\\"./SnarkCommon.sol\\\";\\nimport { IVerifier } from \\\"../interfaces/IVerifier.sol\\\";\\n\\n/// @title Verifier\\n/// @notice a Groth16 verifier contract\\ncontract Verifier is IVerifier, SnarkConstants, SnarkCommon {\\n  struct Proof {\\n    Pairing.G1Point a;\\n    Pairing.G2Point b;\\n    Pairing.G1Point c;\\n  }\\n\\n  using Pairing for *;\\n\\n  uint256 public constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n  /// @notice custom errors\\n  error InvalidProofQ();\\n  error InvalidInputVal();\\n\\n  /// @notice Verify a zk-SNARK proof\\n  /// @param _proof The proof\\n  /// @param vk The verifying key\\n  /// @param input The public inputs to the circuit\\n  /// @return isValid Whether the proof is valid given the verifying key and public\\n  ///          input. Note that this function only supports one public input.\\n  ///          Refer to the Semaphore source code for a verifier that supports\\n  ///          multiple public inputs.\\n  function verify(\\n    uint256[8] memory _proof,\\n    VerifyingKey memory vk,\\n    uint256 input\\n  ) public view override returns (bool isValid) {\\n    Proof memory proof;\\n    proof.a = Pairing.G1Point(_proof[0], _proof[1]);\\n    proof.b = Pairing.G2Point([_proof[2], _proof[3]], [_proof[4], _proof[5]]);\\n    proof.c = Pairing.G1Point(_proof[6], _proof[7]);\\n\\n    // Make sure that proof.A, B, and C are each less than the prime q\\n    checkPoint(proof.a.x);\\n    checkPoint(proof.a.y);\\n    checkPoint(proof.b.x[0]);\\n    checkPoint(proof.b.y[0]);\\n    checkPoint(proof.b.x[1]);\\n    checkPoint(proof.b.y[1]);\\n    checkPoint(proof.c.x);\\n    checkPoint(proof.c.y);\\n\\n    // Make sure that the input is less than the snark scalar field\\n    if (input >= SNARK_SCALAR_FIELD) {\\n      revert InvalidInputVal();\\n    }\\n\\n    // Compute the linear combination vk_x\\n    Pairing.G1Point memory vkX = Pairing.G1Point(0, 0);\\n\\n    vkX = Pairing.plus(vkX, Pairing.scalarMul(vk.ic[1], input));\\n\\n    vkX = Pairing.plus(vkX, vk.ic[0]);\\n\\n    isValid = Pairing.pairing(\\n      Pairing.negate(proof.a),\\n      proof.b,\\n      vk.alpha1,\\n      vk.beta2,\\n      vkX,\\n      vk.gamma2,\\n      proof.c,\\n      vk.delta2\\n    );\\n  }\\n\\n  function checkPoint(uint256 point) internal pure {\\n    if (point >= PRIME_Q) {\\n      revert InvalidProofQ();\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x5c2a7fc37ce9708b6b84706faa9517b79844298d3ebb82c1db789e7cc977132f\",\"license\":\"MIT\"},\"maci-contracts/contracts/interfaces/IVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { SnarkCommon } from \\\"../crypto/SnarkCommon.sol\\\";\\n\\n/// @title IVerifier\\n/// @notice an interface for a Groth16 verifier contract\\ninterface IVerifier {\\n  /// @notice Verify a zk-SNARK proof\\n  /// @param _proof The proof\\n  /// @param vk The verifying key\\n  /// @param input The public inputs to the circuit\\n  /// @return Whether the proof is valid given the verifying key and public\\n  ///          input. Note that this function only supports one public input.\\n  ///          Refer to the Semaphore source code for a verifier that supports\\n  ///          multiple public inputs.\\n  function verify(\\n    uint256[8] memory _proof,\\n    SnarkCommon.VerifyingKey memory vk,\\n    uint256 input\\n  ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf237bf3e3dbc948b577cb689eeecf3633c38205e6bd8e8ef0eb1356197e02247\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657610a64908161001c8239f35b600080fdfe60406080604052600436101561001457600080fd5b600090813560e01c91826322b72c941461003e575050638d5329081461003957600080fd5b610323565b346101775760031990610140368301126101775736602312156101775761006436610223565b92610104359167ffffffffffffffff9384841161017a576101e090843603011261017757610090610198565b9361009e3685600401610273565b85526100ad36604486016102d7565b9360209460208701526100c33660c483016102d7565b60408701526100d63661014483016102d7565b60608701526101c481013591821161017e5701923660238501121561017a57600484013561010b6101068261030b565b6101fd565b946024602087848152019260061b820101933685116101775750602401905b83821061015f5761015b61014989898960808201526101243591610456565b60405190151581529081906020820190565b0390f35b82859161016c3685610273565b81520191019061012a565b80fd5b5080fd5b8280fd5b634e487b7160e01b600052604160045260246000fd5b6040519060a0820182811067ffffffffffffffff8211176101b857604052565b610182565b604051906040820182811067ffffffffffffffff8211176101b857604052565b604051906080820182811067ffffffffffffffff8211176101b857604052565b6040519190601f01601f1916820167ffffffffffffffff8111838210176101b857604052565b9060405191610100830183811067ffffffffffffffff8211176101b8576040528261010491821161026e576004905b82821061025e57505050565b8135815260209182019101610252565b600080fd5b919082604091031261026e5760206102896101bd565b928035845201356020830152565b9080601f8301121561026e576102ab6101bd565b80926040810192831161026e57905b8282106102c75750505090565b81358152602091820191016102ba565b919060808382031261026e576103049060406102f16101bd565b946102fc8382610297565b865201610297565b6020830152565b67ffffffffffffffff81116101b85760051b60200190565b3461026e57600036600319011261026e5760206040517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478152f35b604051906020820182811067ffffffffffffffff8211176101b8576040526020368337565b61038b6101bd565b906103946101bd565b604036823782526103a36101bd565b60403682376020830152565b604051906060820182811067ffffffffffffffff8211176101b857604052816103d66101bd565b600081526000602082015281526103eb610383565b602082015260406103fa6101bd565b9160008352600060208401520152565b634e487b7160e01b600052603260045260246000fd5b8051600110156104305760400190565b61040a565b8051156104305760200190565b80518210156104305760209160051b010190565b9061045f6103af565b91805192602093848301516104726101bd565b9182528582015281526104836101bd565b936040830151855260608301518186015261049c6101bd565b6080840151815260a0840151828201526104b46101bd565b9586528186015280820194855260e060c08401519301516104d36101bd565b93845281840152604082019283526104ec8251516105ff565b6104f981835101516105ff565b610505855151516105ff565b6105138186510151516105ff565b61052861052286515160200190565b516105ff565b610539610522828751015160200190565b6105448351516105ff565b61055181845101516105ff565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018610156105ed576105ce6105c76105ea976105c06105b96105916101bd565b600081526000878201526105b360808b01946105ad8651610420565b5161063a565b906106ae565b9151610435565b51906106ae565b925161071a565b94519084519085015191606060408701519551960151966108b6565b90565b60405163076be92360e31b8152600490fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47111561062857565b6040516308f69c9160e01b8152600490fd5b91906106446101bd565b60008152600060208201528093604051606081019381851067ffffffffffffffff8611176101b8576020608093606096604052863685378051845201516020830152604082015260076107cf195a01fa1561069b57565bfe5b9060048110156104305760051b0190565b60609092919260c06106be6101bd565b91600083526000602084015260208396816106d76101dd565b936080368637805185520151828401528051604084015201518482015260066107cf195a01fa1561069b57565b634e487b7160e01b600052601160045260246000fd5b600060206107266101bd565b828152015280519081158061079d575b156107535750506107456101bd565b600081526000602082015290565b602001517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd479081900681039081116107985761078d6101bd565b918252602082015290565b610704565b50602081015115610736565b6107b16101dd565b906000805b608081106107c2575050565b6020906107cd6101bd565b838152838382015281860152016107b6565b6107e76101dd565b9060005b608081106107f65750565b602090610801610383565b81850152016107eb565b60405190610320820182811067ffffffffffffffff8211176101b85760405260188252610300366020840137565b60ff60069116029060ff821691820361079857565b60ff169060ff821161079857565b60ff60019116019060ff821161079857565b60ff60029116019060ff821161079857565b60ff60039116019060ff821161079857565b60ff60049116019060ff821161079857565b60ff60059116019060ff821161079857565b9590979693949291946108c76107a9565b96875260209586880152604087015260608601526108e36107df565b96875283870152604086015260608501526108fc61080b565b9060005b60ff908181166004811015610a025790856109fa6109f46109546109ed886109e4888f8d61097c8561096660019e6109378f610839565b9d8e61096061095a61095461094c868661069d565b51519361084e565b60ff1690565b88610442565b5261069d565b510151916109766109548d61085c565b90610442565b528d61099b61098b848461069d565b515151916109766109548d61086e565b528d6109c36109b56109ad858561069d565b515160200190565b51916109766109548d610880565b528d610960856109d3858561069d565b51015151916109766109548d610892565b51015160200190565b51936108a4565b87610442565b520116610900565b505050929350829150610300610a1661035e565b9384920160086107cf195a01fa1561069b575115159056fea26469706673582212201b211fd3e788d84287c0c410eb3ae786247505b2ebe1dbce15385b06e9ec024c64736f6c63430008180033",
  "deployedBytecode": "0x60406080604052600436101561001457600080fd5b600090813560e01c91826322b72c941461003e575050638d5329081461003957600080fd5b610323565b346101775760031990610140368301126101775736602312156101775761006436610223565b92610104359167ffffffffffffffff9384841161017a576101e090843603011261017757610090610198565b9361009e3685600401610273565b85526100ad36604486016102d7565b9360209460208701526100c33660c483016102d7565b60408701526100d63661014483016102d7565b60608701526101c481013591821161017e5701923660238501121561017a57600484013561010b6101068261030b565b6101fd565b946024602087848152019260061b820101933685116101775750602401905b83821061015f5761015b61014989898960808201526101243591610456565b60405190151581529081906020820190565b0390f35b82859161016c3685610273565b81520191019061012a565b80fd5b5080fd5b8280fd5b634e487b7160e01b600052604160045260246000fd5b6040519060a0820182811067ffffffffffffffff8211176101b857604052565b610182565b604051906040820182811067ffffffffffffffff8211176101b857604052565b604051906080820182811067ffffffffffffffff8211176101b857604052565b6040519190601f01601f1916820167ffffffffffffffff8111838210176101b857604052565b9060405191610100830183811067ffffffffffffffff8211176101b8576040528261010491821161026e576004905b82821061025e57505050565b8135815260209182019101610252565b600080fd5b919082604091031261026e5760206102896101bd565b928035845201356020830152565b9080601f8301121561026e576102ab6101bd565b80926040810192831161026e57905b8282106102c75750505090565b81358152602091820191016102ba565b919060808382031261026e576103049060406102f16101bd565b946102fc8382610297565b865201610297565b6020830152565b67ffffffffffffffff81116101b85760051b60200190565b3461026e57600036600319011261026e5760206040517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478152f35b604051906020820182811067ffffffffffffffff8211176101b8576040526020368337565b61038b6101bd565b906103946101bd565b604036823782526103a36101bd565b60403682376020830152565b604051906060820182811067ffffffffffffffff8211176101b857604052816103d66101bd565b600081526000602082015281526103eb610383565b602082015260406103fa6101bd565b9160008352600060208401520152565b634e487b7160e01b600052603260045260246000fd5b8051600110156104305760400190565b61040a565b8051156104305760200190565b80518210156104305760209160051b010190565b9061045f6103af565b91805192602093848301516104726101bd565b9182528582015281526104836101bd565b936040830151855260608301518186015261049c6101bd565b6080840151815260a0840151828201526104b46101bd565b9586528186015280820194855260e060c08401519301516104d36101bd565b93845281840152604082019283526104ec8251516105ff565b6104f981835101516105ff565b610505855151516105ff565b6105138186510151516105ff565b61052861052286515160200190565b516105ff565b610539610522828751015160200190565b6105448351516105ff565b61055181845101516105ff565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018610156105ed576105ce6105c76105ea976105c06105b96105916101bd565b600081526000878201526105b360808b01946105ad8651610420565b5161063a565b906106ae565b9151610435565b51906106ae565b925161071a565b94519084519085015191606060408701519551960151966108b6565b90565b60405163076be92360e31b8152600490fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47111561062857565b6040516308f69c9160e01b8152600490fd5b91906106446101bd565b60008152600060208201528093604051606081019381851067ffffffffffffffff8611176101b8576020608093606096604052863685378051845201516020830152604082015260076107cf195a01fa1561069b57565bfe5b9060048110156104305760051b0190565b60609092919260c06106be6101bd565b91600083526000602084015260208396816106d76101dd565b936080368637805185520151828401528051604084015201518482015260066107cf195a01fa1561069b57565b634e487b7160e01b600052601160045260246000fd5b600060206107266101bd565b828152015280519081158061079d575b156107535750506107456101bd565b600081526000602082015290565b602001517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd479081900681039081116107985761078d6101bd565b918252602082015290565b610704565b50602081015115610736565b6107b16101dd565b906000805b608081106107c2575050565b6020906107cd6101bd565b838152838382015281860152016107b6565b6107e76101dd565b9060005b608081106107f65750565b602090610801610383565b81850152016107eb565b60405190610320820182811067ffffffffffffffff8211176101b85760405260188252610300366020840137565b60ff60069116029060ff821691820361079857565b60ff169060ff821161079857565b60ff60019116019060ff821161079857565b60ff60029116019060ff821161079857565b60ff60039116019060ff821161079857565b60ff60049116019060ff821161079857565b60ff60059116019060ff821161079857565b9590979693949291946108c76107a9565b96875260209586880152604087015260608601526108e36107df565b96875283870152604086015260608501526108fc61080b565b9060005b60ff908181166004811015610a025790856109fa6109f46109546109ed886109e4888f8d61097c8561096660019e6109378f610839565b9d8e61096061095a61095461094c868661069d565b51519361084e565b60ff1690565b88610442565b5261069d565b510151916109766109548d61085c565b90610442565b528d61099b61098b848461069d565b515151916109766109548d61086e565b528d6109c36109b56109ad858561069d565b515160200190565b51916109766109548d610880565b528d610960856109d3858561069d565b51015151916109766109548d610892565b51015160200190565b51936108a4565b87610442565b520116610900565b505050929350829150610300610a1661035e565b9384920160086107cf195a01fa1561069b575115159056fea26469706673582212201b211fd3e788d84287c0c410eb3ae786247505b2ebe1dbce15385b06e9ec024c64736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "verify(uint256[8],((uint256,uint256),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256,uint256)[]),uint256)": {
        "params": {
          "_proof": "The proof",
          "input": "The public inputs to the circuit",
          "vk": "The verifying key"
        },
        "returns": {
          "isValid": "Whether the proof is valid given the verifying key and public          input. Note that this function only supports one public input.          Refer to the Semaphore source code for a verifier that supports          multiple public inputs."
        }
      }
    },
    "title": "Verifier",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InvalidProofQ()": [
        {
          "notice": "custom errors"
        }
      ],
      "PairingAddFailed()": [
        {
          "notice": "custom errors"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "verify(uint256[8],((uint256,uint256),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256,uint256)[]),uint256)": {
        "notice": "Verify a zk-SNARK proof"
      }
    },
    "notice": "a Groth16 verifier contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}