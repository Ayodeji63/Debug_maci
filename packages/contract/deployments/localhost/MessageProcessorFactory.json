{
  "address": "0x4ed7c70F96B99c776995fB64377f0d4aB3B0e1C1",
  "abi": [
    {
      "inputs": [],
      "name": "MESSAGE_DATA_LENGTH",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vkRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_poll",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "enum DomainObjs.Mode",
          "name": "_mode",
          "type": "uint8"
        }
      ],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "address",
          "name": "messageProcessorAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4f38bf6ceea187b6cbde8483d3884dce26681cb751e40b3ab269f8a4d402e568",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x4ed7c70F96B99c776995fB64377f0d4aB3B0e1C1",
    "transactionIndex": 0,
    "gasUsed": "1688641",
    "logsBloom": "0x
    "blockHash": "0x5396cadb61898b7d571aeebfc1a9c4b8da803367466ebfd57734ddc4f074eaea",
    "transactionHash": "0x4f38bf6ceea187b6cbde8483d3884dce26681cb751e40b3ab269f8a4d402e568",
    "logs": [],
    "blockNumber": 44,
    "cumulativeGasUsed": "1688641",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d4edc97ed9e4f18935e5ac94c4119edc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MESSAGE_DATA_LENGTH\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vkRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poll\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"enum DomainObjs.Mode\",\"name\":\"_mode\",\"type\":\"uint8\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"messageProcessorAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deploy(address,address,address,address,uint8)\":{\"params\":{\"_mode\":\"Voting mode\",\"_owner\":\"Owner of the MessageProcessor contract\",\"_poll\":\"Poll contract\",\"_verifier\":\"Verifier contract\",\"_vkRegistry\":\"VkRegistry contract\"},\"returns\":{\"messageProcessorAddr\":\"The deployed MessageProcessor contract\"}}},\"title\":\"MessageProcessorFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"MESSAGE_DATA_LENGTH()\":{\"notice\":\"the length of a MACI message\"},\"deploy(address,address,address,address,uint8)\":{\"notice\":\"Deploy a new MessageProcessor contract and return the address.\"}},\"notice\":\"A factory contract which deploys MessageProcessor contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"maci-contracts/contracts/MessageProcessorFactory.sol\":\"MessageProcessorFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"maci-contracts/contracts/MessageProcessor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { AccQueue } from \\\"./trees/AccQueue.sol\\\";\\nimport { IMACI } from \\\"./interfaces/IMACI.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IPoll } from \\\"./interfaces/IPoll.sol\\\";\\nimport { SnarkCommon } from \\\"./crypto/SnarkCommon.sol\\\";\\nimport { Hasher } from \\\"./crypto/Hasher.sol\\\";\\nimport { IVerifier } from \\\"./interfaces/IVerifier.sol\\\";\\nimport { IVkRegistry } from \\\"./interfaces/IVkRegistry.sol\\\";\\nimport { IMessageProcessor } from \\\"./interfaces/IMessageProcessor.sol\\\";\\nimport { CommonUtilities } from \\\"./utilities/CommonUtilities.sol\\\";\\nimport { DomainObjs } from \\\"./utilities/DomainObjs.sol\\\";\\n\\n/// @title MessageProcessor\\n/// @dev MessageProcessor is used to process messages published by signup users.\\n/// It will process message by batch due to large size of messages.\\n/// After it finishes processing, the sbCommitment will be used for Tally and Subsidy contracts.\\ncontract MessageProcessor is Ownable(msg.sender), SnarkCommon, Hasher, CommonUtilities, IMessageProcessor, DomainObjs {\\n  /// @notice custom errors\\n  error NoMoreMessages();\\n  error StateAqNotMerged();\\n  error MessageAqNotMerged();\\n  error InvalidProcessMessageProof();\\n  error VkNotSet();\\n  error MaxVoteOptionsTooLarge();\\n  error NumSignUpsTooLarge();\\n  error CurrentMessageBatchIndexTooLarge();\\n  error BatchEndIndexTooLarge();\\n\\n  // the number of children per node in the merkle trees\\n  uint256 internal constant TREE_ARITY = 5;\\n\\n  /// @inheritdoc IMessageProcessor\\n  bool public processingComplete;\\n\\n  /// @notice  The number of batches processed\\n  uint256 public numBatchesProcessed;\\n\\n  /// @notice  The current message batch index. When the coordinator runs\\n  /// processMessages(), this action relates to messages\\n  /// currentMessageBatchIndex to currentMessageBatchIndex + messageBatchSize.\\n  uint256 public currentMessageBatchIndex;\\n\\n  /// @inheritdoc IMessageProcessor\\n  uint256 public sbCommitment;\\n\\n  IPoll public immutable poll;\\n  IVerifier public immutable verifier;\\n  IVkRegistry public immutable vkRegistry;\\n  Mode public immutable mode;\\n\\n  /// @notice Create a new instance\\n  /// @param _verifier The Verifier contract address\\n  /// @param _vkRegistry The VkRegistry contract address\\n  /// @param _poll The Poll contract address\\n  /// @param _mode Voting mode\\n  constructor(address _verifier, address _vkRegistry, address _poll, Mode _mode) payable {\\n    verifier = IVerifier(_verifier);\\n    vkRegistry = IVkRegistry(_vkRegistry);\\n    poll = IPoll(_poll);\\n    mode = _mode;\\n  }\\n\\n  /// @notice Update the Poll's currentSbCommitment if the proof is valid.\\n  /// @param _newSbCommitment The new state root and ballot root commitment\\n  ///                         after all messages are processed\\n  /// @param _proof The zk-SNARK proof\\n  function processMessages(uint256 _newSbCommitment, uint256[8] memory _proof) external onlyOwner {\\n    // ensure the voting period is over\\n    _votingPeriodOver(poll);\\n\\n    // There must be unprocessed messages\\n    if (processingComplete) {\\n      revert NoMoreMessages();\\n    }\\n\\n    // The state AccQueue must be merged\\n    if (!poll.stateAqMerged()) {\\n      revert StateAqNotMerged();\\n    }\\n\\n    // Retrieve stored vals\\n    (, uint8 messageTreeSubDepth, uint8 messageTreeDepth, uint8 voteOptionTreeDepth) = poll.treeDepths();\\n    // calculate the message batch size from the message tree subdepth\\n    uint256 messageBatchSize = TREE_ARITY ** messageTreeSubDepth;\\n\\n    (, AccQueue messageAq, ) = poll.extContracts();\\n\\n    // Require that the message queue has been merged\\n    uint256 messageRoot = messageAq.getMainRoot(messageTreeDepth);\\n    if (messageRoot == 0) {\\n      revert MessageAqNotMerged();\\n    }\\n\\n    // Copy the state and ballot commitment and set the batch index if this\\n    // is the first batch to process\\n    if (numBatchesProcessed == 0) {\\n      uint256 currentSbCommitment = poll.currentSbCommitment();\\n      sbCommitment = currentSbCommitment;\\n      (, uint256 numMessages) = poll.numSignUpsAndMessages();\\n      uint256 r = numMessages % messageBatchSize;\\n\\n      currentMessageBatchIndex = numMessages;\\n\\n      if (currentMessageBatchIndex > 0) {\\n        if (r == 0) {\\n          currentMessageBatchIndex -= messageBatchSize;\\n        } else {\\n          currentMessageBatchIndex -= r;\\n        }\\n      }\\n    }\\n\\n    if (\\n      !verifyProcessProof(\\n        currentMessageBatchIndex,\\n        messageRoot,\\n        sbCommitment,\\n        _newSbCommitment,\\n        messageTreeSubDepth,\\n        messageTreeDepth,\\n        voteOptionTreeDepth,\\n        _proof\\n      )\\n    ) {\\n      revert InvalidProcessMessageProof();\\n    }\\n\\n    {\\n      (, uint256 numMessages) = poll.numSignUpsAndMessages();\\n      // Decrease the message batch start index to ensure that each\\n      // message batch is processed in order\\n      if (currentMessageBatchIndex > 0) {\\n        currentMessageBatchIndex -= messageBatchSize;\\n      }\\n\\n      updateMessageProcessingData(\\n        _newSbCommitment,\\n        currentMessageBatchIndex,\\n        numMessages <= messageBatchSize * (numBatchesProcessed + 1)\\n      );\\n    }\\n  }\\n\\n  /// @notice Verify the proof for processMessage\\n  /// @dev used to update the sbCommitment\\n  /// @param _currentMessageBatchIndex The batch index of current message batch\\n  /// @param _messageRoot The message tree root\\n  /// @param _currentSbCommitment The current sbCommitment (state and ballot)\\n  /// @param _newSbCommitment The new sbCommitment after we update this message batch\\n  /// @param _messageTreeSubDepth The message tree subdepth\\n  /// @param _messageTreeDepth The message tree depth\\n  /// @param _voteOptionTreeDepth The vote option tree depth\\n  /// @param _proof The zk-SNARK proof\\n  /// @return isValid Whether the proof is valid\\n  function verifyProcessProof(\\n    uint256 _currentMessageBatchIndex,\\n    uint256 _messageRoot,\\n    uint256 _currentSbCommitment,\\n    uint256 _newSbCommitment,\\n    uint8 _messageTreeSubDepth,\\n    uint8 _messageTreeDepth,\\n    uint8 _voteOptionTreeDepth,\\n    uint256[8] memory _proof\\n  ) internal view returns (bool isValid) {\\n    // get the tree depths\\n    // get the message batch size from the message tree subdepth\\n    // get the number of signups\\n    (uint256 numSignUps, uint256 numMessages) = poll.numSignUpsAndMessages();\\n    (IMACI maci, , ) = poll.extContracts();\\n\\n    // Calculate the public input hash (a SHA256 hash of several values)\\n    uint256 publicInputHash = genProcessMessagesPublicInputHash(\\n      _currentMessageBatchIndex,\\n      _messageRoot,\\n      numSignUps,\\n      numMessages,\\n      _currentSbCommitment,\\n      _newSbCommitment,\\n      _messageTreeSubDepth,\\n      _voteOptionTreeDepth\\n    );\\n\\n    // Get the verifying key from the VkRegistry\\n    VerifyingKey memory vk = vkRegistry.getProcessVk(\\n      maci.stateTreeDepth(),\\n      _messageTreeDepth,\\n      _voteOptionTreeDepth,\\n      TREE_ARITY ** _messageTreeSubDepth,\\n      mode\\n    );\\n\\n    isValid = verifier.verify(_proof, vk, publicInputHash);\\n  }\\n\\n  /// @notice Returns the SHA256 hash of the packed values (see\\n  /// genProcessMessagesPackedVals), the hash of the coordinator's public key,\\n  /// the message root, and the commitment to the current state root and\\n  /// ballot root. By passing the SHA256 hash of these values to the circuit\\n  /// as a single public input and the preimage as private inputs, we reduce\\n  /// its verification gas cost though the number of constraints will be\\n  /// higher and proving time will be longer.\\n  /// @param _currentMessageBatchIndex The batch index of current message batch\\n  /// @param _numSignUps The number of users that signup\\n  /// @param _numMessages The number of messages\\n  /// @param _currentSbCommitment The current sbCommitment (state and ballot root)\\n  /// @param _newSbCommitment The new sbCommitment after we update this message batch\\n  /// @param _messageTreeSubDepth The message tree subdepth\\n  /// @return inputHash Returns the SHA256 hash of the packed values\\n  function genProcessMessagesPublicInputHash(\\n    uint256 _currentMessageBatchIndex,\\n    uint256 _messageRoot,\\n    uint256 _numSignUps,\\n    uint256 _numMessages,\\n    uint256 _currentSbCommitment,\\n    uint256 _newSbCommitment,\\n    uint8 _messageTreeSubDepth,\\n    uint8 _voteOptionTreeDepth\\n  ) public view returns (uint256 inputHash) {\\n    uint256 coordinatorPubKeyHash = poll.coordinatorPubKeyHash();\\n\\n    // pack the values\\n    uint256 packedVals = genProcessMessagesPackedVals(\\n      _currentMessageBatchIndex,\\n      _numSignUps,\\n      _numMessages,\\n      _messageTreeSubDepth,\\n      _voteOptionTreeDepth\\n    );\\n\\n    (uint256 deployTime, uint256 duration) = poll.getDeployTimeAndDuration();\\n\\n    // generate the circuit only public input\\n    uint256[] memory input = new uint256[](6);\\n    input[0] = packedVals;\\n    input[1] = coordinatorPubKeyHash;\\n    input[2] = _messageRoot;\\n    input[3] = _currentSbCommitment;\\n    input[4] = _newSbCommitment;\\n    input[5] = deployTime + duration;\\n    inputHash = sha256Hash(input);\\n  }\\n\\n  /// @notice One of the inputs to the ProcessMessages circuit is a 250-bit\\n  /// representation of four 50-bit values. This function generates this\\n  /// 250-bit value, which consists of the maximum number of vote options, the\\n  /// number of signups, the current message batch index, and the end index of\\n  /// the current batch.\\n  /// @param _currentMessageBatchIndex batch index of current message batch\\n  /// @param _numSignUps number of users that signup\\n  /// @param _numMessages number of messages\\n  /// @param _messageTreeSubDepth message tree subdepth\\n  /// @param _voteOptionTreeDepth vote option tree depth\\n  /// @return result The packed value\\n  function genProcessMessagesPackedVals(\\n    uint256 _currentMessageBatchIndex,\\n    uint256 _numSignUps,\\n    uint256 _numMessages,\\n    uint8 _messageTreeSubDepth,\\n    uint8 _voteOptionTreeDepth\\n  ) public pure returns (uint256 result) {\\n    uint256 maxVoteOptions = TREE_ARITY ** _voteOptionTreeDepth;\\n\\n    // calculate the message batch size from the message tree subdepth\\n    uint256 messageBatchSize = TREE_ARITY ** _messageTreeSubDepth;\\n    uint256 batchEndIndex = _currentMessageBatchIndex + messageBatchSize;\\n    if (batchEndIndex > _numMessages) {\\n      batchEndIndex = _numMessages;\\n    }\\n\\n    if (maxVoteOptions >= 2 ** 50) revert MaxVoteOptionsTooLarge();\\n    if (_numSignUps >= 2 ** 50) revert NumSignUpsTooLarge();\\n    if (_currentMessageBatchIndex >= 2 ** 50) revert CurrentMessageBatchIndexTooLarge();\\n    if (batchEndIndex >= 2 ** 50) revert BatchEndIndexTooLarge();\\n\\n    result = maxVoteOptions + (_numSignUps << 50) + (_currentMessageBatchIndex << 100) + (batchEndIndex << 150);\\n  }\\n\\n  /// @notice update message processing state variables\\n  /// @param _newSbCommitment sbCommitment to be updated\\n  /// @param _currentMessageBatchIndex currentMessageBatchIndex to be updated\\n  /// @param _processingComplete update flag that indicate processing is finished or not\\n  function updateMessageProcessingData(\\n    uint256 _newSbCommitment,\\n    uint256 _currentMessageBatchIndex,\\n    bool _processingComplete\\n  ) internal {\\n    sbCommitment = _newSbCommitment;\\n    processingComplete = _processingComplete;\\n    currentMessageBatchIndex = _currentMessageBatchIndex;\\n    numBatchesProcessed++;\\n  }\\n}\\n\",\"keccak256\":\"0x24adda45bb8ccb41b1d7c0f0fbf819aa16dc3bc6fb7e1dfa768258a8cefbae8f\",\"license\":\"MIT\"},\"maci-contracts/contracts/MessageProcessorFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { Params } from \\\"./utilities/Params.sol\\\";\\nimport { DomainObjs } from \\\"./utilities/DomainObjs.sol\\\";\\nimport { MessageProcessor } from \\\"./MessageProcessor.sol\\\";\\nimport { IMessageProcessorFactory } from \\\"./interfaces/IMPFactory.sol\\\";\\n\\n/// @title MessageProcessorFactory\\n/// @notice A factory contract which deploys MessageProcessor contracts.\\ncontract MessageProcessorFactory is Params, DomainObjs, IMessageProcessorFactory {\\n  /// @inheritdoc IMessageProcessorFactory\\n  function deploy(\\n    address _verifier,\\n    address _vkRegistry,\\n    address _poll,\\n    address _owner,\\n    Mode _mode\\n  ) public returns (address messageProcessorAddr) {\\n    // deploy MessageProcessor for this Poll\\n    MessageProcessor messageProcessor = new MessageProcessor(_verifier, _vkRegistry, _poll, _mode);\\n    messageProcessor.transferOwnership(_owner);\\n    messageProcessorAddr = address(messageProcessor);\\n  }\\n}\\n\",\"keccak256\":\"0xd213e5c7c625838bd2c473d0b24aea036468aed28c20f763f47439a89176b695\",\"license\":\"MIT\"},\"maci-contracts/contracts/TopupCredit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title TopupCredit\\n/// @notice A contract representing a token used to topup a MACI's voter\\n/// credits\\ncontract TopupCredit is ERC20, Ownable(msg.sender) {\\n  uint8 public constant DECIMALS = 1;\\n  uint256 public constant MAXIMUM_AIRDROP_AMOUNT = 100000 * 10 ** DECIMALS;\\n\\n  /// @notice custom errors\\n  error ExceedLimit();\\n\\n  /// @notice create  a new TopupCredit token\\n  constructor() payable ERC20(\\\"TopupCredit\\\", \\\"TopupCredit\\\") {}\\n\\n  /// @notice mint tokens to an account\\n  /// @param account the account to mint tokens to\\n  /// @param amount the amount of tokens to mint\\n  function airdropTo(address account, uint256 amount) public onlyOwner {\\n    if (amount >= MAXIMUM_AIRDROP_AMOUNT) {\\n      revert ExceedLimit();\\n    }\\n\\n    _mint(account, amount);\\n  }\\n\\n  /// @notice mint tokens to the contract owner\\n  /// @param amount the amount of tokens to mint\\n  function airdrop(uint256 amount) public onlyOwner {\\n    if (amount >= MAXIMUM_AIRDROP_AMOUNT) {\\n      revert ExceedLimit();\\n    }\\n\\n    _mint(msg.sender, amount);\\n  }\\n}\\n\",\"keccak256\":\"0x9cddcaa8b2f7d8bccbfdf40d38fb4a950bbeaf0941dee4213c76d69eadbea33c\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/Hasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { SnarkConstants } from \\\"./SnarkConstants.sol\\\";\\nimport { PoseidonT3 } from \\\"./PoseidonT3.sol\\\";\\nimport { PoseidonT4 } from \\\"./PoseidonT4.sol\\\";\\nimport { PoseidonT5 } from \\\"./PoseidonT5.sol\\\";\\nimport { PoseidonT6 } from \\\"./PoseidonT6.sol\\\";\\n\\n/// @notice A SHA256 hash function for any number of input elements, and Poseidon hash\\n/// functions for 2, 3, 4, 5, and 12 input elements.\\ncontract Hasher is SnarkConstants {\\n  /// @notice Computes the SHA256 hash of an array of uint256 elements.\\n  /// @param array The array of uint256 elements.\\n  /// @return result The SHA256 hash of the array.\\n  function sha256Hash(uint256[] memory array) public pure returns (uint256 result) {\\n    result = uint256(sha256(abi.encodePacked(array))) % SNARK_SCALAR_FIELD;\\n  }\\n\\n  /// @notice Computes the Poseidon hash of two uint256 elements.\\n  /// @param array An array of two uint256 elements.\\n  /// @return result The Poseidon hash of the two elements.\\n  function hash2(uint256[2] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT3.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of three uint256 elements.\\n  /// @param array An array of three uint256 elements.\\n  /// @return result The Poseidon hash of the three elements.\\n  function hash3(uint256[3] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT4.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of four uint256 elements.\\n  /// @param array An array of four uint256 elements.\\n  /// @return result The Poseidon hash of the four elements.\\n  function hash4(uint256[4] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT5.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of five uint256 elements.\\n  /// @param array An array of five uint256 elements.\\n  /// @return result The Poseidon hash of the five elements.\\n  function hash5(uint256[5] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT6.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of two uint256 elements.\\n  /// @param left the first element to hash.\\n  /// @param right the second element to hash.\\n  /// @return result The Poseidon hash of the two elements.\\n  function hashLeftRight(uint256 left, uint256 right) public pure returns (uint256 result) {\\n    uint256[2] memory input;\\n    input[0] = left;\\n    input[1] = right;\\n    result = hash2(input);\\n  }\\n}\\n\",\"keccak256\":\"0x5bd9dc3c43c862d8fd566e8ae2d3a52e1271f2aa3b042c71f97fe2dc449b1d5f\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/Pairing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to\\n// deal in the Software without restriction, including without limitation the\\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\\n// sell copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\\n// IN THE SOFTWARE.\\n\\n// 2019 OKIMS\\n\\npragma solidity ^0.8.20;\\n\\n/// @title Pairing\\n/// @notice A library implementing the alt_bn128 elliptic curve operations.\\nlibrary Pairing {\\n  uint256 public constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n  struct G1Point {\\n    uint256 x;\\n    uint256 y;\\n  }\\n\\n  // Encoding of field elements is: X[0] * z + X[1]\\n  struct G2Point {\\n    uint256[2] x;\\n    uint256[2] y;\\n  }\\n\\n  /// @notice custom errors\\n  error PairingAddFailed();\\n  error PairingMulFailed();\\n  error PairingOpcodeFailed();\\n\\n  /// @notice The negation of p, i.e. p.plus(p.negate()) should be zero.\\n  function negate(G1Point memory p) internal pure returns (G1Point memory) {\\n    // The prime q in the base field F_q for G1\\n    if (p.x == 0 && p.y == 0) {\\n      return G1Point(0, 0);\\n    } else {\\n      return G1Point(p.x, PRIME_Q - (p.y % PRIME_Q));\\n    }\\n  }\\n\\n  /// @notice r Returns the sum of two points of G1.\\n  function plus(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {\\n    uint256[4] memory input;\\n    input[0] = p1.x;\\n    input[1] = p1.y;\\n    input[2] = p2.x;\\n    input[3] = p2.y;\\n    bool success;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n\\n    if (!success) {\\n      revert PairingAddFailed();\\n    }\\n  }\\n\\n  /// @notice r Return the product of a point on G1 and a scalar, i.e.\\n  ///         p == p.scalarMul(1) and p.plus(p) == p.scalarMul(2) for all\\n  ///         points p.\\n  function scalarMul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\\n    uint256[3] memory input;\\n    input[0] = p.x;\\n    input[1] = p.y;\\n    input[2] = s;\\n    bool success;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n\\n    if (!success) {\\n      revert PairingMulFailed();\\n    }\\n  }\\n\\n  /// @return isValid The result of computing the pairing check\\n  ///         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n  ///        For example,\\n  ///        pairing([P1(), P1().negate()], [P2(), P2()]) should return true.\\n  function pairing(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2,\\n    G1Point memory c1,\\n    G2Point memory c2,\\n    G1Point memory d1,\\n    G2Point memory d2\\n  ) internal view returns (bool isValid) {\\n    G1Point[4] memory p1;\\n    p1[0] = a1;\\n    p1[1] = b1;\\n    p1[2] = c1;\\n    p1[3] = d1;\\n\\n    G2Point[4] memory p2;\\n    p2[0] = a2;\\n    p2[1] = b2;\\n    p2[2] = c2;\\n    p2[3] = d2;\\n\\n    uint256 inputSize = 24;\\n    uint256[] memory input = new uint256[](inputSize);\\n\\n    for (uint8 i = 0; i < 4; ) {\\n      uint8 j = i * 6;\\n      input[j + 0] = p1[i].x;\\n      input[j + 1] = p1[i].y;\\n      input[j + 2] = p2[i].x[0];\\n      input[j + 3] = p2[i].x[1];\\n      input[j + 4] = p2[i].y[0];\\n      input[j + 5] = p2[i].y[1];\\n\\n      unchecked {\\n        i++;\\n      }\\n    }\\n\\n    uint256[1] memory out;\\n    bool success;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n\\n    if (!success) {\\n      revert PairingOpcodeFailed();\\n    }\\n\\n    isValid = out[0] != 0;\\n  }\\n}\\n\",\"keccak256\":\"0x3efa7d9dc2beee359445d7083d857e4c08a399443ac3f489a73ccc270bcc8bdd\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/PoseidonT3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT3 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[2] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0x27b66b331502146590287b856ab767b2a2fb66a16da114961e3cef9e160d7263\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/PoseidonT4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT4 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[3] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xd38b24182625dab43ccd72c623df1263f2fec8ef828852189bf8ac17e59ae12b\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/PoseidonT5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT5 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[4] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0x93228facf0feb920e3b92e536040ba3c6fd5ffcdd5ae415373f153e05cec78b9\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/PoseidonT6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT6 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[5] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0x792080273729327555e4bed7ba86e51a22e63769732308ac0a59dce88e451505\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/SnarkCommon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\nimport { Pairing } from \\\"./Pairing.sol\\\";\\n\\n/// @title SnarkCommon\\n/// @notice a Contract which holds a struct\\n/// representing a Groth16 verifying key\\ncontract SnarkCommon {\\n  /// @notice a struct representing a Groth16 verifying key\\n  struct VerifyingKey {\\n    Pairing.G1Point alpha1;\\n    Pairing.G2Point beta2;\\n    Pairing.G2Point gamma2;\\n    Pairing.G2Point delta2;\\n    Pairing.G1Point[] ic;\\n  }\\n}\\n\",\"keccak256\":\"0x41a3c06b5e34c032c618e3b9bf2286e128a1565f12bfec58b8b3951f3601be2d\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/SnarkConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @title SnarkConstants\\n/// @notice This contract contains constants related to the SNARK\\n/// components of MACI.\\ncontract SnarkConstants {\\n  /// @notice The scalar field\\n  uint256 internal constant SNARK_SCALAR_FIELD =\\n    21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n  /// @notice The public key here is the first Pedersen base\\n  /// point from iden3's circomlib implementation of the Pedersen hash.\\n  /// Since it is generated using a hash-to-curve function, we are\\n  /// confident that no-one knows the private key associated with this\\n  /// public key. See:\\n  /// https://github.com/iden3/circomlib/blob/d5ed1c3ce4ca137a6b3ca48bec4ac12c1b38957a/src/pedersen_printbases.js\\n  /// Its hash should equal\\n  /// 6769006970205099520508948723718471724660867171122235270773600567925038008762.\\n  uint256 internal constant PAD_PUBKEY_X =\\n    10457101036533406547632367118273992217979173478358440826365724437999023779287;\\n  uint256 internal constant PAD_PUBKEY_Y =\\n    19824078218392094440610104313265183977899662750282163392862422243483260492317;\\n\\n  /// @notice The Keccack256 hash of 'Maci'\\n  uint256 internal constant NOTHING_UP_MY_SLEEVE =\\n    8370432830353022751713833565135785980866757267633941821328460903436894336785;\\n}\\n\",\"keccak256\":\"0xef88737ff3d47333964f4fd6b939a12fe6e2ca64b069b26600a10c6a8f52fc7b\",\"license\":\"MIT\"},\"maci-contracts/contracts/interfaces/IMACI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { AccQueue } from \\\"../trees/AccQueue.sol\\\";\\n\\n/// @title IMACI\\n/// @notice MACI interface\\ninterface IMACI {\\n  /// @notice Get the depth of the state tree\\n  /// @return The depth of the state tree\\n  function stateTreeDepth() external view returns (uint8);\\n\\n  /// @notice Return the main root of the StateAq contract\\n  /// @return The Merkle root\\n  function getStateAqRoot() external view returns (uint256);\\n\\n  /// @notice Allow Poll contracts to merge the state subroots\\n  /// @param _numSrQueueOps Number of operations\\n  /// @param _pollId The ID of the active Poll\\n  function mergeStateAqSubRoots(uint256 _numSrQueueOps, uint256 _pollId) external;\\n\\n  /// @notice Allow Poll contracts to merge the state root\\n  /// @param _pollId The active Poll ID\\n  /// @return The calculated Merkle root\\n  function mergeStateAq(uint256 _pollId) external returns (uint256);\\n\\n  /// @notice Get the number of signups\\n  /// @return numsignUps The number of signups\\n  function numSignUps() external view returns (uint256);\\n\\n  /// @notice Get the state AccQueue\\n  /// @return The state AccQueue\\n  function stateAq() external view returns (AccQueue);\\n}\\n\",\"keccak256\":\"0x1c1f514b23fe09d8703aea3e89769dc6667625c3f47d2931d6294ef53b3d6e9f\",\"license\":\"MIT\"},\"maci-contracts/contracts/interfaces/IMPFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { DomainObjs } from \\\"../utilities/DomainObjs.sol\\\";\\n\\n/// @title IMessageProcessorFactory\\n/// @notice MessageProcessorFactory interface\\ninterface IMessageProcessorFactory {\\n  /// @notice Deploy a new MessageProcessor contract and return the address.\\n  /// @param _verifier Verifier contract\\n  /// @param _vkRegistry VkRegistry contract\\n  /// @param _poll Poll contract\\n  /// @param _owner Owner of the MessageProcessor contract\\n  /// @param _mode Voting mode\\n  /// @return The deployed MessageProcessor contract\\n  function deploy(\\n    address _verifier,\\n    address _vkRegistry,\\n    address _poll,\\n    address _owner,\\n    DomainObjs.Mode _mode\\n  ) external returns (address);\\n}\\n\",\"keccak256\":\"0xe26a5a2bc189117c9d7e7a60f248c3fcec64b81144bd164633ab971248cf43ce\",\"license\":\"MIT\"},\"maci-contracts/contracts/interfaces/IMessageProcessor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @title IMessageProcessor\\n/// @notice MessageProcessor interface\\ninterface IMessageProcessor {\\n  /// @notice Get the result of whether there are unprocessed messages left\\n  /// @return Whether there are unprocessed messages left\\n  function processingComplete() external view returns (bool);\\n\\n  /// @notice Get the commitment to the state and ballot roots\\n  /// @return The commitment to the state and ballot roots\\n  function sbCommitment() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x917bdb4c5eae4d20ccf6d0c9dc0c2cf1868a6951bc6fb74efbc91977309f505a\",\"license\":\"MIT\"},\"maci-contracts/contracts/interfaces/IPoll.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { DomainObjs } from \\\"../utilities/DomainObjs.sol\\\";\\nimport { IMACI } from \\\"./IMACI.sol\\\";\\nimport { AccQueue } from \\\"../trees/AccQueue.sol\\\";\\nimport { TopupCredit } from \\\"../TopupCredit.sol\\\";\\n\\n/// @title IPoll\\n/// @notice Poll interface\\ninterface IPoll {\\n  /// @notice The number of messages which have been processed and the number of signups\\n  /// @return numSignups The number of signups\\n  /// @return numMsgs The number of messages sent by voters\\n  function numSignUpsAndMessages() external view returns (uint256 numSignups, uint256 numMsgs);\\n\\n  /// @notice Allows to publish a Topup message\\n  /// @param stateIndex The index of user in the state queue\\n  /// @param amount The amount of credits to topup\\n  function topup(uint256 stateIndex, uint256 amount) external;\\n\\n  /// @notice Allows anyone to publish a message (an encrypted command and signature).\\n  /// This function also enqueues the message.\\n  /// @param _message The message to publish\\n  /// @param _encPubKey An epheremal public key which can be combined with the\\n  /// coordinator's private key to generate an ECDH shared key with which\\n  /// to encrypt the message.\\n  function publishMessage(DomainObjs.Message memory _message, DomainObjs.PubKey calldata _encPubKey) external;\\n\\n  /// @notice The first step of merging the MACI state AccQueue. This allows the\\n  /// ProcessMessages circuit to access the latest state tree and ballots via\\n  /// currentSbCommitment.\\n  /// @param _numSrQueueOps Number of operations\\n  /// @param _pollId The ID of the active Poll\\n  function mergeMaciStateAqSubRoots(uint256 _numSrQueueOps, uint256 _pollId) external;\\n\\n  /// @notice The second step of merging the MACI state AccQueue. This allows the\\n  /// ProcessMessages circuit to access the latest state tree and ballots via\\n  /// currentSbCommitment.\\n  /// @param _pollId The ID of the active Poll\\n  function mergeMaciStateAq(uint256 _pollId) external;\\n\\n  /// @notice The first step in merging the message AccQueue so that the\\n  /// ProcessMessages circuit can access the message root.\\n  /// @param _numSrQueueOps The number of subroot queue operations to perform\\n  function mergeMessageAqSubRoots(uint256 _numSrQueueOps) external;\\n\\n  /// @notice The second step in merging the message AccQueue so that the\\n  /// ProcessMessages circuit can access the message root.\\n  function mergeMessageAq() external;\\n\\n  /// @notice Returns the Poll's deploy time and duration\\n  /// @return _deployTime The deployment timestamp\\n  /// @return _duration The duration of the poll\\n  function getDeployTimeAndDuration() external view returns (uint256 _deployTime, uint256 _duration);\\n\\n  /// @notice Get the result of whether the MACI contract's stateAq has been merged by this contract\\n  /// @return Whether the MACI contract's stateAq has been merged by this contract\\n  function stateAqMerged() external view returns (bool);\\n\\n  /// @notice Get the depths of the merkle trees\\n  /// @return intStateTreeDepth The depth of the state tree\\n  /// @return messageTreeSubDepth The subdepth of the message tree\\n  /// @return messageTreeDepth The depth of the message tree\\n  /// @return voteOptionTreeDepth The subdepth of the vote option tree\\n  function treeDepths()\\n    external\\n    view\\n    returns (uint8 intStateTreeDepth, uint8 messageTreeSubDepth, uint8 messageTreeDepth, uint8 voteOptionTreeDepth);\\n\\n  /// @notice Get the max values for the poll\\n  /// @return maxMessages The maximum number of messages\\n  /// @return maxVoteOptions The maximum number of vote options\\n  function maxValues() external view returns (uint256 maxMessages, uint256 maxVoteOptions);\\n\\n  /// @notice Get the external contracts\\n  /// @return maci The IMACI contract\\n  /// @return messageAq The AccQueue contract\\n  /// @return topupCredit The TopupCredit contract\\n  function extContracts() external view returns (IMACI maci, AccQueue messageAq, TopupCredit topupCredit);\\n\\n  /// @notice Get the hash of coordinator's public key\\n  /// @return _coordinatorPubKeyHash the hash of coordinator's public key\\n  function coordinatorPubKeyHash() external view returns (uint256 _coordinatorPubKeyHash);\\n\\n  /// @notice Get the commitment to the state leaves and the ballots. This is\\n  /// hash3(stateRoot, ballotRoot, salt).\\n  /// Its initial value should be\\n  /// hash(maciStateRootSnapshot, emptyBallotRoot, 0)\\n  /// Each successful invocation of processMessages() should use a different\\n  /// salt to update this value, so that an external observer cannot tell in\\n  /// the case that none of the messages are valid.\\n  /// @return The commitment to the state leaves and the ballots\\n  function currentSbCommitment() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6543c65572462d7e052503a4094a1900a12cb450ed91f097bed1e8d97ad0243c\",\"license\":\"MIT\"},\"maci-contracts/contracts/interfaces/IVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { SnarkCommon } from \\\"../crypto/SnarkCommon.sol\\\";\\n\\n/// @title IVerifier\\n/// @notice an interface for a Groth16 verifier contract\\ninterface IVerifier {\\n  /// @notice Verify a zk-SNARK proof\\n  /// @param _proof The proof\\n  /// @param vk The verifying key\\n  /// @param input The public inputs to the circuit\\n  /// @return Whether the proof is valid given the verifying key and public\\n  ///          input. Note that this function only supports one public input.\\n  ///          Refer to the Semaphore source code for a verifier that supports\\n  ///          multiple public inputs.\\n  function verify(\\n    uint256[8] memory _proof,\\n    SnarkCommon.VerifyingKey memory vk,\\n    uint256 input\\n  ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf237bf3e3dbc948b577cb689eeecf3633c38205e6bd8e8ef0eb1356197e02247\",\"license\":\"MIT\"},\"maci-contracts/contracts/interfaces/IVkRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { SnarkCommon } from \\\"../crypto/SnarkCommon.sol\\\";\\nimport { DomainObjs } from \\\"../utilities/DomainObjs.sol\\\";\\n\\n/// @title IVkRegistry\\n/// @notice VkRegistry interface\\ninterface IVkRegistry {\\n  /// @notice Get the tally verifying key\\n  /// @param _stateTreeDepth The state tree depth\\n  /// @param _intStateTreeDepth The intermediate state tree depth\\n  /// @param _voteOptionTreeDepth The vote option tree depth\\n  /// @param _mode QV or Non-QV\\n  /// @return The verifying key\\n  function getTallyVk(\\n    uint256 _stateTreeDepth,\\n    uint256 _intStateTreeDepth,\\n    uint256 _voteOptionTreeDepth,\\n    DomainObjs.Mode _mode\\n  ) external view returns (SnarkCommon.VerifyingKey memory);\\n\\n  /// @notice Get the process verifying key\\n  /// @param _stateTreeDepth The state tree depth\\n  /// @param _messageTreeDepth The message tree depth\\n  /// @param _voteOptionTreeDepth The vote option tree depth\\n  /// @param _messageBatchSize The message batch size\\n  /// @param _mode QV or Non-QV\\n  /// @return The verifying key\\n  function getProcessVk(\\n    uint256 _stateTreeDepth,\\n    uint256 _messageTreeDepth,\\n    uint256 _voteOptionTreeDepth,\\n    uint256 _messageBatchSize,\\n    DomainObjs.Mode _mode\\n  ) external view returns (SnarkCommon.VerifyingKey memory);\\n}\\n\",\"keccak256\":\"0xc657458febca15dc42c4b03a6f359022d6fb96e83d30d06bb0570c652db30a24\",\"license\":\"MIT\"},\"maci-contracts/contracts/trees/AccQueue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Hasher } from \\\"../crypto/Hasher.sol\\\";\\n\\n/// @title AccQueue\\n/// @notice This contract defines a Merkle tree where each leaf insertion only updates a\\n/// subtree. To obtain the main tree root, the contract owner must merge the\\n/// subtrees together. Merging subtrees requires at least 2 operations:\\n/// mergeSubRoots(), and merge(). To get around the gas limit,\\n/// the mergeSubRoots() can be performed in multiple transactions.\\nabstract contract AccQueue is Ownable(msg.sender), Hasher {\\n  // The maximum tree depth\\n  uint256 public constant MAX_DEPTH = 32;\\n\\n  /// @notice A Queue is a 2D array of Merkle roots and indices which represents nodes\\n  /// in a Merkle tree while it is progressively updated.\\n  struct Queue {\\n    /// @notice IMPORTANT: the following declares an array of b elements of type T: T[b]\\n    /// And the following declares an array of b elements of type T[a]: T[a][b]\\n    /// As such, the following declares an array of MAX_DEPTH+1 arrays of\\n    /// uint256[4] arrays, **not the other way round**:\\n    uint256[4][MAX_DEPTH + 1] levels;\\n    uint256[MAX_DEPTH + 1] indices;\\n  }\\n\\n  // The depth of each subtree\\n  uint256 internal immutable subDepth;\\n\\n  // The number of elements per hash operation. Should be either 2 (for\\n  // binary trees) or 5 (quinary trees). The limit is 5 because that is the\\n  // maximum supported number of inputs for the EVM implementation of the\\n  // Poseidon hash function\\n  uint256 internal immutable hashLength;\\n\\n  // hashLength ** subDepth\\n  uint256 internal immutable subTreeCapacity;\\n\\n  // True hashLength == 2, false if hashLength == 5\\n  bool internal isBinary;\\n\\n  // The index of the current subtree. e.g. the first subtree has index 0, the\\n  // second has 1, and so on\\n  uint256 internal currentSubtreeIndex;\\n\\n  // Tracks the current subtree.\\n  Queue internal leafQueue;\\n\\n  // Tracks the smallest tree of subroots\\n  Queue internal subRootQueue;\\n\\n  // Subtree roots\\n  mapping(uint256 => uint256) internal subRoots;\\n\\n  // Merged roots\\n  uint256[MAX_DEPTH + 1] internal mainRoots;\\n\\n  // Whether the subtrees have been merged\\n  bool public subTreesMerged;\\n\\n  // Whether entire merkle tree has been merged\\n  bool public treeMerged;\\n\\n  // The root of the shortest possible tree which fits all current subtree\\n  // roots\\n  uint256 internal smallSRTroot;\\n\\n  // Tracks the next subroot to queue\\n  uint256 internal nextSubRootIndex;\\n\\n  // The number of leaves inserted across all subtrees so far\\n  uint256 public numLeaves;\\n\\n  /// @notice custom errors\\n  error SubDepthCannotBeZero();\\n  error SubdepthTooLarge(uint256 _subDepth, uint256 max);\\n  error InvalidHashLength();\\n  error DepthCannotBeZero();\\n  error SubTreesAlreadyMerged();\\n  error NothingToMerge();\\n  error SubTreesNotMerged();\\n  error DepthTooLarge(uint256 _depth, uint256 max);\\n  error DepthTooSmall(uint256 _depth, uint256 min);\\n  error InvalidIndex(uint256 _index);\\n  error InvalidLevel();\\n\\n  /// @notice Create a new AccQueue\\n  /// @param _subDepth The depth of each subtree.\\n  /// @param _hashLength The number of leaves per node (2 or 5).\\n  constructor(uint256 _subDepth, uint256 _hashLength) payable {\\n    /// validation\\n    if (_subDepth == 0) revert SubDepthCannotBeZero();\\n    if (_subDepth > MAX_DEPTH) revert SubdepthTooLarge(_subDepth, MAX_DEPTH);\\n    if (_hashLength != 2 && _hashLength != 5) revert InvalidHashLength();\\n\\n    isBinary = _hashLength == 2;\\n    subDepth = _subDepth;\\n    hashLength = _hashLength;\\n    subTreeCapacity = _hashLength ** _subDepth;\\n  }\\n\\n  /// @notice Hash the contents of the specified level and the specified leaf.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which require\\n  /// different input array lengths.\\n  /// @param _level The level to hash.\\n  /// @param _leaf The leaf include with the level.\\n  /// @return _hash The hash of the level and leaf.\\n  // solhint-disable-next-line no-empty-blocks\\n  function hashLevel(uint256 _level, uint256 _leaf) internal virtual returns (uint256 _hash) {}\\n\\n  /// @notice Hash the contents of the specified level and the specified leaf.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which require\\n  /// different input array lengths.\\n  /// @param _level The level to hash.\\n  /// @param _leaf The leaf include with the level.\\n  /// @return _hash The hash of the level and leaf.\\n  // solhint-disable-next-line no-empty-blocks\\n  function hashLevelLeaf(uint256 _level, uint256 _leaf) public view virtual returns (uint256 _hash) {}\\n\\n  /// @notice Returns the zero leaf at a specified level.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which will produce\\n  /// different zero values (e.g. hashLeftRight(0, 0) vs\\n  /// hash5([0, 0, 0, 0, 0]). Moreover, the zero value may be a\\n  /// nothing-up-my-sleeve value.\\n  /// @param _level The level at which to return the zero leaf.\\n  /// @return zero The zero leaf at the specified level.\\n  // solhint-disable-next-line no-empty-blocks\\n  function getZero(uint256 _level) internal virtual returns (uint256 zero) {}\\n\\n  /// @notice Add a leaf to the queue for the current subtree.\\n  /// @param _leaf The leaf to add.\\n  /// @return leafIndex The index of the leaf in the queue.\\n  function enqueue(uint256 _leaf) public onlyOwner returns (uint256 leafIndex) {\\n    leafIndex = numLeaves;\\n    // Recursively queue the leaf\\n    _enqueue(_leaf, 0);\\n\\n    // Update the leaf counter\\n    numLeaves = leafIndex + 1;\\n\\n    // Now that a new leaf has been added, mainRoots and smallSRTroot are\\n    // obsolete\\n    delete mainRoots;\\n    delete smallSRTroot;\\n    subTreesMerged = false;\\n\\n    // If a subtree is full\\n    if (numLeaves % subTreeCapacity == 0) {\\n      // Store the subroot\\n      subRoots[currentSubtreeIndex] = leafQueue.levels[subDepth][0];\\n\\n      // Increment the index\\n      currentSubtreeIndex++;\\n\\n      // Delete ancillary data\\n      delete leafQueue.levels[subDepth][0];\\n      delete leafQueue.indices;\\n    }\\n  }\\n\\n  /// @notice Updates the queue at a given level and hashes any subroots\\n  /// that need to be hashed.\\n  /// @param _leaf The leaf to add.\\n  /// @param _level The level at which to queue the leaf.\\n  function _enqueue(uint256 _leaf, uint256 _level) internal {\\n    if (_level > subDepth) {\\n      revert InvalidLevel();\\n    }\\n\\n    while (true) {\\n      uint256 n = leafQueue.indices[_level];\\n\\n      if (n != hashLength - 1) {\\n        // Just store the leaf\\n        leafQueue.levels[_level][n] = _leaf;\\n\\n        if (_level != subDepth) {\\n          // Update the index\\n          leafQueue.indices[_level]++;\\n        }\\n\\n        return;\\n      }\\n\\n      // Hash the leaves to next level\\n      _leaf = hashLevel(_level, _leaf);\\n\\n      // Reset the index for this level\\n      delete leafQueue.indices[_level];\\n\\n      // Queue the hash of the leaves into to the next level\\n      _level++;\\n    }\\n  }\\n\\n  /// @notice Fill any empty leaves of the current subtree with zeros and store the\\n  /// resulting subroot.\\n  function fill() public onlyOwner {\\n    if (numLeaves % subTreeCapacity == 0) {\\n      // If the subtree is completely empty, then the subroot is a\\n      // precalculated zero value\\n      subRoots[currentSubtreeIndex] = getZero(subDepth);\\n    } else {\\n      // Otherwise, fill the rest of the subtree with zeros\\n      _fill(0);\\n\\n      // Store the subroot\\n      subRoots[currentSubtreeIndex] = leafQueue.levels[subDepth][0];\\n\\n      // Reset the subtree data\\n      delete leafQueue.levels;\\n\\n      // Reset the merged roots\\n      delete mainRoots;\\n    }\\n\\n    // Increment the subtree index\\n    uint256 curr = currentSubtreeIndex + 1;\\n    currentSubtreeIndex = curr;\\n\\n    // Update the number of leaves\\n    numLeaves = curr * subTreeCapacity;\\n\\n    // Reset the subroot tree root now that it is obsolete\\n    delete smallSRTroot;\\n\\n    subTreesMerged = false;\\n  }\\n\\n  /// @notice A function that queues zeros to the specified level, hashes,\\n  /// the level, and enqueues the hash to the next level.\\n  /// @param _level The level at which to queue zeros.\\n  // solhint-disable-next-line no-empty-blocks\\n  function _fill(uint256 _level) internal virtual {}\\n\\n  /// Insert a subtree. Used for batch enqueues.\\n  function insertSubTree(uint256 _subRoot) public onlyOwner {\\n    subRoots[currentSubtreeIndex] = _subRoot;\\n\\n    // Increment the subtree index\\n    currentSubtreeIndex++;\\n\\n    // Update the number of leaves\\n    numLeaves += subTreeCapacity;\\n\\n    // Reset the subroot tree root now that it is obsolete\\n    delete smallSRTroot;\\n\\n    subTreesMerged = false;\\n  }\\n\\n  /// @notice Calculate the lowest possible height of a tree with\\n  /// all the subroots merged together.\\n  /// @return depth The lowest possible height of a tree with all the\\n  function calcMinHeight() public view returns (uint256 depth) {\\n    depth = 1;\\n    while (true) {\\n      if (hashLength ** depth >= currentSubtreeIndex) {\\n        break;\\n      }\\n      depth++;\\n    }\\n  }\\n\\n  /// @notice Merge all subtrees to form the shortest possible tree.\\n  /// This function can be called either once to merge all subtrees in a\\n  /// single transaction, or multiple times to do the same in multiple\\n  /// transactions.\\n  /// @param _numSrQueueOps The number of times this function will call\\n  ///                       queueSubRoot(), up to the maximum number of times\\n  ///                       necessary. If it is set to 0, it will call\\n  ///                       queueSubRoot() as many times as is necessary. Set\\n  ///                       this to a low number and call this function\\n  ///                       multiple times if there are many subroots to\\n  ///                       merge, or a single transaction could run out of\\n  ///                       gas.\\n  function mergeSubRoots(uint256 _numSrQueueOps) public onlyOwner {\\n    // This function can only be called once unless a new subtree is created\\n    if (subTreesMerged) revert SubTreesAlreadyMerged();\\n\\n    // There must be subtrees to merge\\n    if (numLeaves == 0) revert NothingToMerge();\\n\\n    // Fill any empty leaves in the current subtree with zeros only if the\\n    // current subtree is not full\\n    if (numLeaves % subTreeCapacity != 0) {\\n      fill();\\n    }\\n\\n    // If there is only 1 subtree, use its root\\n    if (currentSubtreeIndex == 1) {\\n      smallSRTroot = getSubRoot(0);\\n      subTreesMerged = true;\\n      return;\\n    }\\n\\n    uint256 depth = calcMinHeight();\\n\\n    uint256 queueOpsPerformed = 0;\\n    for (uint256 i = nextSubRootIndex; i < currentSubtreeIndex; i++) {\\n      if (_numSrQueueOps != 0 && queueOpsPerformed == _numSrQueueOps) {\\n        // If the limit is not 0, stop if the limit has been reached\\n        return;\\n      }\\n\\n      // Queue the next subroot\\n      queueSubRoot(getSubRoot(nextSubRootIndex), 0, depth);\\n\\n      // Increment the next subroot counter\\n      nextSubRootIndex++;\\n\\n      // Increment the ops counter\\n      queueOpsPerformed++;\\n    }\\n\\n    // The height of the tree of subroots\\n    uint256 m = hashLength ** depth;\\n\\n    // Queue zeroes to fill out the SRT\\n    if (nextSubRootIndex == currentSubtreeIndex) {\\n      uint256 z = getZero(subDepth);\\n      for (uint256 i = currentSubtreeIndex; i < m; i++) {\\n        queueSubRoot(z, 0, depth);\\n      }\\n    }\\n\\n    // Store the smallest main root\\n    smallSRTroot = subRootQueue.levels[depth][0];\\n    subTreesMerged = true;\\n  }\\n\\n  /// @notice Queues a subroot into the subroot tree.\\n  /// @param _leaf The value to queue.\\n  /// @param _level The level at which to queue _leaf.\\n  /// @param _maxDepth The depth of the tree.\\n  function queueSubRoot(uint256 _leaf, uint256 _level, uint256 _maxDepth) internal {\\n    if (_level > _maxDepth) {\\n      return;\\n    }\\n\\n    uint256 n = subRootQueue.indices[_level];\\n\\n    if (n != hashLength - 1) {\\n      // Just store the leaf\\n      subRootQueue.levels[_level][n] = _leaf;\\n      subRootQueue.indices[_level]++;\\n    } else {\\n      // Hash the elements in this level and queue it in the next level\\n      uint256 hashed;\\n      if (isBinary) {\\n        uint256[2] memory inputs;\\n        inputs[0] = subRootQueue.levels[_level][0];\\n        inputs[1] = _leaf;\\n        hashed = hash2(inputs);\\n      } else {\\n        uint256[5] memory inputs;\\n        for (uint8 i = 0; i < n; i++) {\\n          inputs[i] = subRootQueue.levels[_level][i];\\n        }\\n        inputs[n] = _leaf;\\n        hashed = hash5(inputs);\\n      }\\n\\n      // TODO: change recursion to a while loop\\n      // Recurse\\n      delete subRootQueue.indices[_level];\\n      queueSubRoot(hashed, _level + 1, _maxDepth);\\n    }\\n  }\\n\\n  /// @notice Merge all subtrees to form a main tree with a desired depth.\\n  /// @param _depth The depth of the main tree. It must fit all the leaves or\\n  ///               this function will revert.\\n  /// @return root The root of the main tree.\\n  function merge(uint256 _depth) public onlyOwner returns (uint256 root) {\\n    // The tree depth must be more than 0\\n    if (_depth == 0) revert DepthCannotBeZero();\\n\\n    // Ensure that the subtrees have been merged\\n    if (!subTreesMerged) revert SubTreesNotMerged();\\n\\n    // Check the depth\\n    if (_depth > MAX_DEPTH) revert DepthTooLarge(_depth, MAX_DEPTH);\\n\\n    // Calculate the SRT depth\\n    uint256 srtDepth = subDepth;\\n    while (true) {\\n      if (hashLength ** srtDepth >= numLeaves) {\\n        break;\\n      }\\n      srtDepth++;\\n    }\\n\\n    if (_depth < srtDepth) revert DepthTooSmall(_depth, srtDepth);\\n\\n    // If the depth is the same as the SRT depth, just use the SRT root\\n    if (_depth == srtDepth) {\\n      mainRoots[_depth] = smallSRTroot;\\n      treeMerged = true;\\n      return smallSRTroot;\\n    } else {\\n      root = smallSRTroot;\\n\\n      // Calculate the main root\\n\\n      for (uint256 i = srtDepth; i < _depth; i++) {\\n        uint256 z = getZero(i);\\n\\n        if (isBinary) {\\n          uint256[2] memory inputs;\\n          inputs[0] = root;\\n          inputs[1] = z;\\n          root = hash2(inputs);\\n        } else {\\n          uint256[5] memory inputs;\\n          inputs[0] = root;\\n          inputs[1] = z;\\n          inputs[2] = z;\\n          inputs[3] = z;\\n          inputs[4] = z;\\n          root = hash5(inputs);\\n        }\\n      }\\n\\n      mainRoots[_depth] = root;\\n      treeMerged = true;\\n    }\\n  }\\n\\n  /// @notice Returns the subroot at the specified index. Reverts if the index refers\\n  /// to a subtree which has not been filled yet.\\n  /// @param _index The subroot index.\\n  /// @return subRoot The subroot at the specified index.\\n  function getSubRoot(uint256 _index) public view returns (uint256 subRoot) {\\n    if (currentSubtreeIndex <= _index) revert InvalidIndex(_index);\\n    subRoot = subRoots[_index];\\n  }\\n\\n  /// @notice Returns the subroot tree (SRT) root. Its value must first be computed\\n  /// using mergeSubRoots.\\n  /// @return smallSubTreeRoot The SRT root.\\n  function getSmallSRTroot() public view returns (uint256 smallSubTreeRoot) {\\n    if (!subTreesMerged) revert SubTreesNotMerged();\\n    smallSubTreeRoot = smallSRTroot;\\n  }\\n\\n  /// @notice Return the merged Merkle root of all the leaves at a desired depth.\\n  /// @dev merge() or merged(_depth) must be called first.\\n  /// @param _depth The depth of the main tree. It must first be computed\\n  ///               using mergeSubRoots() and merge().\\n  /// @return mainRoot The root of the main tree.\\n  function getMainRoot(uint256 _depth) public view returns (uint256 mainRoot) {\\n    if (hashLength ** _depth < numLeaves) revert DepthTooSmall(_depth, numLeaves);\\n\\n    mainRoot = mainRoots[_depth];\\n  }\\n\\n  /// @notice Get the next subroot index and the current subtree index.\\n  function getSrIndices() public view returns (uint256 next, uint256 current) {\\n    next = nextSubRootIndex;\\n    current = currentSubtreeIndex;\\n  }\\n}\\n\",\"keccak256\":\"0xf7b3357a612808b59e27300842bd92fefc42e276348fc2f4bf794192e2499de8\",\"license\":\"MIT\"},\"maci-contracts/contracts/utilities/CommonUtilities.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { IPoll } from \\\"../interfaces/IPoll.sol\\\";\\n\\n/// @title CommonUtilities\\n/// @notice A contract that holds common utilities\\n/// which are to be used by multiple contracts\\n/// namely Tally and MessageProcessor\\ncontract CommonUtilities {\\n  error VotingPeriodNotPassed();\\n\\n  /// @notice common function for MessageProcessor, and Tally\\n  /// @param _poll the poll to be checked\\n  function _votingPeriodOver(IPoll _poll) internal view {\\n    (uint256 deployTime, uint256 duration) = _poll.getDeployTimeAndDuration();\\n    // Require that the voting period is over\\n    uint256 secondsPassed = block.timestamp - deployTime;\\n    if (secondsPassed <= duration) {\\n      revert VotingPeriodNotPassed();\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x68178c1708e2e90a3b66ad79a6b815f5b01e2990b05c31b97d51653e16df39a5\",\"license\":\"MIT\"},\"maci-contracts/contracts/utilities/DomainObjs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @title DomainObjs\\n/// @notice An utility contract that holds\\n/// a number of domain objects and functions\\ncontract DomainObjs {\\n  /// @notice the length of a MACI message\\n  uint8 public constant MESSAGE_DATA_LENGTH = 10;\\n\\n  /// @notice voting modes\\n  enum Mode {\\n    QV,\\n    NON_QV\\n  }\\n\\n  /// @title Message\\n  /// @notice this struct represents a MACI message\\n  /// @dev msgType: 1 for vote message, 2 for topup message (size 2)\\n  struct Message {\\n    uint256 msgType;\\n    uint256[MESSAGE_DATA_LENGTH] data;\\n  }\\n\\n  /// @title PubKey\\n  /// @notice A MACI public key\\n  struct PubKey {\\n    uint256 x;\\n    uint256 y;\\n  }\\n\\n  /// @title StateLeaf\\n  /// @notice A MACI state leaf\\n  /// @dev used to represent a user's state\\n  /// in the state Merkle tree\\n  struct StateLeaf {\\n    PubKey pubKey;\\n    uint256 voiceCreditBalance;\\n    uint256 timestamp;\\n  }\\n}\\n\",\"keccak256\":\"0x01994d163c6f1bf7020542ac40540c579dd2c9ec37a0cf3697a715261a0109fb\",\"license\":\"MIT\"},\"maci-contracts/contracts/utilities/Params.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { IMACI } from \\\"../interfaces/IMACI.sol\\\";\\nimport { AccQueue } from \\\"../trees/AccQueue.sol\\\";\\nimport { TopupCredit } from \\\"../TopupCredit.sol\\\";\\n\\n/// @title Params\\n/// @notice This contracts contains a number of structures\\n/// which are to be passed as parameters to Poll contracts.\\n/// This way we can reduce the number of parameters\\n/// and avoid a stack too deep error during compilation.\\ncontract Params {\\n  /// @notice A struct holding the depths of the merkle trees\\n  struct TreeDepths {\\n    uint8 intStateTreeDepth;\\n    uint8 messageTreeSubDepth;\\n    uint8 messageTreeDepth;\\n    uint8 voteOptionTreeDepth;\\n  }\\n\\n  /// @notice A struct holding the max values for the poll\\n  struct MaxValues {\\n    uint256 maxMessages;\\n    uint256 maxVoteOptions;\\n  }\\n\\n  /// @notice A struct holding the external contracts\\n  /// that are to be passed to a Poll contract on\\n  /// deployment\\n  struct ExtContracts {\\n    IMACI maci;\\n    AccQueue messageAq;\\n    TopupCredit topupCredit;\\n  }\\n}\\n\",\"keccak256\":\"0x6c9d1840a1b8c9b33d889d0c5ef377781398fdcc48b05f70045fe897da7eba3f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657611db0908161001c8239f35b600080fdfe60806040818152600436101561001457600080fd5b600091823560e01c9081633634487314610056575063683f3dc31461003857600080fd5b3461005257816003193601126100525760209051600a8152f35b5080fd5b9190503461018f5760a036600319011261018f576004356001600160a01b0381811691829003610167576024359381851680950361018b576044359282841680940361018757606435938385168095036101835760843590600282101561017f57611be7978885019367ffffffffffffffff998686108b87111761016b5791608095939187959361019487398452602084015288830152606082015203019086f0801561015d571692833b156101675782519163f2fde38b60e01b83526004830152848260248183885af1801561015d57610136575b6020848451908152f35b811161014957602093508152388061012c565b634e487b7160e01b84526041600452602484fd5b83513d87823e3d90fd5b8480fd5b634e487b7160e01b8c52604160045260248cfd5b8880fd5b8780fd5b8680fd5b8580fd5b8280fdfe610100601f62001be738819003918201601f19168301916001600160401b038311848410176200018c5780849260809460405283398101031262000187576200004881620001a2565b906200005760208201620001a2565b60606200006760408401620001a2565b920151916002831015620001875733156200016e5760008054336001600160a01b0319821681178355604051966001600160a01b039586949093859391908416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a31660a0521660c0521660805260e052611a2f9081620001b88239608051818181610389015281816103f80152818161044c015281816104b101528181610556015281816105a9015281816107e201528181610b8901528181610bdb01528181610e33015281816113e10152611435015260a05181818161078d015261121d015260c05181818161069701526112a4015260e05181818161066b01526112680152f35b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620001875756fe6080604052600436101561001257600080fd5b60003560e01c80630cd3b91d146112d357806313fb89321461128e578063295a52121461124c5780632b7ac3f3146112075780633d6528a1146111e95780633dfb88b21461112357806358bfc379146110995780635bb939951461106157806362a361bb1461100a578063683f3dc314610fee578063715018a614610f955780637a38d18f14610f775780638763d0c414610f515780638da5cb5b14610f285780639cfced9714610e62578063a117527914610e1d578063b1a263d31461031b578063bea140b3146101ff578063d13181b8146101e1578063d1849f48146101985763f2fde38b1461010357600080fd5b34610193576020366003190112610193576004356001600160a01b0381811691829003610193576101326118df565b811561017a57600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b346101935760a03660031901126101935760643560ff81168103610193576084359060ff82168203610193576020916101d991604435602435600435611811565b604051908152f35b34610193576000366003190112610193576020600354604051908152f35b34610193576060366003190112610193573660231215610193576040516060810181811067ffffffffffffffff82111761030557604052606481368211610193576004905b8282106102f5576040516304b98e1d60e31b8152600085600483015b600383106102de57836020816064817368B1D87F95878fE05B998F19b66F4baba5De1aed5af480156102d25760009061029f575b602090604051908152f35b506020813d6020116102ca575b816102b96020938361135d565b810103126101935760209051610294565b3d91506102ac565b6040513d6000823e3d90fd5b600190825181526020809101920192019190610260565b8135815260209182019101610244565b634e487b7160e01b600052604160045260246000fd5b346101935761012036600319011261019357366043121561019357604051610100810181811067ffffffffffffffff82111761030557604052803661012411610193576024905b6101248210610e0d57826103746118df565b60408051634909229f60e01b815290816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156102d257600090600092610de9575b506103d09042611804565b1115610dd75760ff60005460a01c16610dc55760405163b5f38c8160e01b81526020816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156102d257600091610da6575b5015610d945760405163ac98e5df60e01b81526080816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9182156102d257600091600090600094610d2f575b5061049860ff84166116f3565b60405163bc14ee2b60e01b8152909390916060836004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9283156102d257602493602091600091610d0d575b50604051631b9b8aa760e01b815260ff8416600482015294859182906001600160a01b03165afa9283156102d257600093610cd9575b508215610cc75760015415610b74575b60025460035460408051634f367f0f60e01b8152929892949190856004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156102d257600095600092610b50575b5060405163bc14ee2b60e01b8152916060836004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9687156102d2576004988c94600099610b0a575b50936105fc93879387936020978d35946113ba565b60405163194b1db960e21b815296909587919082906001600160a01b03165afa9485156102d257600095610ac2575b509060ff61063b818094166116f3565b60405163d88ff4f560e01b8152968216600488015293166024860152166044840152606483015261068f608483017f000000000000000000000000000000000000000000000000000000000000000061131e565b60008260a4817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9182156102d257600092610957575b506040516308adcb2560e21b815292909183916000600484015b6008821061093d575050506101406101048301526080610324830191602081518051610144870152015161016485015261072d60208201516101848601906119d9565b61074060408201516102048601906119d9565b61075360608201516102848601906119d9565b0151906101e061030484015281518091526020610344840192019060005b81811061091857505050610124820192909252602091819003817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156102d2576000916108e9575b50156108d45760408051634f367f0f60e01b81529290836004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9283156102d2576000936108a1575b50818161088e575b50506001549060018201928383116108785783820291808304851490151715610878576004356003556000805460ff60a01b1916929091111560a01b60ff60a01b169190911790556000191461087857600155005b634e487b7160e01b600052601160045260246000fd5b61089791611804565b6002558281610823565b6108c491935060403d6040116108cd575b6108bc818361135d565b810190611397565b9050918361081b565b503d6108b2565b60405160016268f24f60e01b03198152600490fd5b61090b915060203d602011610911575b610903818361135d565b8101906116cd565b836107c6565b503d6108f9565b8251805185526020908101518186015287955060409094019390920191600101610771565b8251815286945060209283019260019290920191016106ea565b9091503d806000833e61096a818361135d565b60208282810103126101935781519167ffffffffffffffff8311610193576101e0838201838301031261019357604051928360a081011067ffffffffffffffff60a0860111176103055760a084016040526109c983830182840161190b565b84526109dc838301604083850101611978565b60208501526109f283830160c083850101611978565b6040850152610a0983830161014083850101611978565b60608501526101c081830101519267ffffffffffffffff841161019357808301601f85848601010112156101935783828401015192610a478461137f565b94610a55604051968761135d565b848652602086019383830160208760061b848487010101011161019357828101820160200194915b60208760061b828487010101018610610aa35750505050505050608082015290856106d0565b604060208094610ab58888018a61190b565b8152019601959250610a7d565b919094506020823d602011610b02575b81610adf6020938361135d565b810103126101935760ff61063b81610af781956116e5565b97939450505061062b565b3d9150610ad2565b6020959199509387938793610b396105fc9760603d606011610b49575b610b31818361135d565b8101906117c3565b50509b93975093509350936105e7565b503d610b27565b909550610b6c915060403d6040116108cd576108bc818361135d565b90948a610592565b60405163c17268d960e01b81526020816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156102d257600091610c95575b5060035560408051634f367f0f60e01b815290816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156102d257600091610c74575b508515610c5e578581068160025581610c2f575b5050610536565b80610c4d575050610c4285600254611804565b6002555b8680610c28565b610c5691611804565b600255610c46565b634e487b7160e01b600052601260045260246000fd5b610c8d915060403d6040116108cd576108bc818361135d565b905087610c14565b90506020813d602011610cbf575b81610cb06020938361135d565b81010312610193575187610bc2565b3d9150610ca3565b60405163c0b868a560e01b8152600490fd5b9092506020813d602011610d05575b81610cf56020938361135d565b8101031261019357519186610526565b3d9150610ce8565b610d26915060603d606011610b4957610b31818361135d565b509050886104f0565b92505091506080813d608011610d8c575b81610d4d6080938361135d565b8101031261019357610d5e816116e5565b50610d6b602082016116e5565b91610d846060610d7d604085016116e5565b93016116e5565b92918461048b565b3d9150610d40565b604051631bb80bef60e31b8152600490fd5b610dbf915060203d60201161091157610903818361135d565b82610431565b60405163a7f0397560e01b8152600490fd5b604051635c3017c560e11b8152600490fd5b6103d09250610e07915060403d6040116108cd576108bc818361135d565b916103c5565b8135815260209182019101610362565b34610193576000366003190112610193576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346101935760a03660031901126101935736602312156101935760405160a0810181811067ffffffffffffffff8211176103055760405260a481368211610193576004905b828210610f1857604051630926f44b60e31b8152600085600483015b60058310610f01578360208160a48173c6e7DF5E7b4f2A278906862b61205850344D4e7d5af480156102d25760009061029f57602090604051908152f35b600190825181526020809101920192019190610ec3565b8135815260209182019101610ea7565b34610193576000366003190112610193576000546040516001600160a01b039091168152602090f35b3461019357600036600319011261019357602060ff60005460a01c166040519015158152f35b34610193576000366003190112610193576020600154604051908152f35b3461019357600036600319011261019357610fae6118df565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b34610193576000366003190112610193576020604051600a8152f35b346101935760403660031901126101935736602312156101935760405161103081611341565b604481368211610193576020926004905b83821061105257846101d984611637565b81358152908401908401611041565b346101935760403660031901126101935760206101d960405161108381611341565b6040368237600435815260243583820152611637565b34610193576020806003193601126101935760043567ffffffffffffffff81116101935736602382011215610193578060040135906110d78261137f565b916110e5604051938461135d565b8083526024602084019160051b8301019136831161019357602401905b8282106111145760206101d98561158a565b81358152908401908401611102565b34610193576080366003190112610193573660231215610193576040516080810181811067ffffffffffffffff82111761030557604052608481368211610193576004905b8282106111d95760405163248f667760e01b8152600085600483015b600483106111c25783602081608481733Aa5ebB10DC797CAC828524e59A333d0A371443c5af480156102d25760009061029f57602090604051908152f35b600190825181526020809101920192019190611184565b8135815260209182019101611168565b34610193576000366003190112610193576020600254604051908152f35b34610193576000366003190112610193576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b3461019357600036600319011261019357602060405161128c817f000000000000000000000000000000000000000000000000000000000000000061131e565bf35b34610193576000366003190112610193576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b34610193576101003660031901126101935760c43560ff811681036101935760e4359060ff82168203610193576020916101d99160a4356084356064356044356024356004356113ba565b90600282101561132b5752565b634e487b7160e01b600052602160045260246000fd5b6040810190811067ffffffffffffffff82111761030557604052565b90601f8019910116810190811067ffffffffffffffff82111761030557604052565b67ffffffffffffffff81116103055760051b60200190565b9190826040910312610193576020825192015190565b9190820180921161087857565b93919294959690966040958651946345505d4960e11b865260208660048160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa95861561157f57600096611547575b5061141e949596611811565b8351634909229f60e01b81529095909284846004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa94851561153d57600094600096611518575b5080519760e0890189811067ffffffffffffffff821117610305578252600689526020890160c0368237895115611502575287516001101561150257870152855160021015611502576060860152845160031015611502576080850152835160041015611502576114e69260a08501526113ad565b90805160051015611502576114ff9160c082015261158a565b90565b634e487b7160e01b600052603260045260246000fd5b908096506115339295503d87116108cd576108bc818361135d565b9390939438611471565b513d6000823e3d90fd5b9495506020853d602011611577575b816115636020938361135d565b810103126101935761141e94519594611412565b3d9150611556565b88513d6000823e3d90fd5b604051815160209283019082908482019060005b86828210611620575050506115bc925003601f19810183528261135d565b604051908051908360005b83811061160e5750505090806000928101838152039060025afa156102d2577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016000510690565b818184010151818601520184906115c7565b85518452948501948694509092019160010161159e565b6040516314d2f97b60e11b815290600090600483015b600283106116b657505050602081604481739A9f2CCfdE556A7E9Ff0848998Aa4a0CFD8863AE5af49081156102d257600091611687575090565b90506020813d6020116116ae575b816116a26020938361135d565b81010312610193575190565b3d9150611695565b60019082518152602080910192019201919061164d565b90816020910312610193575180151581036101935790565b519060ff8216820361019357565b801561175c57600190602081108216604e82108316176117545781906005925b80821161172b57505081600019048111610878570290565b9092806000190481116108785781841661174b575b800292811c90611713565b80920291611740565b905060050a90565b50600190565b801561175c57600190602081108216604e82108316176117545781906005925b80821161179a57505081600019048111610878570290565b909280600019048111610878578184166117ba575b800292811c90611782565b809202916117af565b908160609103126101935780516001600160a01b03929083811681036101935792602083015181811681036101935760409093015190811681036101935790565b9190820391821161087857565b909361183060ff611829816118369497969716611762565b9416611762565b826113ad565b928084116118d7575b506604000000000000808310156118c557808510156118b357808210156118a15783101561188f5761187b611885926114ff9560321b906113ad565b9060641b906113ad565b9060961b906113ad565b6040516309c5b7c360e21b8152600490fd5b6040516328b2660560e21b8152600490fd5b604051631805864f60e21b8152600490fd5b60405163df0dbdbd60e01b8152600490fd5b92503861183f565b6000546001600160a01b031633036118f357565b60405163118cdaa760e01b8152336004820152602490fd5b91908260409103126101935760405161192381611341565b6020808294805184520151910152565b9080601f83011215610193576040519161194c83611341565b82906040810192831161019357905b8282106119685750505090565b815181526020918201910161195b565b91906080838203126101935760206119ac6040519261199684611341565b604084966119a48382611933565b865201611933565b910152565b6000915b600283106119c257505050565b6001908251815260208091019201920191906119b5565b90604060206119f7936119ed8482516119b1565b01519101906119b1565b56fea2646970667358221220ae73e29325ab85bea4c2850144f0b9388b4df7d04c02908119c11738ac45c90b64736f6c63430008180033a2646970667358221220cf09bba6d19c12dda9914d935e7ae2a6a33b883a36b961181513970310e9a2fd64736f6c63430008180033",
  "deployedBytecode": "0x60806040818152600436101561001457600080fd5b600091823560e01c9081633634487314610056575063683f3dc31461003857600080fd5b3461005257816003193601126100525760209051600a8152f35b5080fd5b9190503461018f5760a036600319011261018f576004356001600160a01b0381811691829003610167576024359381851680950361018b576044359282841680940361018757606435938385168095036101835760843590600282101561017f57611be7978885019367ffffffffffffffff998686108b87111761016b5791608095939187959361019487398452602084015288830152606082015203019086f0801561015d571692833b156101675782519163f2fde38b60e01b83526004830152848260248183885af1801561015d57610136575b6020848451908152f35b811161014957602093508152388061012c565b634e487b7160e01b84526041600452602484fd5b83513d87823e3d90fd5b8480fd5b634e487b7160e01b8c52604160045260248cfd5b8880fd5b8780fd5b8680fd5b8580fd5b8280fdfe610100601f62001be738819003918201601f19168301916001600160401b038311848410176200018c5780849260809460405283398101031262000187576200004881620001a2565b906200005760208201620001a2565b60606200006760408401620001a2565b920151916002831015620001875733156200016e5760008054336001600160a01b0319821681178355604051966001600160a01b039586949093859391908416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a31660a0521660c0521660805260e052611a2f9081620001b88239608051818181610389015281816103f80152818161044c015281816104b101528181610556015281816105a9015281816107e201528181610b8901528181610bdb01528181610e33015281816113e10152611435015260a05181818161078d015261121d015260c05181818161069701526112a4015260e05181818161066b01526112680152f35b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620001875756fe6080604052600436101561001257600080fd5b60003560e01c80630cd3b91d146112d357806313fb89321461128e578063295a52121461124c5780632b7ac3f3146112075780633d6528a1146111e95780633dfb88b21461112357806358bfc379146110995780635bb939951461106157806362a361bb1461100a578063683f3dc314610fee578063715018a614610f955780637a38d18f14610f775780638763d0c414610f515780638da5cb5b14610f285780639cfced9714610e62578063a117527914610e1d578063b1a263d31461031b578063bea140b3146101ff578063d13181b8146101e1578063d1849f48146101985763f2fde38b1461010357600080fd5b34610193576020366003190112610193576004356001600160a01b0381811691829003610193576101326118df565b811561017a57600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b346101935760a03660031901126101935760643560ff81168103610193576084359060ff82168203610193576020916101d991604435602435600435611811565b604051908152f35b34610193576000366003190112610193576020600354604051908152f35b34610193576060366003190112610193573660231215610193576040516060810181811067ffffffffffffffff82111761030557604052606481368211610193576004905b8282106102f5576040516304b98e1d60e31b8152600085600483015b600383106102de578360208160648173__$fa059fb1da6d850ca47ea49359bfe89f78$__5af480156102d25760009061029f575b602090604051908152f35b506020813d6020116102ca575b816102b96020938361135d565b810103126101935760209051610294565b3d91506102ac565b6040513d6000823e3d90fd5b600190825181526020809101920192019190610260565b8135815260209182019101610244565b634e487b7160e01b600052604160045260246000fd5b346101935761012036600319011261019357366043121561019357604051610100810181811067ffffffffffffffff82111761030557604052803661012411610193576024905b6101248210610e0d57826103746118df565b60408051634909229f60e01b815290816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156102d257600090600092610de9575b506103d09042611804565b1115610dd75760ff60005460a01c16610dc55760405163b5f38c8160e01b81526020816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156102d257600091610da6575b5015610d945760405163ac98e5df60e01b81526080816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9182156102d257600091600090600094610d2f575b5061049860ff84166116f3565b60405163bc14ee2b60e01b8152909390916060836004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9283156102d257602493602091600091610d0d575b50604051631b9b8aa760e01b815260ff8416600482015294859182906001600160a01b03165afa9283156102d257600093610cd9575b508215610cc75760015415610b74575b60025460035460408051634f367f0f60e01b8152929892949190856004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156102d257600095600092610b50575b5060405163bc14ee2b60e01b8152916060836004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9687156102d2576004988c94600099610b0a575b50936105fc93879387936020978d35946113ba565b60405163194b1db960e21b815296909587919082906001600160a01b03165afa9485156102d257600095610ac2575b509060ff61063b818094166116f3565b60405163d88ff4f560e01b8152968216600488015293166024860152166044840152606483015261068f608483017f000000000000000000000000000000000000000000000000000000000000000061131e565b60008260a4817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9182156102d257600092610957575b506040516308adcb2560e21b815292909183916000600484015b6008821061093d575050506101406101048301526080610324830191602081518051610144870152015161016485015261072d60208201516101848601906119d9565b61074060408201516102048601906119d9565b61075360608201516102848601906119d9565b0151906101e061030484015281518091526020610344840192019060005b81811061091857505050610124820192909252602091819003817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156102d2576000916108e9575b50156108d45760408051634f367f0f60e01b81529290836004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9283156102d2576000936108a1575b50818161088e575b50506001549060018201928383116108785783820291808304851490151715610878576004356003556000805460ff60a01b1916929091111560a01b60ff60a01b169190911790556000191461087857600155005b634e487b7160e01b600052601160045260246000fd5b61089791611804565b6002558281610823565b6108c491935060403d6040116108cd575b6108bc818361135d565b810190611397565b9050918361081b565b503d6108b2565b60405160016268f24f60e01b03198152600490fd5b61090b915060203d602011610911575b610903818361135d565b8101906116cd565b836107c6565b503d6108f9565b8251805185526020908101518186015287955060409094019390920191600101610771565b8251815286945060209283019260019290920191016106ea565b9091503d806000833e61096a818361135d565b60208282810103126101935781519167ffffffffffffffff8311610193576101e0838201838301031261019357604051928360a081011067ffffffffffffffff60a0860111176103055760a084016040526109c983830182840161190b565b84526109dc838301604083850101611978565b60208501526109f283830160c083850101611978565b6040850152610a0983830161014083850101611978565b60608501526101c081830101519267ffffffffffffffff841161019357808301601f85848601010112156101935783828401015192610a478461137f565b94610a55604051968761135d565b848652602086019383830160208760061b848487010101011161019357828101820160200194915b60208760061b828487010101018610610aa35750505050505050608082015290856106d0565b604060208094610ab58888018a61190b565b8152019601959250610a7d565b919094506020823d602011610b02575b81610adf6020938361135d565b810103126101935760ff61063b81610af781956116e5565b97939450505061062b565b3d9150610ad2565b6020959199509387938793610b396105fc9760603d606011610b49575b610b31818361135d565b8101906117c3565b50509b93975093509350936105e7565b503d610b27565b909550610b6c915060403d6040116108cd576108bc818361135d565b90948a610592565b60405163c17268d960e01b81526020816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156102d257600091610c95575b5060035560408051634f367f0f60e01b815290816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156102d257600091610c74575b508515610c5e578581068160025581610c2f575b5050610536565b80610c4d575050610c4285600254611804565b6002555b8680610c28565b610c5691611804565b600255610c46565b634e487b7160e01b600052601260045260246000fd5b610c8d915060403d6040116108cd576108bc818361135d565b905087610c14565b90506020813d602011610cbf575b81610cb06020938361135d565b81010312610193575187610bc2565b3d9150610ca3565b60405163c0b868a560e01b8152600490fd5b9092506020813d602011610d05575b81610cf56020938361135d565b8101031261019357519186610526565b3d9150610ce8565b610d26915060603d606011610b4957610b31818361135d565b509050886104f0565b92505091506080813d608011610d8c575b81610d4d6080938361135d565b8101031261019357610d5e816116e5565b50610d6b602082016116e5565b91610d846060610d7d604085016116e5565b93016116e5565b92918461048b565b3d9150610d40565b604051631bb80bef60e31b8152600490fd5b610dbf915060203d60201161091157610903818361135d565b82610431565b60405163a7f0397560e01b8152600490fd5b604051635c3017c560e11b8152600490fd5b6103d09250610e07915060403d6040116108cd576108bc818361135d565b916103c5565b8135815260209182019101610362565b34610193576000366003190112610193576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346101935760a03660031901126101935736602312156101935760405160a0810181811067ffffffffffffffff8211176103055760405260a481368211610193576004905b828210610f1857604051630926f44b60e31b8152600085600483015b60058310610f01578360208160a48173__$46fbdf6658faf65265971bdad66851b86c$__5af480156102d25760009061029f57602090604051908152f35b600190825181526020809101920192019190610ec3565b8135815260209182019101610ea7565b34610193576000366003190112610193576000546040516001600160a01b039091168152602090f35b3461019357600036600319011261019357602060ff60005460a01c166040519015158152f35b34610193576000366003190112610193576020600154604051908152f35b3461019357600036600319011261019357610fae6118df565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b34610193576000366003190112610193576020604051600a8152f35b346101935760403660031901126101935736602312156101935760405161103081611341565b604481368211610193576020926004905b83821061105257846101d984611637565b81358152908401908401611041565b346101935760403660031901126101935760206101d960405161108381611341565b6040368237600435815260243583820152611637565b34610193576020806003193601126101935760043567ffffffffffffffff81116101935736602382011215610193578060040135906110d78261137f565b916110e5604051938461135d565b8083526024602084019160051b8301019136831161019357602401905b8282106111145760206101d98561158a565b81358152908401908401611102565b34610193576080366003190112610193573660231215610193576040516080810181811067ffffffffffffffff82111761030557604052608481368211610193576004905b8282106111d95760405163248f667760e01b8152600085600483015b600483106111c2578360208160848173__$e61c65d9562aef5fa6ab22c0f787cf1e30$__5af480156102d25760009061029f57602090604051908152f35b600190825181526020809101920192019190611184565b8135815260209182019101611168565b34610193576000366003190112610193576020600254604051908152f35b34610193576000366003190112610193576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b3461019357600036600319011261019357602060405161128c817f000000000000000000000000000000000000000000000000000000000000000061131e565bf35b34610193576000366003190112610193576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b34610193576101003660031901126101935760c43560ff811681036101935760e4359060ff82168203610193576020916101d99160a4356084356064356044356024356004356113ba565b90600282101561132b5752565b634e487b7160e01b600052602160045260246000fd5b6040810190811067ffffffffffffffff82111761030557604052565b90601f8019910116810190811067ffffffffffffffff82111761030557604052565b67ffffffffffffffff81116103055760051b60200190565b9190826040910312610193576020825192015190565b9190820180921161087857565b93919294959690966040958651946345505d4960e11b865260208660048160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa95861561157f57600096611547575b5061141e949596611811565b8351634909229f60e01b81529095909284846004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa94851561153d57600094600096611518575b5080519760e0890189811067ffffffffffffffff821117610305578252600689526020890160c0368237895115611502575287516001101561150257870152855160021015611502576060860152845160031015611502576080850152835160041015611502576114e69260a08501526113ad565b90805160051015611502576114ff9160c082015261158a565b90565b634e487b7160e01b600052603260045260246000fd5b908096506115339295503d87116108cd576108bc818361135d565b9390939438611471565b513d6000823e3d90fd5b9495506020853d602011611577575b816115636020938361135d565b810103126101935761141e94519594611412565b3d9150611556565b88513d6000823e3d90fd5b604051815160209283019082908482019060005b86828210611620575050506115bc925003601f19810183528261135d565b604051908051908360005b83811061160e5750505090806000928101838152039060025afa156102d2577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016000510690565b818184010151818601520184906115c7565b85518452948501948694509092019160010161159e565b6040516314d2f97b60e11b815290600090600483015b600283106116b65750505060208160448173__$1540826e134b1b69b7091c82576ee3aadd$__5af49081156102d257600091611687575090565b90506020813d6020116116ae575b816116a26020938361135d565b81010312610193575190565b3d9150611695565b60019082518152602080910192019201919061164d565b90816020910312610193575180151581036101935790565b519060ff8216820361019357565b801561175c57600190602081108216604e82108316176117545781906005925b80821161172b57505081600019048111610878570290565b9092806000190481116108785781841661174b575b800292811c90611713565b80920291611740565b905060050a90565b50600190565b801561175c57600190602081108216604e82108316176117545781906005925b80821161179a57505081600019048111610878570290565b909280600019048111610878578184166117ba575b800292811c90611782565b809202916117af565b908160609103126101935780516001600160a01b03929083811681036101935792602083015181811681036101935760409093015190811681036101935790565b9190820391821161087857565b909361183060ff611829816118369497969716611762565b9416611762565b826113ad565b928084116118d7575b506604000000000000808310156118c557808510156118b357808210156118a15783101561188f5761187b611885926114ff9560321b906113ad565b9060641b906113ad565b9060961b906113ad565b6040516309c5b7c360e21b8152600490fd5b6040516328b2660560e21b8152600490fd5b604051631805864f60e21b8152600490fd5b60405163df0dbdbd60e01b8152600490fd5b92503861183f565b6000546001600160a01b031633036118f357565b60405163118cdaa760e01b8152336004820152602490fd5b91908260409103126101935760405161192381611341565b6020808294805184520151910152565b9080601f83011215610193576040519161194c83611341565b82906040810192831161019357905b8282106119685750505090565b815181526020918201910161195b565b91906080838203126101935760206119ac6040519261199684611341565b604084966119a48382611933565b865201611933565b910152565b6000915b600283106119c257505050565b6001908251815260208091019201920191906119b5565b90604060206119f7936119ed8482516119b1565b01519101906119b1565b56fea2646970667358221220ae73e29325ab85bea4c2850144f0b9388b4df7d04c02908119c11738ac45c90b64736f6c63430008180033a2646970667358221220cf09bba6d19c12dda9914d935e7ae2a6a33b883a36b961181513970310e9a2fd64736f6c63430008180033",
  "libraries": {
    "PoseidonT3": "0x9A9f2CCfdE556A7E9Ff0848998Aa4a0CFD8863AE",
    "PoseidonT4": "0x68B1D87F95878fE05B998F19b66F4baba5De1aed",
    "PoseidonT5": "0x3Aa5ebB10DC797CAC828524e59A333d0A371443c",
    "PoseidonT6": "0xc6e7DF5E7b4f2A278906862b61205850344D4e7d"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deploy(address,address,address,address,uint8)": {
        "params": {
          "_mode": "Voting mode",
          "_owner": "Owner of the MessageProcessor contract",
          "_poll": "Poll contract",
          "_verifier": "Verifier contract",
          "_vkRegistry": "VkRegistry contract"
        },
        "returns": {
          "messageProcessorAddr": "The deployed MessageProcessor contract"
        }
      }
    },
    "title": "MessageProcessorFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "MESSAGE_DATA_LENGTH()": {
        "notice": "the length of a MACI message"
      },
      "deploy(address,address,address,address,uint8)": {
        "notice": "Deploy a new MessageProcessor contract and return the address."
      }
    },
    "notice": "A factory contract which deploys MessageProcessor contracts.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}