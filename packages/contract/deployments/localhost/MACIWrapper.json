{
  "address": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IPollFactory",
          "name": "_pollFactory",
          "type": "address"
        },
        {
          "internalType": "contract IMessageProcessorFactory",
          "name": "_messageProcessorFactory",
          "type": "address"
        },
        {
          "internalType": "contract ITallyFactory",
          "name": "_tallyFactory",
          "type": "address"
        },
        {
          "internalType": "contract SignUpGatekeeper",
          "name": "_signUpGatekeeper",
          "type": "address"
        },
        {
          "internalType": "contract InitialVoiceCreditProxy",
          "name": "_initialVoiceCreditProxy",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_stateTreeDepth",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DefaultZeroBadIndex",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DepthTooLarge",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMessage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPubKey",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NumberOfLeavesCannotBeZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poll",
          "type": "address"
        }
      ],
      "name": "PollAddressDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pollId",
          "type": "uint256"
        }
      ],
      "name": "PollDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoseidonHashLibrariesNotLinked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PubKeyAlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooManySignups",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_pollId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_coordinatorPubKeyX",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_coordinatorPubKeyY",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "poll",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "messageProcessor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tally",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct MACI.PollContracts",
          "name": "pollAddr",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "enum DomainObjs.Mode",
          "name": "_mode",
          "type": "uint8"
        }
      ],
      "name": "DeployPoll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pollId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "poll",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "messageProcessor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tally",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct MACI.PollContracts",
          "name": "pollContracts",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "options",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "PollCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pollId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tallyJsonCID",
          "type": "string"
        }
      ],
      "name": "PollTallyCIDUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_stateIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_userPubKeyX",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_userPubKeyY",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_voiceCreditBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "SignUp",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MESSAGE_DATA_LENGTH",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coordinatorPubKey",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "_options",
          "type": "string[]"
        },
        {
          "internalType": "string",
          "name": "_metadata",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "enum DomainObjs.Mode",
          "name": "isQv",
          "type": "uint8"
        }
      ],
      "name": "createPoll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "intStateTreeDepth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "messageTreeSubDepth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "messageTreeDepth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "voteOptionTreeDepth",
              "type": "uint8"
            }
          ],
          "internalType": "struct Params.TreeDepths",
          "name": "_treeDepths",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct DomainObjs.PubKey",
          "name": "_coordinatorPubKey",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vkRegistry",
          "type": "address"
        },
        {
          "internalType": "enum DomainObjs.Mode",
          "name": "_mode",
          "type": "uint8"
        }
      ],
      "name": "deployPoll",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poll",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "messageProcessor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tally",
              "type": "address"
            }
          ],
          "internalType": "struct MACI.PollContracts",
          "name": "pollAddr",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pollId",
          "type": "uint256"
        }
      ],
      "name": "fetchPoll",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "encodedOptions",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "poll",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "messageProcessor",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tally",
                  "type": "address"
                }
              ],
              "internalType": "struct MACI.PollContracts",
              "name": "pollContracts",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numOfOptions",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "options",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "tallyJsonCID",
              "type": "string"
            }
          ],
          "internalType": "struct MACIWrapper.PollData",
          "name": "poll_",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_page",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_perPage",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_ascending",
          "type": "bool"
        }
      ],
      "name": "fetchPolls",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "encodedOptions",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "poll",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "messageProcessor",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tally",
                  "type": "address"
                }
              ],
              "internalType": "struct MACI.PollContracts",
              "name": "pollContracts",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numOfOptions",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "options",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "tallyJsonCID",
              "type": "string"
            }
          ],
          "internalType": "struct MACIWrapper.PollData[]",
          "name": "polls_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pollId",
          "type": "uint256"
        }
      ],
      "name": "getPoll",
      "outputs": [
        {
          "internalType": "address",
          "name": "poll",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poll",
          "type": "address"
        }
      ],
      "name": "getPollId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pollId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStateTreeRoot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "array",
          "type": "uint256[2]"
        }
      ],
      "name": "hash2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[3]",
          "name": "array",
          "type": "uint256[3]"
        }
      ],
      "name": "hash3",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[4]",
          "name": "array",
          "type": "uint256[4]"
        }
      ],
      "name": "hash4",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[5]",
          "name": "array",
          "type": "uint256[5]"
        }
      ],
      "name": "hash5",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "left",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "right",
          "type": "uint256"
        }
      ],
      "name": "hashLeftRight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256[10]",
              "name": "data",
              "type": "uint256[10]"
            }
          ],
          "internalType": "struct DomainObjs.Message",
          "name": "_message",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct DomainObjs.PubKey",
          "name": "_encPubKey",
          "type": "tuple"
        }
      ],
      "name": "hashMessageAndEncPubKey",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "msgHash",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DomainObjs.PubKey",
              "name": "pubKey",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "voiceCreditBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct DomainObjs.StateLeaf",
          "name": "_stateLeaf",
          "type": "tuple"
        }
      ],
      "name": "hashStateLeaf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ciphertext",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialVoiceCreditProxy",
      "outputs": [
        {
          "internalType": "contract InitialVoiceCreditProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isPublicKeyRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lazyIMTData",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "maxIndex",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "numberOfLeaves",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSignups",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messageProcessorFactory",
      "outputs": [
        {
          "internalType": "contract IMessageProcessorFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextPollId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numSignUps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "signUps",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "dataToPad",
          "type": "uint256[2]"
        }
      ],
      "name": "padAndHashMessage",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[10]",
              "name": "data",
              "type": "uint256[10]"
            }
          ],
          "internalType": "struct DomainObjs.Message",
          "name": "message",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct DomainObjs.PubKey",
          "name": "padKey",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "msgHash",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pollFactory",
      "outputs": [
        {
          "internalType": "contract IPollFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pollIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "polls",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "intStateTreeDepth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "messageTreeSubDepth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "messageTreeDepth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "voteOptionTreeDepth",
              "type": "uint8"
            }
          ],
          "internalType": "struct Params.TreeDepths",
          "name": "_treeDepths",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct DomainObjs.PubKey",
          "name": "_coordinatorPubKey",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vkRegistry",
          "type": "address"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "array",
          "type": "uint256[]"
        }
      ],
      "name": "sha256Hash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct DomainObjs.PubKey",
          "name": "_pubKey",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_signUpGatekeeperData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_initialVoiceCreditProxyData",
          "type": "bytes"
        }
      ],
      "name": "signUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signUpGatekeeper",
      "outputs": [
        {
          "internalType": "contract SignUpGatekeeper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stateTreeDepth",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tallyFactory",
      "outputs": [
        {
          "internalType": "contract ITallyFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treeDepths",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "intStateTreeDepth",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "messageTreeSubDepth",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "messageTreeDepth",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "voteOptionTreeDepth",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pollId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tallyJsonCID",
          "type": "string"
        }
      ],
      "name": "updatePollTallyCID",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vkRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbc7718abb51b8ecd149ded6ff58304f5b87f3d22aba4c9af279b14d4add216bb",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
    "transactionIndex": 0,
    "gasUsed": "3337711",
    "logsBloom": "0x
    "blockHash": "0x593aa12d0793d624482be6a87f574cbe6c8140fd83f77ca4be5ff156afb8c002",
    "transactionHash": "0xbc7718abb51b8ecd149ded6ff58304f5b87f3d22aba4c9af279b14d4add216bb",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 21,
        "transactionHash": "0xbc7718abb51b8ecd149ded6ff58304f5b87f3d22aba4c9af279b14d4add216bb",
        "address": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x593aa12d0793d624482be6a87f574cbe6c8140fd83f77ca4be5ff156afb8c002"
      }
    ],
    "blockNumber": 21,
    "cumulativeGasUsed": "3337711",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
    "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
    "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
    "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    10
  ],
  "numDeployments": 1,
  "solcInputHash": "6dc3c698991fc87939461d2e3607f660",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IPollFactory\",\"name\":\"_pollFactory\",\"type\":\"address\"},{\"internalType\":\"contract IMessageProcessorFactory\",\"name\":\"_messageProcessorFactory\",\"type\":\"address\"},{\"internalType\":\"contract ITallyFactory\",\"name\":\"_tallyFactory\",\"type\":\"address\"},{\"internalType\":\"contract SignUpGatekeeper\",\"name\":\"_signUpGatekeeper\",\"type\":\"address\"},{\"internalType\":\"contract InitialVoiceCreditProxy\",\"name\":\"_initialVoiceCreditProxy\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_stateTreeDepth\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DefaultZeroBadIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepthTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMessage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPubKey\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NumberOfLeavesCannotBeZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poll\",\"type\":\"address\"}],\"name\":\"PollAddressDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"}],\"name\":\"PollDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoseidonHashLibrariesNotLinked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PubKeyAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManySignups\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pollId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_coordinatorPubKeyX\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_coordinatorPubKeyY\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"poll\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"messageProcessor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tally\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct MACI.PollContracts\",\"name\":\"pollAddr\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"enum DomainObjs.Mode\",\"name\":\"_mode\",\"type\":\"uint8\"}],\"name\":\"DeployPoll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"poll\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"messageProcessor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tally\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct MACI.PollContracts\",\"name\":\"pollContracts\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"options\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"PollCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tallyJsonCID\",\"type\":\"string\"}],\"name\":\"PollTallyCIDUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stateIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_userPubKeyX\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_userPubKeyY\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_voiceCreditBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"SignUp\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MESSAGE_DATA_LENGTH\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coordinatorPubKey\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_options\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"enum DomainObjs.Mode\",\"name\":\"isQv\",\"type\":\"uint8\"}],\"name\":\"createPoll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"intStateTreeDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"messageTreeSubDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"messageTreeDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"voteOptionTreeDepth\",\"type\":\"uint8\"}],\"internalType\":\"struct Params.TreeDepths\",\"name\":\"_treeDepths\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainObjs.PubKey\",\"name\":\"_coordinatorPubKey\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vkRegistry\",\"type\":\"address\"},{\"internalType\":\"enum DomainObjs.Mode\",\"name\":\"_mode\",\"type\":\"uint8\"}],\"name\":\"deployPoll\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poll\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"messageProcessor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tally\",\"type\":\"address\"}],\"internalType\":\"struct MACI.PollContracts\",\"name\":\"pollAddr\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pollId\",\"type\":\"uint256\"}],\"name\":\"fetchPoll\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"encodedOptions\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"poll\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"messageProcessor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tally\",\"type\":\"address\"}],\"internalType\":\"struct MACI.PollContracts\",\"name\":\"pollContracts\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOfOptions\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"options\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"tallyJsonCID\",\"type\":\"string\"}],\"internalType\":\"struct MACIWrapper.PollData\",\"name\":\"poll_\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_perPage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_ascending\",\"type\":\"bool\"}],\"name\":\"fetchPolls\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"encodedOptions\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"poll\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"messageProcessor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tally\",\"type\":\"address\"}],\"internalType\":\"struct MACI.PollContracts\",\"name\":\"pollContracts\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOfOptions\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"options\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"tallyJsonCID\",\"type\":\"string\"}],\"internalType\":\"struct MACIWrapper.PollData[]\",\"name\":\"polls_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pollId\",\"type\":\"uint256\"}],\"name\":\"getPoll\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"poll\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poll\",\"type\":\"address\"}],\"name\":\"getPollId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStateTreeRoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"array\",\"type\":\"uint256[2]\"}],\"name\":\"hash2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"array\",\"type\":\"uint256[3]\"}],\"name\":\"hash3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"array\",\"type\":\"uint256[4]\"}],\"name\":\"hash4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"array\",\"type\":\"uint256[5]\"}],\"name\":\"hash5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"}],\"name\":\"hashLeftRight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[10]\",\"name\":\"data\",\"type\":\"uint256[10]\"}],\"internalType\":\"struct DomainObjs.Message\",\"name\":\"_message\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainObjs.PubKey\",\"name\":\"_encPubKey\",\"type\":\"tuple\"}],\"name\":\"hashMessageAndEncPubKey\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"msgHash\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainObjs.PubKey\",\"name\":\"pubKey\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"voiceCreditBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainObjs.StateLeaf\",\"name\":\"_stateLeaf\",\"type\":\"tuple\"}],\"name\":\"hashStateLeaf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ciphertext\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialVoiceCreditProxy\",\"outputs\":[{\"internalType\":\"contract InitialVoiceCreditProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isPublicKeyRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lazyIMTData\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"maxIndex\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"numberOfLeaves\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSignups\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageProcessorFactory\",\"outputs\":[{\"internalType\":\"contract IMessageProcessorFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextPollId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numSignUps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"signUps\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"dataToPad\",\"type\":\"uint256[2]\"}],\"name\":\"padAndHashMessage\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[10]\",\"name\":\"data\",\"type\":\"uint256[10]\"}],\"internalType\":\"struct DomainObjs.Message\",\"name\":\"message\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainObjs.PubKey\",\"name\":\"padKey\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"msgHash\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pollFactory\",\"outputs\":[{\"internalType\":\"contract IPollFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pollIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"polls\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"intStateTreeDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"messageTreeSubDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"messageTreeDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"voteOptionTreeDepth\",\"type\":\"uint8\"}],\"internalType\":\"struct Params.TreeDepths\",\"name\":\"_treeDepths\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainObjs.PubKey\",\"name\":\"_coordinatorPubKey\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vkRegistry\",\"type\":\"address\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"array\",\"type\":\"uint256[]\"}],\"name\":\"sha256Hash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainObjs.PubKey\",\"name\":\"_pubKey\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signUpGatekeeperData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_initialVoiceCreditProxyData\",\"type\":\"bytes\"}],\"name\":\"signUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signUpGatekeeper\",\"outputs\":[{\"internalType\":\"contract SignUpGatekeeper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stateTreeDepth\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tallyFactory\",\"outputs\":[{\"internalType\":\"contract ITallyFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treeDepths\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"intStateTreeDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"messageTreeSubDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"messageTreeDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"voteOptionTreeDepth\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pollId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tallyJsonCID\",\"type\":\"string\"}],\"name\":\"updatePollTallyCID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vkRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"deployPoll(uint256,(uint8,uint8,uint8,uint8),(uint256,uint256),address,address,uint8)\":{\"params\":{\"_coordinatorPubKey\":\"The coordinator's public key\",\"_duration\":\"How long should the Poll last for\",\"_mode\":\"Voting mode\",\"_treeDepths\":\"The depth of the Merkle trees\",\"_verifier\":\"The Verifier Contract\",\"_vkRegistry\":\"The VkRegistry Contract\"},\"returns\":{\"pollAddr\":\"a new Poll contract address\"}},\"getPoll(uint256)\":{\"params\":{\"_pollId\":\"The identifier of the Poll to retrieve\"},\"returns\":{\"poll\":\"The Poll contract object\"}},\"getStateTreeRoot()\":{\"returns\":{\"root\":\"The Merkle root\"}},\"hash2(uint256[2])\":{\"params\":{\"array\":\"An array of two uint256 elements.\"},\"returns\":{\"result\":\"The Poseidon hash of the two elements.\"}},\"hash3(uint256[3])\":{\"params\":{\"array\":\"An array of three uint256 elements.\"},\"returns\":{\"result\":\"The Poseidon hash of the three elements.\"}},\"hash4(uint256[4])\":{\"params\":{\"array\":\"An array of four uint256 elements.\"},\"returns\":{\"result\":\"The Poseidon hash of the four elements.\"}},\"hash5(uint256[5])\":{\"params\":{\"array\":\"An array of five uint256 elements.\"},\"returns\":{\"result\":\"The Poseidon hash of the five elements.\"}},\"hashLeftRight(uint256,uint256)\":{\"params\":{\"left\":\"the first element to hash.\",\"right\":\"the second element to hash.\"},\"returns\":{\"result\":\"The Poseidon hash of the two elements.\"}},\"hashMessageAndEncPubKey((uint256[10]),(uint256,uint256))\":{\"params\":{\"_encPubKey\":\"the encryption public key to be hashed\",\"_message\":\"the message to be hashed\"},\"returns\":{\"msgHash\":\"The hash of the message and the encryption public key\"}},\"hashStateLeaf(((uint256,uint256),uint256,uint256))\":{\"params\":{\"_stateLeaf\":\"the state leaf to be hashed\"},\"returns\":{\"ciphertext\":\"The hash of the state leaf\"}},\"numSignUps()\":{\"returns\":{\"signUps\":\"numsignUps The number of signups\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"padAndHashMessage(uint256[2])\":{\"params\":{\"dataToPad\":\"the data to be padded\"},\"returns\":{\"message\":\"The padded message\",\"msgHash\":\"The hash of the padded message and encryption key\",\"padKey\":\"The padding public key\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"sha256Hash(uint256[])\":{\"params\":{\"array\":\"The array of uint256 elements.\"},\"returns\":{\"result\":\"The SHA256 hash of the array.\"}},\"signUp((uint256,uint256),bytes,bytes)\":{\"params\":{\"_initialVoiceCreditProxyData\":\"Data to pass to the     InitialVoiceCreditProxy, which allows it to determine how many voice     credits this user should have.\",\"_pubKey\":\"The user's desired public key.\",\"_signUpGatekeeperData\":\"Data to pass to the sign-up gatekeeper's     register() function. For instance, the POAPGatekeeper or     SignUpTokenGatekeeper requires this value to be the ABI-encoded     token ID.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"MACI - Minimum Anti-Collusion Infrastructure Version 1\",\"version\":1},\"userdoc\":{\"errors\":{\"DefaultZeroBadIndex()\":[{\"notice\":\"Custom errors\"}],\"InvalidMessage()\":[{\"notice\":\"custom errors\"}],\"PoseidonHashLibrariesNotLinked()\":[{\"notice\":\"custom errors\"}]},\"kind\":\"user\",\"methods\":{\"MESSAGE_DATA_LENGTH()\":{\"notice\":\"the length of a MACI message\"},\"deployPoll(uint256,(uint8,uint8,uint8,uint8),(uint256,uint256),address,address,uint8)\":{\"notice\":\"Deploy a new Poll contract.\"},\"getPoll(uint256)\":{\"notice\":\"Get the Poll details\"},\"getStateTreeRoot()\":{\"notice\":\"Return the main root of the StateAq contract\"},\"hash2(uint256[2])\":{\"notice\":\"Computes the Poseidon hash of two uint256 elements.\"},\"hash3(uint256[3])\":{\"notice\":\"Computes the Poseidon hash of three uint256 elements.\"},\"hash4(uint256[4])\":{\"notice\":\"Computes the Poseidon hash of four uint256 elements.\"},\"hash5(uint256[5])\":{\"notice\":\"Computes the Poseidon hash of five uint256 elements.\"},\"hashLeftRight(uint256,uint256)\":{\"notice\":\"Computes the Poseidon hash of two uint256 elements.\"},\"hashMessageAndEncPubKey((uint256[10]),(uint256,uint256))\":{\"notice\":\"An utility function used to hash a MACI message and an encryption public key\"},\"hashStateLeaf(((uint256,uint256),uint256,uint256))\":{\"notice\":\"An utility function used to hash a state leaf\"},\"initialVoiceCreditProxy()\":{\"notice\":\"The contract which provides the values of the initial voice credit balance per user\"},\"lazyIMTData()\":{\"notice\":\"The state tree. Represents a mapping between each user's public key and their voice credit balance.\"},\"messageProcessorFactory()\":{\"notice\":\"Factory contract that deploy a MessageProcessor contract\"},\"nextPollId()\":{\"notice\":\"Each poll has an incrementing ID\"},\"numSignUps()\":{\"notice\":\"Get the number of signups\"},\"padAndHashMessage(uint256[2])\":{\"notice\":\"An utility function used to pad and hash a MACI message\"},\"pollFactory()\":{\"notice\":\"Factory contract that deploy a Poll contract\"},\"polls(uint256)\":{\"notice\":\"A mapping of poll IDs to Poll contracts.\"},\"sha256Hash(uint256[])\":{\"notice\":\"Computes the SHA256 hash of an array of uint256 elements.\"},\"signUp((uint256,uint256),bytes,bytes)\":{\"notice\":\"Allows any eligible user sign up. The sign-up gatekeeper should prevent double sign-ups or ineligible users from doing so.  This function will only succeed if the sign-up deadline has not passed. It also enqueues a fresh state leaf into the state AccQueue.\"},\"signUpGatekeeper()\":{\"notice\":\"Address of the SignUpGatekeeper, a contract which determines whether a user may sign up to vote\"},\"stateTreeDepth()\":{\"notice\":\"The state tree depth is fixed. As such it should be as large as feasible so that there can be as many users as possible.  i.e. 2 ** 23 = 8388608 this should also match the parameter of the circom circuits.IMPORTANT: remember to change the ballot tree depth in contracts/ts/genEmptyBallotRootsContract.ts file if we change the state tree depth!\"},\"tallyFactory()\":{\"notice\":\"Factory contract that deploy a Tally contract\"}},\"notice\":\"A contract which allows users to sign up, and deploy new polls\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/maci-contracts/MACIWrapper.sol\":\"MACIWrapper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/maci-contracts/MACIWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { MACI } from \\\"maci-contracts/contracts/MACI.sol\\\";\\nimport { IPollFactory } from \\\"maci-contracts/contracts/interfaces/IPollFactory.sol\\\";\\nimport { IMessageProcessorFactory } from \\\"maci-contracts/contracts/interfaces/IMPFactory.sol\\\";\\nimport { ITallyFactory } from \\\"maci-contracts/contracts/interfaces/ITallyFactory.sol\\\";\\nimport { SignUpGatekeeper } from \\\"maci-contracts/contracts/gatekeepers/SignUpGatekeeper.sol\\\";\\nimport { InitialVoiceCreditProxy } from \\\"maci-contracts/contracts/initialVoiceCreditProxy/InitialVoiceCreditProxy.sol\\\";\\n\\n/// @title MACI - Minimum Anti-Collusion Infrastructure Version 1\\n/// @notice A contract which allows users to sign up, and deploy new polls\\ncontract MACIWrapper is MACI, Ownable(msg.sender) {\\n\\tstruct PollData {\\n\\t\\tuint256 id;\\n\\t\\tstring name;\\n\\t\\tbytes encodedOptions;\\n\\t\\tstring metadata;\\n\\t\\tMACIWrapper.PollContracts pollContracts;\\n\\t\\tuint256 startTime;\\n\\t\\tuint256 endTime;\\n\\t\\tuint256 numOfOptions;\\n\\t\\tstring[] options;\\n\\t\\tstring tallyJsonCID;\\n\\t}\\n\\n\\tmapping(uint256 => PollData) internal _polls;\\n\\n\\tTreeDepths public treeDepths;\\n\\tPubKey public coordinatorPubKey;\\n\\taddress public verifier;\\n\\taddress public vkRegistry;\\n\\n\\tmapping(address => uint256) public pollIds;\\n\\n\\tevent PollCreated(\\n\\t\\tuint256 indexed pollId,\\n\\t\\taddress indexed creator,\\n\\t\\tMACIWrapper.PollContracts pollContracts,\\n\\t\\tstring name,\\n\\t\\tstring[] options,\\n\\t\\tstring metadata,\\n\\t\\tuint256 startTime,\\n\\t\\tuint256 endTime\\n\\t);\\n\\n\\tevent PollTallyCIDUpdated(uint256 indexed pollId, string tallyJsonCID);\\n\\n\\t// pubkey.x => pubkey.y => bool\\n\\tmapping(uint256 => mapping(uint256 => bool)) public isPublicKeyRegistered;\\n\\n\\terror PubKeyAlreadyRegistered();\\n\\terror PollAddressDoesNotExist(address _poll);\\n\\n\\tconstructor(\\n\\t\\tIPollFactory _pollFactory,\\n\\t\\tIMessageProcessorFactory _messageProcessorFactory,\\n\\t\\tITallyFactory _tallyFactory,\\n\\t\\tSignUpGatekeeper _signUpGatekeeper,\\n\\t\\tInitialVoiceCreditProxy _initialVoiceCreditProxy,\\n\\t\\tuint8 _stateTreeDepth\\n\\t)\\n\\t\\tMACI(\\n\\t\\t\\t_pollFactory,\\n\\t\\t\\t_messageProcessorFactory,\\n\\t\\t\\t_tallyFactory,\\n\\t\\t\\t_signUpGatekeeper,\\n\\t\\t\\t_initialVoiceCreditProxy,\\n\\t\\t\\t_stateTreeDepth\\n\\t\\t)\\n\\t{}\\n\\n\\tfunction setConfig(\\n\\t\\tTreeDepths memory _treeDepths,\\n\\t\\tPubKey memory _coordinatorPubKey,\\n\\t\\taddress _verifier,\\n\\t\\taddress _vkRegistry\\n\\t) public onlyOwner {\\n\\t\\ttreeDepths = _treeDepths;\\n\\t\\tcoordinatorPubKey = _coordinatorPubKey;\\n\\t\\tverifier = _verifier;\\n\\t\\tvkRegistry = _vkRegistry;\\n\\t}\\n\\n\\t/// @notice Allows any eligible user sign up. The sign-up gatekeeper should prevent\\n\\t/// double sign-ups or ineligible users from doing so.  This function will\\n\\t/// only succeed if the sign-up deadline has not passed. It also enqueues a\\n\\t/// fresh state leaf into the state AccQueue.\\n\\t/// @param _pubKey The user's desired public key.\\n\\t/// @param _signUpGatekeeperData Data to pass to the sign-up gatekeeper's\\n\\t///     register() function. For instance, the POAPGatekeeper or\\n\\t///     SignUpTokenGatekeeper requires this value to be the ABI-encoded\\n\\t///     token ID.\\n\\t/// @param _initialVoiceCreditProxyData Data to pass to the\\n\\t///     InitialVoiceCreditProxy, which allows it to determine how many voice\\n\\t///     credits this user should have.\\n\\tfunction signUp(\\n\\t\\tPubKey memory _pubKey,\\n\\t\\tbytes memory _signUpGatekeeperData,\\n\\t\\tbytes memory _initialVoiceCreditProxyData\\n\\t) public override {\\n\\t\\t// check if the pubkey is already registered\\n\\t\\tif (isPublicKeyRegistered[_pubKey.x][_pubKey.y])\\n\\t\\t\\trevert PubKeyAlreadyRegistered();\\n\\n\\t\\tsuper.signUp(\\n\\t\\t\\t_pubKey,\\n\\t\\t\\t_signUpGatekeeperData,\\n\\t\\t\\t_initialVoiceCreditProxyData\\n\\t\\t);\\n\\n\\t\\tisPublicKeyRegistered[_pubKey.x][_pubKey.y] = true;\\n\\t}\\n\\n\\tfunction createPoll(\\n\\t\\tstring calldata _name,\\n\\t\\tstring[] calldata _options,\\n\\t\\tstring calldata _metadata,\\n\\t\\tuint256 _duration,\\n\\t\\tMode isQv\\n\\t) public onlyOwner {\\n\\t\\t// TODO: check if the number of options are more than limit\\n\\n\\t\\tuint256 pollId = nextPollId;\\n\\n\\t\\tPollContracts memory pollContracts = deployPoll(\\n\\t\\t\\t_duration,\\n\\t\\t\\ttreeDepths,\\n\\t\\t\\tcoordinatorPubKey,\\n\\t\\t\\tverifier,\\n\\t\\t\\tvkRegistry,\\n\\t\\t\\tisQv\\n\\t\\t);\\n\\n\\t\\tpollIds[pollContracts.poll] = pollId;\\n\\n\\t\\t// encode options to bytes for retrieval\\n\\t\\tbytes memory encodedOptions = abi.encode(_options);\\n\\n\\t\\tuint256 endTime = block.timestamp + _duration;\\n\\n\\t\\t// create poll\\n\\t\\t_polls[pollId] = PollData({\\n\\t\\t\\tid: pollId,\\n\\t\\t\\tname: _name,\\n\\t\\t\\tencodedOptions: encodedOptions,\\n\\t\\t\\tnumOfOptions: _options.length,\\n\\t\\t\\tmetadata: _metadata,\\n\\t\\t\\tstartTime: block.timestamp,\\n\\t\\t\\tendTime: endTime,\\n\\t\\t\\tpollContracts: pollContracts,\\n\\t\\t\\toptions: _options,\\n\\t\\t\\ttallyJsonCID: \\\"\\\"\\n\\t\\t});\\n\\n\\t\\temit PollCreated(\\n\\t\\t\\tpollId,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tpollContracts,\\n\\t\\t\\t_name,\\n\\t\\t\\t_options,\\n\\t\\t\\t_metadata,\\n\\t\\t\\tblock.timestamp,\\n\\t\\t\\tendTime\\n\\t\\t);\\n\\t}\\n\\n\\tfunction getPollId(address _poll) public view returns (uint256 pollId) {\\n\\t\\tif (pollIds[_poll] >= nextPollId) revert PollAddressDoesNotExist(_poll);\\n\\t\\tpollId = pollIds[_poll];\\n\\t}\\n\\n\\tfunction updatePollTallyCID(\\n\\t\\tuint256 _pollId,\\n\\t\\tstring calldata _tallyJsonCID\\n\\t) public onlyOwner {\\n\\t\\tif (_pollId >= nextPollId) revert PollDoesNotExist(_pollId);\\n\\t\\tPollData storage poll = _polls[_pollId];\\n\\t\\tpoll.tallyJsonCID = _tallyJsonCID;\\n\\n\\t\\temit PollTallyCIDUpdated(_pollId, _tallyJsonCID);\\n\\t}\\n\\n\\tfunction fetchPolls(\\n\\t\\tuint256 _page,\\n\\t\\tuint256 _perPage,\\n\\t\\tbool _ascending\\n\\t) public view returns (PollData[] memory polls_) {\\n\\t\\tuint256 start = (_page - 1) * _perPage;\\n\\t\\tuint256 end = start + _perPage - 1;\\n\\n\\t\\tif (start >= nextPollId) {\\n\\t\\t\\treturn new PollData[](0);\\n\\t\\t}\\n\\n\\t\\tif (end >= nextPollId) {\\n\\t\\t\\tend = nextPollId - 1;\\n\\t\\t}\\n\\n\\t\\tpolls_ = new PollData[](end - start + 1);\\n\\n\\t\\tuint256 index = 0;\\n\\t\\tfor (uint256 i = start; i <= end; i++) {\\n\\t\\t\\tuint256 pollIndex = i;\\n\\t\\t\\tif (!_ascending) {\\n\\t\\t\\t\\tpollIndex = nextPollId - i - 1;\\n\\t\\t\\t}\\n\\t\\t\\tpolls_[index++] = _polls[pollIndex];\\n\\t\\t}\\n\\t}\\n\\n\\tfunction fetchPoll(\\n\\t\\tuint256 _pollId\\n\\t) public view returns (PollData memory poll_) {\\n\\t\\tif (_pollId >= nextPollId) revert PollDoesNotExist(_pollId);\\n\\t\\treturn _polls[_pollId];\\n\\t}\\n}\\n\",\"keccak256\":\"0x7e810713d8d198e523d78a35ae05818410381a8bf243213126d58e334c45717b\",\"license\":\"MIT\"},\"maci-contracts/contracts/MACI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { IPollFactory } from \\\"./interfaces/IPollFactory.sol\\\";\\nimport { IMessageProcessorFactory } from \\\"./interfaces/IMPFactory.sol\\\";\\nimport { ITallyFactory } from \\\"./interfaces/ITallyFactory.sol\\\";\\nimport { InitialVoiceCreditProxy } from \\\"./initialVoiceCreditProxy/InitialVoiceCreditProxy.sol\\\";\\nimport { SignUpGatekeeper } from \\\"./gatekeepers/SignUpGatekeeper.sol\\\";\\nimport { IMACI } from \\\"./interfaces/IMACI.sol\\\";\\nimport { Params } from \\\"./utilities/Params.sol\\\";\\nimport { Utilities } from \\\"./utilities/Utilities.sol\\\";\\nimport { DomainObjs } from \\\"./utilities/DomainObjs.sol\\\";\\nimport { CurveBabyJubJub } from \\\"./crypto/BabyJubJub.sol\\\";\\nimport { InternalLazyIMT, LazyIMTData } from \\\"./trees/LazyIMT.sol\\\";\\n\\n/// @title MACI - Minimum Anti-Collusion Infrastructure Version 1\\n/// @notice A contract which allows users to sign up, and deploy new polls\\ncontract MACI is IMACI, DomainObjs, Params, Utilities {\\n  /// @notice The state tree depth is fixed. As such it should be as large as feasible\\n  /// so that there can be as many users as possible.  i.e. 2 ** 23 = 8388608\\n  /// this should also match the parameter of the circom circuits.\\n  /// @notice IMPORTANT: remember to change the ballot tree depth\\n  /// in contracts/ts/genEmptyBallotRootsContract.ts file\\n  /// if we change the state tree depth!\\n  uint8 public immutable stateTreeDepth;\\n\\n  uint256 public immutable maxSignups;\\n\\n  uint8 internal constant TREE_ARITY = 2;\\n  uint8 internal constant MESSAGE_TREE_ARITY = 5;\\n\\n  /// @notice The hash of a blank state leaf\\n  uint256 internal constant BLANK_STATE_LEAF_HASH =\\n    uint256(6769006970205099520508948723718471724660867171122235270773600567925038008762);\\n\\n  /// @notice Each poll has an incrementing ID\\n  uint256 public nextPollId;\\n\\n  /// @notice A mapping of poll IDs to Poll contracts.\\n  mapping(uint256 => address) public polls;\\n\\n  /// @notice Factory contract that deploy a Poll contract\\n  IPollFactory public immutable pollFactory;\\n\\n  /// @notice Factory contract that deploy a MessageProcessor contract\\n  IMessageProcessorFactory public immutable messageProcessorFactory;\\n\\n  /// @notice Factory contract that deploy a Tally contract\\n  ITallyFactory public immutable tallyFactory;\\n\\n  /// @notice The state tree. Represents a mapping between each user's public key\\n  /// and their voice credit balance.\\n  LazyIMTData public lazyIMTData;\\n\\n  /// @notice Address of the SignUpGatekeeper, a contract which determines whether a\\n  /// user may sign up to vote\\n  SignUpGatekeeper public immutable signUpGatekeeper;\\n\\n  /// @notice The contract which provides the values of the initial voice credit\\n  /// balance per user\\n  InitialVoiceCreditProxy public immutable initialVoiceCreditProxy;\\n\\n  /// @notice A struct holding the addresses of poll, mp and tally\\n  struct PollContracts {\\n    address poll;\\n    address messageProcessor;\\n    address tally;\\n  }\\n\\n  // Events\\n  event SignUp(\\n    uint256 _stateIndex,\\n    uint256 indexed _userPubKeyX,\\n    uint256 indexed _userPubKeyY,\\n    uint256 _voiceCreditBalance,\\n    uint256 _timestamp\\n  );\\n  event DeployPoll(\\n    uint256 _pollId,\\n    uint256 indexed _coordinatorPubKeyX,\\n    uint256 indexed _coordinatorPubKeyY,\\n    PollContracts pollAddr,\\n    Mode _mode\\n  );\\n\\n  /// @notice custom errors\\n  error PoseidonHashLibrariesNotLinked();\\n  error TooManySignups();\\n  error InvalidPubKey();\\n  error PollDoesNotExist(uint256 pollId);\\n\\n  /// @notice Create a new instance of the MACI contract.\\n  /// @param _pollFactory The PollFactory contract\\n  /// @param _messageProcessorFactory The MessageProcessorFactory contract\\n  /// @param _tallyFactory The TallyFactory contract\\n  /// @param _signUpGatekeeper The SignUpGatekeeper contract\\n  /// @param _initialVoiceCreditProxy The InitialVoiceCreditProxy contract\\n  /// @param _stateTreeDepth The depth of the state tree\\n  constructor(\\n    IPollFactory _pollFactory,\\n    IMessageProcessorFactory _messageProcessorFactory,\\n    ITallyFactory _tallyFactory,\\n    SignUpGatekeeper _signUpGatekeeper,\\n    InitialVoiceCreditProxy _initialVoiceCreditProxy,\\n    uint8 _stateTreeDepth\\n  ) payable {\\n    // initialize and insert the blank leaf\\n    InternalLazyIMT._init(lazyIMTData, _stateTreeDepth);\\n    InternalLazyIMT._insert(lazyIMTData, BLANK_STATE_LEAF_HASH);\\n\\n    pollFactory = _pollFactory;\\n    messageProcessorFactory = _messageProcessorFactory;\\n    tallyFactory = _tallyFactory;\\n    signUpGatekeeper = _signUpGatekeeper;\\n    initialVoiceCreditProxy = _initialVoiceCreditProxy;\\n    stateTreeDepth = _stateTreeDepth;\\n    maxSignups = uint256(TREE_ARITY) ** uint256(_stateTreeDepth);\\n\\n    // Verify linked poseidon libraries\\n    if (hash2([uint256(1), uint256(1)]) == 0) revert PoseidonHashLibrariesNotLinked();\\n  }\\n\\n  /// @notice Allows any eligible user sign up. The sign-up gatekeeper should prevent\\n  /// double sign-ups or ineligible users from doing so.  This function will\\n  /// only succeed if the sign-up deadline has not passed. It also enqueues a\\n  /// fresh state leaf into the state AccQueue.\\n  /// @param _pubKey The user's desired public key.\\n  /// @param _signUpGatekeeperData Data to pass to the sign-up gatekeeper's\\n  ///     register() function. For instance, the POAPGatekeeper or\\n  ///     SignUpTokenGatekeeper requires this value to be the ABI-encoded\\n  ///     token ID.\\n  /// @param _initialVoiceCreditProxyData Data to pass to the\\n  ///     InitialVoiceCreditProxy, which allows it to determine how many voice\\n  ///     credits this user should have.\\n  function signUp(\\n    PubKey memory _pubKey,\\n    bytes memory _signUpGatekeeperData,\\n    bytes memory _initialVoiceCreditProxyData\\n  ) public virtual {\\n    // ensure we do not have more signups than what the circuits support\\n    if (lazyIMTData.numberOfLeaves >= maxSignups) revert TooManySignups();\\n\\n    // ensure that the public key is on the baby jubjub curve\\n    if (!CurveBabyJubJub.isOnCurve(_pubKey.x, _pubKey.y)) {\\n      revert InvalidPubKey();\\n    }\\n\\n    // Register the user via the sign-up gatekeeper. This function should\\n    // throw if the user has already registered or if ineligible to do so.\\n    signUpGatekeeper.register(msg.sender, _signUpGatekeeperData);\\n\\n    // Get the user's voice credit balance.\\n    uint256 voiceCreditBalance = initialVoiceCreditProxy.getVoiceCredits(msg.sender, _initialVoiceCreditProxyData);\\n\\n    uint256 timestamp = block.timestamp;\\n\\n    // Create a state leaf and insert it into the tree.\\n    uint256 stateLeaf = hashStateLeaf(StateLeaf(_pubKey, voiceCreditBalance, timestamp));\\n    InternalLazyIMT._insert(lazyIMTData, stateLeaf);\\n\\n    emit SignUp(lazyIMTData.numberOfLeaves - 1, _pubKey.x, _pubKey.y, voiceCreditBalance, timestamp);\\n  }\\n\\n  /// @notice Deploy a new Poll contract.\\n  /// @param _duration How long should the Poll last for\\n  /// @param _treeDepths The depth of the Merkle trees\\n  /// @param _coordinatorPubKey The coordinator's public key\\n  /// @param _verifier The Verifier Contract\\n  /// @param _vkRegistry The VkRegistry Contract\\n  /// @param _mode Voting mode\\n  /// @return pollAddr a new Poll contract address\\n  function deployPoll(\\n    uint256 _duration,\\n    TreeDepths memory _treeDepths,\\n    PubKey memory _coordinatorPubKey,\\n    address _verifier,\\n    address _vkRegistry,\\n    Mode _mode\\n  ) public virtual returns (PollContracts memory pollAddr) {\\n    // cache the poll to a local variable so we can increment it\\n    uint256 pollId = nextPollId;\\n\\n    // Increment the poll ID for the next poll\\n    // 2 ** 256 polls available\\n    unchecked {\\n      nextPollId++;\\n    }\\n\\n    // check coordinator key is a valid point on the curve\\n    if (!CurveBabyJubJub.isOnCurve(_coordinatorPubKey.x, _coordinatorPubKey.y)) {\\n      revert InvalidPubKey();\\n    }\\n\\n    MaxValues memory maxValues = MaxValues({\\n      maxMessages: uint256(MESSAGE_TREE_ARITY) ** _treeDepths.messageTreeDepth,\\n      maxVoteOptions: uint256(MESSAGE_TREE_ARITY) ** _treeDepths.voteOptionTreeDepth\\n    });\\n\\n    // the owner of the message processor and tally contract will be the msg.sender\\n    address _msgSender = msg.sender;\\n\\n    address p = pollFactory.deploy(_duration, maxValues, _treeDepths, _coordinatorPubKey, address(this));\\n\\n    address mp = messageProcessorFactory.deploy(_verifier, _vkRegistry, p, _msgSender, _mode);\\n    address tally = tallyFactory.deploy(_verifier, _vkRegistry, p, mp, _msgSender, _mode);\\n\\n    polls[pollId] = p;\\n\\n    // store the addresses in a struct so they can be returned\\n    pollAddr = PollContracts({ poll: p, messageProcessor: mp, tally: tally });\\n\\n    emit DeployPoll(pollId, _coordinatorPubKey.x, _coordinatorPubKey.y, pollAddr, _mode);\\n  }\\n\\n  /// @inheritdoc IMACI\\n  function getStateTreeRoot() public view returns (uint256 root) {\\n    root = InternalLazyIMT._root(lazyIMTData);\\n  }\\n\\n  /// @notice Get the Poll details\\n  /// @param _pollId The identifier of the Poll to retrieve\\n  /// @return poll The Poll contract object\\n  function getPoll(uint256 _pollId) public view returns (address poll) {\\n    if (_pollId >= nextPollId) revert PollDoesNotExist(_pollId);\\n    poll = polls[_pollId];\\n  }\\n\\n  /// @inheritdoc IMACI\\n  function numSignUps() public view returns (uint256 signUps) {\\n    signUps = lazyIMTData.numberOfLeaves;\\n  }\\n}\\n\",\"keccak256\":\"0xeed7f20a201337c5118b8790d85aefaacf513b67dd724788313171022933271e\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/BabyJubJub.sol\":{\"content\":\"// @note This code was taken from\\n// https://github.com/yondonfu/sol-baby-jubjub/blob/master/contracts/CurveBabyJubJub.sol\\n// Thanks to yondonfu for the code\\n// Implementation cited on baby-jubjub's paper\\n// https://eips.ethereum.org/EIPS/eip-2494#implementation\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nlibrary CurveBabyJubJub {\\n  // Curve parameters\\n  // E: 168700x^2 + y^2 = 1 + 168696x^2y^2\\n  // A = 168700\\n  uint256 public constant A = 0x292FC;\\n  // D = 168696\\n  uint256 public constant D = 0x292F8;\\n  // Prime Q = 21888242871839275222246405745257275088548364400416034343698204186575808495617\\n  uint256 public constant Q = 0x30644E72E131A029B85045B68181585D2833E84879B9709143E1F593F0000001;\\n\\n  /**\\n   * @dev Add 2 points on baby jubjub curve\\n   * Formula for adding 2 points on a twisted Edwards curve:\\n   * x3 = (x1y2 + y1x2) / (1 + dx1x2y1y2)\\n   * y3 = (y1y2 - ax1x2) / (1 - dx1x2y1y2)\\n   */\\n  function pointAdd(uint256 _x1, uint256 _y1, uint256 _x2, uint256 _y2) internal view returns (uint256 x3, uint256 y3) {\\n    if (_x1 == 0 && _y1 == 0) {\\n      return (_x2, _y2);\\n    }\\n\\n    if (_x2 == 0 && _y1 == 0) {\\n      return (_x1, _y1);\\n    }\\n\\n    uint256 x1x2 = mulmod(_x1, _x2, Q);\\n    uint256 y1y2 = mulmod(_y1, _y2, Q);\\n    uint256 dx1x2y1y2 = mulmod(D, mulmod(x1x2, y1y2, Q), Q);\\n    uint256 x3Num = addmod(mulmod(_x1, _y2, Q), mulmod(_y1, _x2, Q), Q);\\n    uint256 y3Num = submod(y1y2, mulmod(A, x1x2, Q), Q);\\n\\n    x3 = mulmod(x3Num, inverse(addmod(1, dx1x2y1y2, Q)), Q);\\n    y3 = mulmod(y3Num, inverse(submod(1, dx1x2y1y2, Q)), Q);\\n  }\\n\\n  /**\\n   * @dev Double a point on baby jubjub curve\\n   * Doubling can be performed with the same formula as addition\\n   */\\n  function pointDouble(uint256 _x1, uint256 _y1) internal view returns (uint256 x2, uint256 y2) {\\n    return pointAdd(_x1, _y1, _x1, _y1);\\n  }\\n\\n  /**\\n   * @dev Multiply a point on baby jubjub curve by a scalar\\n   * Use the double and add algorithm\\n   */\\n  function pointMul(uint256 _x1, uint256 _y1, uint256 _d) internal view returns (uint256 x2, uint256 y2) {\\n    uint256 remaining = _d;\\n\\n    uint256 px = _x1;\\n    uint256 py = _y1;\\n    uint256 ax = 0;\\n    uint256 ay = 0;\\n\\n    while (remaining != 0) {\\n      if ((remaining & 1) != 0) {\\n        // Binary digit is 1 so add\\n        (ax, ay) = pointAdd(ax, ay, px, py);\\n      }\\n\\n      (px, py) = pointDouble(px, py);\\n\\n      remaining = remaining / 2;\\n    }\\n\\n    x2 = ax;\\n    y2 = ay;\\n  }\\n\\n  /**\\n   * @dev Check if a given point is on the curve\\n   * (168700x^2 + y^2) - (1 + 168696x^2y^2) == 0\\n   */\\n  function isOnCurve(uint256 _x, uint256 _y) internal pure returns (bool) {\\n    uint256 xSq = mulmod(_x, _x, Q);\\n    uint256 ySq = mulmod(_y, _y, Q);\\n    uint256 lhs = addmod(mulmod(A, xSq, Q), ySq, Q);\\n    uint256 rhs = addmod(1, mulmod(mulmod(D, xSq, Q), ySq, Q), Q);\\n    return submod(lhs, rhs, Q) == 0;\\n  }\\n\\n  /**\\n   * @dev Perform modular subtraction\\n   */\\n  function submod(uint256 _a, uint256 _b, uint256 _mod) internal pure returns (uint256) {\\n    uint256 aNN = _a;\\n\\n    if (_a <= _b) {\\n      aNN += _mod;\\n    }\\n\\n    return addmod(aNN - _b, 0, _mod);\\n  }\\n\\n  /**\\n   * @dev Compute modular inverse of a number\\n   */\\n  function inverse(uint256 _a) internal view returns (uint256) {\\n    // We can use Euler's theorem instead of the extended Euclidean algorithm\\n    // Since m = Q and Q is prime we have: a^-1 = a^(m - 2) (mod m)\\n    return expmod(_a, Q - 2, Q);\\n  }\\n\\n  /**\\n   * @dev Helper function to call the bigModExp precompile\\n   */\\n  function expmod(uint256 _b, uint256 _e, uint256 _m) internal view returns (uint256 o) {\\n    assembly {\\n      let memPtr := mload(0x40)\\n      mstore(memPtr, 0x20) // Length of base _b\\n      mstore(add(memPtr, 0x20), 0x20) // Length of exponent _e\\n      mstore(add(memPtr, 0x40), 0x20) // Length of modulus _m\\n      mstore(add(memPtr, 0x60), _b) // Base _b\\n      mstore(add(memPtr, 0x80), _e) // Exponent _e\\n      mstore(add(memPtr, 0xa0), _m) // Modulus _m\\n\\n      // The bigModExp precompile is at 0x05\\n      let success := staticcall(gas(), 0x05, memPtr, 0xc0, memPtr, 0x20)\\n      switch success\\n      case 0 {\\n        revert(0x0, 0x0)\\n      }\\n      default {\\n        o := mload(memPtr)\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xf28f6c9c4534cecd69276c7f902a33ed94a08901400f570979085701d796cea8\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/Hasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { SnarkConstants } from \\\"./SnarkConstants.sol\\\";\\nimport { PoseidonT3 } from \\\"./PoseidonT3.sol\\\";\\nimport { PoseidonT4 } from \\\"./PoseidonT4.sol\\\";\\nimport { PoseidonT5 } from \\\"./PoseidonT5.sol\\\";\\nimport { PoseidonT6 } from \\\"./PoseidonT6.sol\\\";\\n\\n/// @notice A SHA256 hash function for any number of input elements, and Poseidon hash\\n/// functions for 2, 3, 4, 5, and 12 input elements.\\ncontract Hasher is SnarkConstants {\\n  /// @notice Computes the SHA256 hash of an array of uint256 elements.\\n  /// @param array The array of uint256 elements.\\n  /// @return result The SHA256 hash of the array.\\n  function sha256Hash(uint256[] memory array) public pure returns (uint256 result) {\\n    result = uint256(sha256(abi.encodePacked(array))) % SNARK_SCALAR_FIELD;\\n  }\\n\\n  /// @notice Computes the Poseidon hash of two uint256 elements.\\n  /// @param array An array of two uint256 elements.\\n  /// @return result The Poseidon hash of the two elements.\\n  function hash2(uint256[2] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT3.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of three uint256 elements.\\n  /// @param array An array of three uint256 elements.\\n  /// @return result The Poseidon hash of the three elements.\\n  function hash3(uint256[3] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT4.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of four uint256 elements.\\n  /// @param array An array of four uint256 elements.\\n  /// @return result The Poseidon hash of the four elements.\\n  function hash4(uint256[4] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT5.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of five uint256 elements.\\n  /// @param array An array of five uint256 elements.\\n  /// @return result The Poseidon hash of the five elements.\\n  function hash5(uint256[5] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT6.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of two uint256 elements.\\n  /// @param left the first element to hash.\\n  /// @param right the second element to hash.\\n  /// @return result The Poseidon hash of the two elements.\\n  function hashLeftRight(uint256 left, uint256 right) public pure returns (uint256 result) {\\n    uint256[2] memory input;\\n    input[0] = left;\\n    input[1] = right;\\n    result = hash2(input);\\n  }\\n}\\n\",\"keccak256\":\"0x5bd9dc3c43c862d8fd566e8ae2d3a52e1271f2aa3b042c71f97fe2dc449b1d5f\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/PoseidonT3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT3 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[2] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0x27b66b331502146590287b856ab767b2a2fb66a16da114961e3cef9e160d7263\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/PoseidonT4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT4 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[3] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xd38b24182625dab43ccd72c623df1263f2fec8ef828852189bf8ac17e59ae12b\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/PoseidonT5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT5 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[4] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0x93228facf0feb920e3b92e536040ba3c6fd5ffcdd5ae415373f153e05cec78b9\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/PoseidonT6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT6 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[5] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0x792080273729327555e4bed7ba86e51a22e63769732308ac0a59dce88e451505\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/SnarkConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @title SnarkConstants\\n/// @notice This contract contains constants related to the SNARK\\n/// components of MACI.\\ncontract SnarkConstants {\\n  /// @notice The scalar field\\n  uint256 internal constant SNARK_SCALAR_FIELD =\\n    21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n  /// @notice The public key here is the first Pedersen base\\n  /// point from iden3's circomlib implementation of the Pedersen hash.\\n  /// Since it is generated using a hash-to-curve function, we are\\n  /// confident that no-one knows the private key associated with this\\n  /// public key. See:\\n  /// https://github.com/iden3/circomlib/blob/d5ed1c3ce4ca137a6b3ca48bec4ac12c1b38957a/src/pedersen_printbases.js\\n  /// Its hash should equal\\n  /// 6769006970205099520508948723718471724660867171122235270773600567925038008762.\\n  uint256 internal constant PAD_PUBKEY_X =\\n    10457101036533406547632367118273992217979173478358440826365724437999023779287;\\n  uint256 internal constant PAD_PUBKEY_Y =\\n    19824078218392094440610104313265183977899662750282163392862422243483260492317;\\n\\n  /// @notice The Keccack256 hash of 'Maci'\\n  uint256 internal constant NOTHING_UP_MY_SLEEVE =\\n    8370432830353022751713833565135785980866757267633941821328460903436894336785;\\n}\\n\",\"keccak256\":\"0xef88737ff3d47333964f4fd6b939a12fe6e2ca64b069b26600a10c6a8f52fc7b\",\"license\":\"MIT\"},\"maci-contracts/contracts/gatekeepers/SignUpGatekeeper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @title SignUpGatekeeper\\n/// @notice A gatekeeper contract which allows users to sign up for a poll.\\nabstract contract SignUpGatekeeper {\\n  /// @notice Allows to set the MACI contract\\n  // solhint-disable-next-line no-empty-blocks\\n  function setMaciInstance(address _maci) public virtual {}\\n\\n  /// @notice Registers the user\\n  /// @param _user The address of the user\\n  /// @param _data additional data\\n  // solhint-disable-next-line no-empty-blocks\\n  function register(address _user, bytes memory _data) public virtual {}\\n\\n  /// @notice Get the trait of the gatekeeper\\n  /// @return The type of the gatekeeper\\n  function getTrait() public pure virtual returns (string memory);\\n}\\n\",\"keccak256\":\"0x81eee8829ae3deeae2c4870c4ba6776e7512a08cfe52d7bb26a84fea6c193881\",\"license\":\"MIT\"},\"maci-contracts/contracts/initialVoiceCreditProxy/InitialVoiceCreditProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @title InitialVoiceCreditProxy\\n/// @notice This contract is the base contract for\\n/// InitialVoiceCreditProxy contracts. It allows to set a custom initial voice\\n/// credit balance for MACI's voters.\\nabstract contract InitialVoiceCreditProxy {\\n  /// @notice Returns the initial voice credit balance for a new MACI's voter\\n  /// @param _user the address of the voter\\n  /// @param _data additional data\\n  /// @return the balance\\n  // solhint-disable-next-line no-empty-blocks\\n  function getVoiceCredits(address _user, bytes memory _data) public view virtual returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xa25c307be878c23d3e2f02200eb5cb1ad7c26efc3356cfdc5e72b1e2008f1249\",\"license\":\"MIT\"},\"maci-contracts/contracts/interfaces/IMACI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @title IMACI\\n/// @notice MACI interface\\ninterface IMACI {\\n  /// @notice Get the depth of the state tree\\n  /// @return The depth of the state tree\\n  function stateTreeDepth() external view returns (uint8);\\n\\n  /// @notice Return the main root of the StateAq contract\\n  /// @return The Merkle root\\n  function getStateTreeRoot() external view returns (uint256);\\n\\n  /// @notice Get the number of signups\\n  /// @return numsignUps The number of signups\\n  function numSignUps() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3ab057b23782dae9e0b399bdb262adbe32be85fa8db17f0a0fbfca56352603c1\",\"license\":\"MIT\"},\"maci-contracts/contracts/interfaces/IMPFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { DomainObjs } from \\\"../utilities/DomainObjs.sol\\\";\\n\\n/// @title IMessageProcessorFactory\\n/// @notice MessageProcessorFactory interface\\ninterface IMessageProcessorFactory {\\n  /// @notice Deploy a new MessageProcessor contract and return the address.\\n  /// @param _verifier Verifier contract\\n  /// @param _vkRegistry VkRegistry contract\\n  /// @param _poll Poll contract\\n  /// @param _owner Owner of the MessageProcessor contract\\n  /// @param _mode Voting mode\\n  /// @return The deployed MessageProcessor contract\\n  function deploy(\\n    address _verifier,\\n    address _vkRegistry,\\n    address _poll,\\n    address _owner,\\n    DomainObjs.Mode _mode\\n  ) external returns (address);\\n}\\n\",\"keccak256\":\"0xe26a5a2bc189117c9d7e7a60f248c3fcec64b81144bd164633ab971248cf43ce\",\"license\":\"MIT\"},\"maci-contracts/contracts/interfaces/IPollFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { Params } from \\\"../utilities/Params.sol\\\";\\nimport { DomainObjs } from \\\"../utilities/DomainObjs.sol\\\";\\n\\n/// @title IPollFactory\\n/// @notice PollFactory interface\\ninterface IPollFactory {\\n  /// @notice Deploy a new Poll contract and AccQueue contract for messages.\\n  /// @param _duration The duration of the poll\\n  /// @param _maxValues The max values for the poll\\n  /// @param _treeDepths The depths of the merkle trees\\n  /// @param _coordinatorPubKey The coordinator's public key\\n  /// @param _maci The MACI contract interface reference\\n  /// @return The deployed Poll contract\\n  function deploy(\\n    uint256 _duration,\\n    Params.MaxValues memory _maxValues,\\n    Params.TreeDepths memory _treeDepths,\\n    DomainObjs.PubKey memory _coordinatorPubKey,\\n    address _maci\\n  ) external returns (address);\\n}\\n\",\"keccak256\":\"0x91094b94af79472893df063fc272269ea5760ad8e3f310e34e9a8596517b41f3\",\"license\":\"MIT\"},\"maci-contracts/contracts/interfaces/ITallyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { DomainObjs } from \\\"../utilities/DomainObjs.sol\\\";\\n\\n/// @title ITallyFactory\\n/// @notice TallyFactory interface\\ninterface ITallyFactory {\\n  /// @notice Deploy a new Tally contract and return the address.\\n  /// @param _verifier Verifier contract\\n  /// @param _vkRegistry VkRegistry contract\\n  /// @param _poll Poll contract\\n  /// @param _messageProcessor MessageProcessor contract\\n  /// @param _owner Owner of the contract\\n  /// @param _mode Voting mode\\n  /// @return The deployed contract\\n  function deploy(\\n    address _verifier,\\n    address _vkRegistry,\\n    address _poll,\\n    address _messageProcessor,\\n    address _owner,\\n    DomainObjs.Mode _mode\\n  ) external returns (address);\\n}\\n\",\"keccak256\":\"0x941442404bf8dc477bb99516c25ac2b46f27a8d32707d4a72fc3bb77e39f7362\",\"license\":\"MIT\"},\"maci-contracts/contracts/trees/AccQueue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Hasher } from \\\"../crypto/Hasher.sol\\\";\\n\\n/// @title AccQueue\\n/// @notice This contract defines a Merkle tree where each leaf insertion only updates a\\n/// subtree. To obtain the main tree root, the contract owner must merge the\\n/// subtrees together. Merging subtrees requires at least 2 operations:\\n/// mergeSubRoots(), and merge(). To get around the gas limit,\\n/// the mergeSubRoots() can be performed in multiple transactions.\\nabstract contract AccQueue is Ownable(msg.sender), Hasher {\\n  // The maximum tree depth\\n  uint256 public constant MAX_DEPTH = 32;\\n\\n  /// @notice A Queue is a 2D array of Merkle roots and indices which represents nodes\\n  /// in a Merkle tree while it is progressively updated.\\n  struct Queue {\\n    /// @notice IMPORTANT: the following declares an array of b elements of type T: T[b]\\n    /// And the following declares an array of b elements of type T[a]: T[a][b]\\n    /// As such, the following declares an array of MAX_DEPTH+1 arrays of\\n    /// uint256[4] arrays, **not the other way round**:\\n    uint256[4][MAX_DEPTH + 1] levels;\\n    uint256[MAX_DEPTH + 1] indices;\\n  }\\n\\n  // The depth of each subtree\\n  uint256 internal immutable subDepth;\\n\\n  // The number of elements per hash operation. Should be either 2 (for\\n  // binary trees) or 5 (quinary trees). The limit is 5 because that is the\\n  // maximum supported number of inputs for the EVM implementation of the\\n  // Poseidon hash function\\n  uint256 internal immutable hashLength;\\n\\n  // hashLength ** subDepth\\n  uint256 internal immutable subTreeCapacity;\\n\\n  // True hashLength == 2, false if hashLength == 5\\n  bool internal isBinary;\\n\\n  // The index of the current subtree. e.g. the first subtree has index 0, the\\n  // second has 1, and so on\\n  uint256 internal currentSubtreeIndex;\\n\\n  // Tracks the current subtree.\\n  Queue internal leafQueue;\\n\\n  // Tracks the smallest tree of subroots\\n  Queue internal subRootQueue;\\n\\n  // Subtree roots\\n  mapping(uint256 => uint256) internal subRoots;\\n\\n  // Merged roots\\n  uint256[MAX_DEPTH + 1] internal mainRoots;\\n\\n  // Whether the subtrees have been merged\\n  bool public subTreesMerged;\\n\\n  // Whether entire merkle tree has been merged\\n  bool public treeMerged;\\n\\n  // The root of the shortest possible tree which fits all current subtree\\n  // roots\\n  uint256 internal smallSRTroot;\\n\\n  // Tracks the next subroot to queue\\n  uint256 internal nextSubRootIndex;\\n\\n  // The number of leaves inserted across all subtrees so far\\n  uint256 public numLeaves;\\n\\n  /// @notice custom errors\\n  error SubDepthCannotBeZero();\\n  error SubdepthTooLarge(uint256 _subDepth, uint256 max);\\n  error InvalidHashLength();\\n  error DepthCannotBeZero();\\n  error SubTreesAlreadyMerged();\\n  error NothingToMerge();\\n  error SubTreesNotMerged();\\n  error DepthTooLarge(uint256 _depth, uint256 max);\\n  error DepthTooSmall(uint256 _depth, uint256 min);\\n  error InvalidIndex(uint256 _index);\\n  error InvalidLevel();\\n\\n  /// @notice Create a new AccQueue\\n  /// @param _subDepth The depth of each subtree.\\n  /// @param _hashLength The number of leaves per node (2 or 5).\\n  constructor(uint256 _subDepth, uint256 _hashLength) payable {\\n    /// validation\\n    if (_subDepth == 0) revert SubDepthCannotBeZero();\\n    if (_subDepth > MAX_DEPTH) revert SubdepthTooLarge(_subDepth, MAX_DEPTH);\\n    if (_hashLength != 2 && _hashLength != 5) revert InvalidHashLength();\\n\\n    isBinary = _hashLength == 2;\\n    subDepth = _subDepth;\\n    hashLength = _hashLength;\\n    subTreeCapacity = _hashLength ** _subDepth;\\n  }\\n\\n  /// @notice Hash the contents of the specified level and the specified leaf.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which require\\n  /// different input array lengths.\\n  /// @param _level The level to hash.\\n  /// @param _leaf The leaf include with the level.\\n  /// @return _hash The hash of the level and leaf.\\n  // solhint-disable-next-line no-empty-blocks\\n  function hashLevel(uint256 _level, uint256 _leaf) internal virtual returns (uint256 _hash) {}\\n\\n  /// @notice Hash the contents of the specified level and the specified leaf.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which require\\n  /// different input array lengths.\\n  /// @param _level The level to hash.\\n  /// @param _leaf The leaf include with the level.\\n  /// @return _hash The hash of the level and leaf.\\n  // solhint-disable-next-line no-empty-blocks\\n  function hashLevelLeaf(uint256 _level, uint256 _leaf) public view virtual returns (uint256 _hash) {}\\n\\n  /// @notice Returns the zero leaf at a specified level.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which will produce\\n  /// different zero values (e.g. hashLeftRight(0, 0) vs\\n  /// hash5([0, 0, 0, 0, 0]). Moreover, the zero value may be a\\n  /// nothing-up-my-sleeve value.\\n  /// @param _level The level at which to return the zero leaf.\\n  /// @return zero The zero leaf at the specified level.\\n  // solhint-disable-next-line no-empty-blocks\\n  function getZero(uint256 _level) internal virtual returns (uint256 zero) {}\\n\\n  /// @notice Add a leaf to the queue for the current subtree.\\n  /// @param _leaf The leaf to add.\\n  /// @return leafIndex The index of the leaf in the queue.\\n  function enqueue(uint256 _leaf) public onlyOwner returns (uint256 leafIndex) {\\n    leafIndex = numLeaves;\\n    // Recursively queue the leaf\\n    _enqueue(_leaf, 0);\\n\\n    // Update the leaf counter\\n    numLeaves = leafIndex + 1;\\n\\n    // Now that a new leaf has been added, mainRoots and smallSRTroot are\\n    // obsolete\\n    delete mainRoots;\\n    delete smallSRTroot;\\n    subTreesMerged = false;\\n\\n    // If a subtree is full\\n    if (numLeaves % subTreeCapacity == 0) {\\n      // Store the subroot\\n      subRoots[currentSubtreeIndex] = leafQueue.levels[subDepth][0];\\n\\n      // Increment the index\\n      currentSubtreeIndex++;\\n\\n      // Delete ancillary data\\n      delete leafQueue.levels[subDepth][0];\\n      delete leafQueue.indices;\\n    }\\n  }\\n\\n  /// @notice Updates the queue at a given level and hashes any subroots\\n  /// that need to be hashed.\\n  /// @param _leaf The leaf to add.\\n  /// @param _level The level at which to queue the leaf.\\n  function _enqueue(uint256 _leaf, uint256 _level) internal {\\n    if (_level > subDepth) {\\n      revert InvalidLevel();\\n    }\\n\\n    while (true) {\\n      uint256 n = leafQueue.indices[_level];\\n\\n      if (n != hashLength - 1) {\\n        // Just store the leaf\\n        leafQueue.levels[_level][n] = _leaf;\\n\\n        if (_level != subDepth) {\\n          // Update the index\\n          leafQueue.indices[_level]++;\\n        }\\n\\n        return;\\n      }\\n\\n      // Hash the leaves to next level\\n      _leaf = hashLevel(_level, _leaf);\\n\\n      // Reset the index for this level\\n      delete leafQueue.indices[_level];\\n\\n      // Queue the hash of the leaves into to the next level\\n      _level++;\\n    }\\n  }\\n\\n  /// @notice Fill any empty leaves of the current subtree with zeros and store the\\n  /// resulting subroot.\\n  function fill() public onlyOwner {\\n    if (numLeaves % subTreeCapacity == 0) {\\n      // If the subtree is completely empty, then the subroot is a\\n      // precalculated zero value\\n      subRoots[currentSubtreeIndex] = getZero(subDepth);\\n    } else {\\n      // Otherwise, fill the rest of the subtree with zeros\\n      _fill(0);\\n\\n      // Store the subroot\\n      subRoots[currentSubtreeIndex] = leafQueue.levels[subDepth][0];\\n\\n      // Reset the subtree data\\n      delete leafQueue.levels;\\n\\n      // Reset the merged roots\\n      delete mainRoots;\\n    }\\n\\n    // Increment the subtree index\\n    uint256 curr = currentSubtreeIndex + 1;\\n    currentSubtreeIndex = curr;\\n\\n    // Update the number of leaves\\n    numLeaves = curr * subTreeCapacity;\\n\\n    // Reset the subroot tree root now that it is obsolete\\n    delete smallSRTroot;\\n\\n    subTreesMerged = false;\\n  }\\n\\n  /// @notice A function that queues zeros to the specified level, hashes,\\n  /// the level, and enqueues the hash to the next level.\\n  /// @param _level The level at which to queue zeros.\\n  // solhint-disable-next-line no-empty-blocks\\n  function _fill(uint256 _level) internal virtual {}\\n\\n  /// Insert a subtree. Used for batch enqueues.\\n  function insertSubTree(uint256 _subRoot) public onlyOwner {\\n    subRoots[currentSubtreeIndex] = _subRoot;\\n\\n    // Increment the subtree index\\n    currentSubtreeIndex++;\\n\\n    // Update the number of leaves\\n    numLeaves += subTreeCapacity;\\n\\n    // Reset the subroot tree root now that it is obsolete\\n    delete smallSRTroot;\\n\\n    subTreesMerged = false;\\n  }\\n\\n  /// @notice Calculate the lowest possible height of a tree with\\n  /// all the subroots merged together.\\n  /// @return depth The lowest possible height of a tree with all the\\n  function calcMinHeight() public view returns (uint256 depth) {\\n    depth = 1;\\n    while (true) {\\n      if (hashLength ** depth >= currentSubtreeIndex) {\\n        break;\\n      }\\n      depth++;\\n    }\\n  }\\n\\n  /// @notice Merge all subtrees to form the shortest possible tree.\\n  /// This function can be called either once to merge all subtrees in a\\n  /// single transaction, or multiple times to do the same in multiple\\n  /// transactions.\\n  /// @param _numSrQueueOps The number of times this function will call\\n  ///                       queueSubRoot(), up to the maximum number of times\\n  ///                       necessary. If it is set to 0, it will call\\n  ///                       queueSubRoot() as many times as is necessary. Set\\n  ///                       this to a low number and call this function\\n  ///                       multiple times if there are many subroots to\\n  ///                       merge, or a single transaction could run out of\\n  ///                       gas.\\n  function mergeSubRoots(uint256 _numSrQueueOps) public onlyOwner {\\n    // This function can only be called once unless a new subtree is created\\n    if (subTreesMerged) revert SubTreesAlreadyMerged();\\n\\n    // There must be subtrees to merge\\n    if (numLeaves == 0) revert NothingToMerge();\\n\\n    // Fill any empty leaves in the current subtree with zeros only if the\\n    // current subtree is not full\\n    if (numLeaves % subTreeCapacity != 0) {\\n      fill();\\n    }\\n\\n    // If there is only 1 subtree, use its root\\n    if (currentSubtreeIndex == 1) {\\n      smallSRTroot = getSubRoot(0);\\n      subTreesMerged = true;\\n      return;\\n    }\\n\\n    uint256 depth = calcMinHeight();\\n\\n    uint256 queueOpsPerformed = 0;\\n    for (uint256 i = nextSubRootIndex; i < currentSubtreeIndex; i++) {\\n      if (_numSrQueueOps != 0 && queueOpsPerformed == _numSrQueueOps) {\\n        // If the limit is not 0, stop if the limit has been reached\\n        return;\\n      }\\n\\n      // Queue the next subroot\\n      queueSubRoot(getSubRoot(nextSubRootIndex), 0, depth);\\n\\n      // Increment the next subroot counter\\n      nextSubRootIndex++;\\n\\n      // Increment the ops counter\\n      queueOpsPerformed++;\\n    }\\n\\n    // The height of the tree of subroots\\n    uint256 m = hashLength ** depth;\\n\\n    // Queue zeroes to fill out the SRT\\n    if (nextSubRootIndex == currentSubtreeIndex) {\\n      uint256 z = getZero(subDepth);\\n      for (uint256 i = currentSubtreeIndex; i < m; i++) {\\n        queueSubRoot(z, 0, depth);\\n      }\\n    }\\n\\n    // Store the smallest main root\\n    smallSRTroot = subRootQueue.levels[depth][0];\\n    subTreesMerged = true;\\n  }\\n\\n  /// @notice Queues a subroot into the subroot tree.\\n  /// @param _leaf The value to queue.\\n  /// @param _level The level at which to queue _leaf.\\n  /// @param _maxDepth The depth of the tree.\\n  function queueSubRoot(uint256 _leaf, uint256 _level, uint256 _maxDepth) internal {\\n    if (_level > _maxDepth) {\\n      return;\\n    }\\n\\n    uint256 n = subRootQueue.indices[_level];\\n\\n    if (n != hashLength - 1) {\\n      // Just store the leaf\\n      subRootQueue.levels[_level][n] = _leaf;\\n      subRootQueue.indices[_level]++;\\n    } else {\\n      // Hash the elements in this level and queue it in the next level\\n      uint256 hashed;\\n      if (isBinary) {\\n        uint256[2] memory inputs;\\n        inputs[0] = subRootQueue.levels[_level][0];\\n        inputs[1] = _leaf;\\n        hashed = hash2(inputs);\\n      } else {\\n        uint256[5] memory inputs;\\n        for (uint8 i = 0; i < n; i++) {\\n          inputs[i] = subRootQueue.levels[_level][i];\\n        }\\n        inputs[n] = _leaf;\\n        hashed = hash5(inputs);\\n      }\\n\\n      // TODO: change recursion to a while loop\\n      // Recurse\\n      delete subRootQueue.indices[_level];\\n      queueSubRoot(hashed, _level + 1, _maxDepth);\\n    }\\n  }\\n\\n  /// @notice Merge all subtrees to form a main tree with a desired depth.\\n  /// @param _depth The depth of the main tree. It must fit all the leaves or\\n  ///               this function will revert.\\n  /// @return root The root of the main tree.\\n  function merge(uint256 _depth) public onlyOwner returns (uint256 root) {\\n    // The tree depth must be more than 0\\n    if (_depth == 0) revert DepthCannotBeZero();\\n\\n    // Ensure that the subtrees have been merged\\n    if (!subTreesMerged) revert SubTreesNotMerged();\\n\\n    // Check the depth\\n    if (_depth > MAX_DEPTH) revert DepthTooLarge(_depth, MAX_DEPTH);\\n\\n    // Calculate the SRT depth\\n    uint256 srtDepth = subDepth;\\n    while (true) {\\n      if (hashLength ** srtDepth >= numLeaves) {\\n        break;\\n      }\\n      srtDepth++;\\n    }\\n\\n    if (_depth < srtDepth) revert DepthTooSmall(_depth, srtDepth);\\n\\n    // If the depth is the same as the SRT depth, just use the SRT root\\n    if (_depth == srtDepth) {\\n      mainRoots[_depth] = smallSRTroot;\\n      treeMerged = true;\\n      return smallSRTroot;\\n    } else {\\n      root = smallSRTroot;\\n\\n      // Calculate the main root\\n\\n      for (uint256 i = srtDepth; i < _depth; i++) {\\n        uint256 z = getZero(i);\\n\\n        if (isBinary) {\\n          uint256[2] memory inputs;\\n          inputs[0] = root;\\n          inputs[1] = z;\\n          root = hash2(inputs);\\n        } else {\\n          uint256[5] memory inputs;\\n          inputs[0] = root;\\n          inputs[1] = z;\\n          inputs[2] = z;\\n          inputs[3] = z;\\n          inputs[4] = z;\\n          root = hash5(inputs);\\n        }\\n      }\\n\\n      mainRoots[_depth] = root;\\n      treeMerged = true;\\n    }\\n  }\\n\\n  /// @notice Returns the subroot at the specified index. Reverts if the index refers\\n  /// to a subtree which has not been filled yet.\\n  /// @param _index The subroot index.\\n  /// @return subRoot The subroot at the specified index.\\n  function getSubRoot(uint256 _index) public view returns (uint256 subRoot) {\\n    if (currentSubtreeIndex <= _index) revert InvalidIndex(_index);\\n    subRoot = subRoots[_index];\\n  }\\n\\n  /// @notice Returns the subroot tree (SRT) root. Its value must first be computed\\n  /// using mergeSubRoots.\\n  /// @return smallSubTreeRoot The SRT root.\\n  function getSmallSRTroot() public view returns (uint256 smallSubTreeRoot) {\\n    if (!subTreesMerged) revert SubTreesNotMerged();\\n    smallSubTreeRoot = smallSRTroot;\\n  }\\n\\n  /// @notice Return the merged Merkle root of all the leaves at a desired depth.\\n  /// @dev merge() or merged(_depth) must be called first.\\n  /// @param _depth The depth of the main tree. It must first be computed\\n  ///               using mergeSubRoots() and merge().\\n  /// @return mainRoot The root of the main tree.\\n  function getMainRoot(uint256 _depth) public view returns (uint256 mainRoot) {\\n    if (hashLength ** _depth < numLeaves) revert DepthTooSmall(_depth, numLeaves);\\n\\n    mainRoot = mainRoots[_depth];\\n  }\\n\\n  /// @notice Get the next subroot index and the current subtree index.\\n  function getSrIndices() public view returns (uint256 next, uint256 current) {\\n    next = nextSubRootIndex;\\n    current = currentSubtreeIndex;\\n  }\\n}\\n\",\"keccak256\":\"0xf7b3357a612808b59e27300842bd92fefc42e276348fc2f4bf794192e2499de8\",\"license\":\"MIT\"},\"maci-contracts/contracts/trees/LazyIMT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { PoseidonT3 } from \\\"../crypto/PoseidonT3.sol\\\";\\n\\n/// @notice A struct that holds a LazyIMT data\\nstruct LazyIMTData {\\n  uint40 maxIndex;\\n  uint40 numberOfLeaves;\\n  mapping(uint256 => uint256) elements;\\n}\\n\\n/// @notice Custom errors\\nerror DefaultZeroBadIndex();\\nerror DepthTooLarge();\\nerror DepthCannotBeZero();\\nerror NumberOfLeavesCannotBeZero();\\nerror AmbiguousDepth();\\n\\n/// @title InternalLazyIMT\\n/// @dev A LazyIMT with Zeroes value set to the hash of\\n/// a MACI Blank State Leaf\\n/// @notice This implementation is taken from zk-kit\\n/// https://github.com/privacy-scaling-explorations/zk-kit/blob/main/packages/imt.sol/contracts/internal/InternalLazyIMT.sol\\n/// and modified to work with MACI.\\nlibrary InternalLazyIMT {\\n  uint256 internal constant MAX_DEPTH = 32;\\n\\n  uint40 internal constant MAX_INDEX = (1 << 32) - 1;\\n\\n  uint256 internal constant Z_0 = 6769006970205099520508948723718471724660867171122235270773600567925038008762;\\n  uint256 internal constant Z_1 = 2972820301952105722688860985556183033855705951263221082702981787813754939537;\\n  uint256 internal constant Z_2 = 19009473369953096352828532459942637819279786575057870804186038131433538383332;\\n  uint256 internal constant Z_3 = 1877001762518233819645599208989578372605193385355680834239714249281096297174;\\n  uint256 internal constant Z_4 = 4022598852800694816938652741439614774645858989706174527409714109784047480520;\\n  uint256 internal constant Z_5 = 8078617093048295855521451309865989496051030103472138252021705658681696298712;\\n  uint256 internal constant Z_6 = 21861637049723057871988413507302821095913894718242489848472531680353400271584;\\n  uint256 internal constant Z_7 = 2969626195902860050407584814596940245443093107470116547781577350415736914038;\\n  uint256 internal constant Z_8 = 13863086449569754493134198846069090996475357615094865751949144794620598051673;\\n  uint256 internal constant Z_9 = 13774233155966252113965527228795435224641075024674384267997743867571011718458;\\n  uint256 internal constant Z_10 = 7674682532432601125535053858292577379388329393276537570517515727197672122157;\\n  uint256 internal constant Z_11 = 2657471847139856346360223652201172662911313292042510535836997980857168085414;\\n  uint256 internal constant Z_12 = 14112562742724116016492623819773686970029672095023612838615540190985426106768;\\n  uint256 internal constant Z_13 = 16966520284141749853106006448832965932249937855809150844697400390499975107456;\\n  uint256 internal constant Z_14 = 21146121663662200258116396149536742745305242191891337170899444969488030502620;\\n  uint256 internal constant Z_15 = 8395571901509192935479743034608666551563743095742598750914087478677907730358;\\n  uint256 internal constant Z_16 = 11584898446168752024843587018551921614604785083342073076015560385003528300499;\\n  uint256 internal constant Z_17 = 19681365563800708744156562671961079617734353445922751560400662591064339349816;\\n  uint256 internal constant Z_18 = 11060693795061987995391612467169498625108376769265861980249917517984263067473;\\n  uint256 internal constant Z_19 = 20136055137568042031318427040358591430196153124171666293804511634641041409480;\\n  uint256 internal constant Z_20 = 10438448879123510479428288344427042332522761183009746406441238260861529360499;\\n  uint256 internal constant Z_21 = 20302411580043873005239406811066876697276902025885155920151067303221158887923;\\n  uint256 internal constant Z_22 = 16905699456770804689394621400052823445587122726651394178036372609288266146575;\\n  uint256 internal constant Z_23 = 13317924909658910751179983108234689413063120680580702936091220805509299490708;\\n  uint256 internal constant Z_24 = 11624463897690689883938167321830091369950933831231839575225419984927228390345;\\n  uint256 internal constant Z_25 = 12388077003631746290497429926117583834311703848735670874049584990731919769551;\\n  uint256 internal constant Z_26 = 16641943593086083573943184041147806885253724243247212515325749241831788827569;\\n  uint256 internal constant Z_27 = 8675770901378242337954792996483564563211065498082968464791979179678744114204;\\n  uint256 internal constant Z_28 = 3741944068643598116715410464277276913339851849923986024648161859457213369743;\\n  uint256 internal constant Z_29 = 9365051374992868354747065577256691008852056444829383197903446097138255771103;\\n  uint256 internal constant Z_30 = 19608043542461863702809013760105552654336523908709289008189330402608282498922;\\n  uint256 internal constant Z_31 = 15116478429455923389320892447700153271977917184085737305957533984219061034768;\\n  uint256 internal constant Z_32 = 13372161856163346716845871420623647679532631520878788090782842562075678687737;\\n\\n  /// @notice Returns the default zero value for a given index\\n  /// @param index The index of the zero value\\n  /// @return The zero value\\n  function _defaultZero(uint8 index) internal pure returns (uint256) {\\n    if (index == 0) return Z_0;\\n    if (index == 1) return Z_1;\\n    if (index == 2) return Z_2;\\n    if (index == 3) return Z_3;\\n    if (index == 4) return Z_4;\\n    if (index == 5) return Z_5;\\n    if (index == 6) return Z_6;\\n    if (index == 7) return Z_7;\\n    if (index == 8) return Z_8;\\n    if (index == 9) return Z_9;\\n    if (index == 10) return Z_10;\\n    if (index == 11) return Z_11;\\n    if (index == 12) return Z_12;\\n    if (index == 13) return Z_13;\\n    if (index == 14) return Z_14;\\n    if (index == 15) return Z_15;\\n    if (index == 16) return Z_16;\\n    if (index == 17) return Z_17;\\n    if (index == 18) return Z_18;\\n    if (index == 19) return Z_19;\\n    if (index == 20) return Z_20;\\n    if (index == 21) return Z_21;\\n    if (index == 22) return Z_22;\\n    if (index == 23) return Z_23;\\n    if (index == 24) return Z_24;\\n    if (index == 25) return Z_25;\\n    if (index == 26) return Z_26;\\n    if (index == 27) return Z_27;\\n    if (index == 28) return Z_28;\\n    if (index == 29) return Z_29;\\n    if (index == 30) return Z_30;\\n    if (index == 31) return Z_31;\\n    if (index == 32) return Z_32;\\n    revert DefaultZeroBadIndex();\\n  }\\n\\n  /// @notice Initializes the LazyIMT\\n  /// @param self The LazyIMTData\\n  /// @param depth The depth of the tree\\n  function _init(LazyIMTData storage self, uint8 depth) internal {\\n    if (depth > MAX_DEPTH) {\\n      revert DepthTooLarge();\\n    }\\n    self.maxIndex = uint40((1 << depth) - 1);\\n    self.numberOfLeaves = 0;\\n  }\\n\\n  /// @notice Returns the index for a given level and index\\n  /// @param level The level\\n  /// @param index The index\\n  /// @return The index for the element\\n  function _indexForElement(uint8 level, uint40 index) internal pure returns (uint40) {\\n    // store the elements sparsely\\n    return MAX_INDEX * level + index;\\n  }\\n\\n  /// @notice Inserts a leaf into the LazyIMT\\n  /// @param self The LazyIMTData\\n  /// @param leaf The leaf to insert\\n  function _insert(LazyIMTData storage self, uint256 leaf) internal {\\n    uint40 index = self.numberOfLeaves;\\n\\n    self.numberOfLeaves = index + 1;\\n\\n    uint256 hash = leaf;\\n\\n    for (uint8 i = 0; ; ) {\\n      self.elements[_indexForElement(i, index)] = hash;\\n      // it's a left element so we don't hash until there's a right element\\n      if (index & 1 == 0) break;\\n      uint40 elementIndex = _indexForElement(i, index - 1);\\n      hash = PoseidonT3.poseidon([self.elements[elementIndex], hash]);\\n      unchecked {\\n        index >>= 1;\\n        i++;\\n      }\\n    }\\n  }\\n\\n  /// @notice Returns the root of the LazyIMT\\n  /// @param self The LazyIMTData\\n  /// @return The root of the LazyIMT\\n  function _root(LazyIMTData storage self) internal view returns (uint256) {\\n    // this will always short circuit if self.numberOfLeaves == 0\\n    uint40 numberOfLeaves = self.numberOfLeaves;\\n    // dynamically determine a depth\\n    uint8 depth = 1;\\n    while (uint40(2) ** uint40(depth) < numberOfLeaves) {\\n      depth++;\\n    }\\n    return _root(self, numberOfLeaves, depth);\\n  }\\n\\n  /// @notice Returns the root of the LazyIMT\\n  /// @dev Here it's assumed that the depth value is valid.\\n  /// If it is either 0 or > 2^8-1 this function will panic.\\n  /// @param self The LazyIMTData\\n  /// @param numberOfLeaves The number of leaves\\n  /// @param depth The depth of the tree\\n  /// @return The root of the LazyIMT\\n  function _root(LazyIMTData storage self, uint40 numberOfLeaves, uint8 depth) internal view returns (uint256) {\\n    if (depth > MAX_DEPTH) {\\n      revert DepthTooLarge();\\n    }\\n    // this should always short circuit if self.numberOfLeaves == 0\\n    if (numberOfLeaves == 0) return _defaultZero(depth);\\n    uint256[] memory levels = new uint256[](depth + 1);\\n    _levels(self, numberOfLeaves, depth, levels);\\n    return levels[depth];\\n  }\\n\\n  /// @notice Updates the levels of the LazyIMT\\n  /// @param self The LazyIMTData\\n  /// @param numberOfLeaves The number of leaves\\n  /// @param depth The depth of the tree\\n  /// @param levels The levels of the tree\\n  function _levels(\\n    LazyIMTData storage self,\\n    uint40 numberOfLeaves,\\n    uint8 depth,\\n    uint256[] memory levels\\n  ) internal view {\\n    if (depth > MAX_DEPTH) {\\n      revert DepthTooLarge();\\n    }\\n    if (numberOfLeaves == 0) {\\n      revert NumberOfLeavesCannotBeZero();\\n    }\\n\\n    // this should always short circuit if self.numberOfLeaves == 0\\n    uint40 index = numberOfLeaves - 1;\\n\\n    if (index & 1 == 0) {\\n      levels[0] = self.elements[_indexForElement(0, index)];\\n    } else {\\n      levels[0] = _defaultZero(0);\\n    }\\n\\n    for (uint8 i = 0; i < depth; ) {\\n      if (index & 1 == 0) {\\n        levels[i + 1] = PoseidonT3.poseidon([levels[i], _defaultZero(i)]);\\n      } else {\\n        uint256 levelCount = (numberOfLeaves) >> (i + 1);\\n        if (levelCount > index >> 1) {\\n          uint256 parent = self.elements[_indexForElement(i + 1, index >> 1)];\\n          levels[i + 1] = parent;\\n        } else {\\n          uint256 sibling = self.elements[_indexForElement(i, index - 1)];\\n          levels[i + 1] = PoseidonT3.poseidon([sibling, levels[i]]);\\n        }\\n      }\\n      unchecked {\\n        index >>= 1;\\n        i++;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x827938973424c6275d04888463df487f10d9b9ab89198838c45ed4fcad50790b\",\"license\":\"MIT\"},\"maci-contracts/contracts/utilities/DomainObjs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @title DomainObjs\\n/// @notice An utility contract that holds\\n/// a number of domain objects and functions\\ncontract DomainObjs {\\n  /// @notice the length of a MACI message\\n  uint8 public constant MESSAGE_DATA_LENGTH = 10;\\n\\n  /// @notice voting modes\\n  enum Mode {\\n    QV,\\n    NON_QV\\n  }\\n\\n  /// @title Message\\n  /// @notice this struct represents a MACI message\\n  /// @dev msgType: 1 for vote message\\n  struct Message {\\n    uint256[MESSAGE_DATA_LENGTH] data;\\n  }\\n\\n  /// @title PubKey\\n  /// @notice A MACI public key\\n  struct PubKey {\\n    uint256 x;\\n    uint256 y;\\n  }\\n\\n  /// @title StateLeaf\\n  /// @notice A MACI state leaf\\n  /// @dev used to represent a user's state\\n  /// in the state Merkle tree\\n  struct StateLeaf {\\n    PubKey pubKey;\\n    uint256 voiceCreditBalance;\\n    uint256 timestamp;\\n  }\\n}\\n\",\"keccak256\":\"0xf2d6000c85f03c81cc4226150c1c1fbd88c9e18c1cc32b7311976ab43552768f\",\"license\":\"MIT\"},\"maci-contracts/contracts/utilities/Params.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { IMACI } from \\\"../interfaces/IMACI.sol\\\";\\nimport { AccQueue } from \\\"../trees/AccQueue.sol\\\";\\n\\n/// @title Params\\n/// @notice This contracts contains a number of structures\\n/// which are to be passed as parameters to Poll contracts.\\n/// This way we can reduce the number of parameters\\n/// and avoid a stack too deep error during compilation.\\ncontract Params {\\n  /// @notice A struct holding the depths of the merkle trees\\n  struct TreeDepths {\\n    uint8 intStateTreeDepth;\\n    uint8 messageTreeSubDepth;\\n    uint8 messageTreeDepth;\\n    uint8 voteOptionTreeDepth;\\n  }\\n\\n  /// @notice A struct holding the max values for the poll\\n  struct MaxValues {\\n    uint256 maxMessages;\\n    uint256 maxVoteOptions;\\n  }\\n\\n  /// @notice A struct holding the external contracts\\n  /// that are to be passed to a Poll contract on\\n  /// deployment\\n  struct ExtContracts {\\n    IMACI maci;\\n    AccQueue messageAq;\\n  }\\n}\\n\",\"keccak256\":\"0x7b9b48595af59aa1bf0ad4c3b6d87f95a15b45d9b7530a93f6fb0b54bc5641a0\",\"license\":\"MIT\"},\"maci-contracts/contracts/utilities/Utilities.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { DomainObjs } from \\\"./DomainObjs.sol\\\";\\nimport { Hasher } from \\\"../crypto/Hasher.sol\\\";\\nimport { SnarkConstants } from \\\"../crypto/SnarkConstants.sol\\\";\\n\\n/// @title Utilities\\n/// @notice An utility contract that can be used to:\\n/// * hash a state leaf\\n/// * pad and hash a MACI message\\n/// * hash a MACI message and an encryption public key\\ncontract Utilities is SnarkConstants, DomainObjs, Hasher {\\n  /// @notice custom errors\\n  error InvalidMessage();\\n\\n  /// @notice An utility function used to hash a state leaf\\n  /// @param _stateLeaf the state leaf to be hashed\\n  /// @return ciphertext The hash of the state leaf\\n  function hashStateLeaf(StateLeaf memory _stateLeaf) public pure returns (uint256 ciphertext) {\\n    uint256[4] memory plaintext;\\n    plaintext[0] = _stateLeaf.pubKey.x;\\n    plaintext[1] = _stateLeaf.pubKey.y;\\n    plaintext[2] = _stateLeaf.voiceCreditBalance;\\n    plaintext[3] = _stateLeaf.timestamp;\\n\\n    ciphertext = hash4(plaintext);\\n  }\\n\\n  /// @notice An utility function used to pad and hash a MACI message\\n  /// @param dataToPad the data to be padded\\n  /// @return message The padded message\\n  /// @return padKey The padding public key\\n  /// @return msgHash The hash of the padded message and encryption key\\n  function padAndHashMessage(\\n    uint256[2] memory dataToPad\\n  ) public pure returns (Message memory message, PubKey memory padKey, uint256 msgHash) {\\n    // add data and pad it to 10 elements (automatically cause it's the default value)\\n    uint256[10] memory dat;\\n    dat[0] = dataToPad[0];\\n    dat[1] = dataToPad[1];\\n\\n    padKey = PubKey(PAD_PUBKEY_X, PAD_PUBKEY_Y);\\n    message = Message({ data: dat });\\n    msgHash = hashMessageAndEncPubKey(message, padKey);\\n  }\\n\\n  /// @notice An utility function used to hash a MACI message and an encryption public key\\n  /// @param _message the message to be hashed\\n  /// @param _encPubKey the encryption public key to be hashed\\n  /// @return msgHash The hash of the message and the encryption public key\\n  function hashMessageAndEncPubKey(\\n    Message memory _message,\\n    PubKey memory _encPubKey\\n  ) public pure returns (uint256 msgHash) {\\n    if (_message.data.length != 10) {\\n      revert InvalidMessage();\\n    }\\n\\n    uint256[5] memory n;\\n    n[0] = _message.data[0];\\n    n[1] = _message.data[1];\\n    n[2] = _message.data[2];\\n    n[3] = _message.data[3];\\n    n[4] = _message.data[4];\\n\\n    uint256[5] memory m;\\n    m[0] = _message.data[5];\\n    m[1] = _message.data[6];\\n    m[2] = _message.data[7];\\n    m[3] = _message.data[8];\\n    m[4] = _message.data[9];\\n\\n    msgHash = hash4([hash5(n), hash5(m), _encPubKey.x, _encPubKey.y]);\\n  }\\n}\\n\",\"keccak256\":\"0x3b53d8068e07444209114d3c0f9bcf49426921a70cc3e4ae7eeddf6eeb09927a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101608060405234620004355760c08162003e58803803809162000024828562000487565b83398101031262000435578051906001600160a01b0382168203620004355760208101516001600160a01b0381168103620004355760408201516001600160a01b0381168103620004355760608301516001600160a01b038116810362000435576080840151936001600160a01b0385168503620004355760a001519360ff851685036200043557602060ff8616116200044357600160ff86161b9460001986019586116200026b5760018060501b0319600254169564ffffffffff808216881760281c169664ffffffffff60018901116200026b5764ffffffffff909116176001870160281b69ffffffffff00000000001617600255600095947f0ef71f46e11a513c599eed9dd03576c33439bcfb1cee155316f90541e41649ba5b64ffffffffff62000153888a620004f8565b166000526003602052806040600020556001871615620002815760001964ffffffffff88160164ffffffffff81116200026b57620001de91620001996020928b620004f8565b9064ffffffffff60405192620001af8462000455565b1660005260038352604060002054825282820152604051809381926314d2f97b60e11b835260048301620004c8565b038173Cf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc95af49081156200025f5760009162000223575b506001647fffffffff60ff9298821c16980116969562000141565b906020823d60201162000256575b81620002406020938362000487565b8101031262000253575051600162000208565b80fd5b3d915062000231565b6040513d6000823e3d90fd5b634e487b7160e01b600052601160045260246000fd5b50620002ae9160ff918960c05260e0526101009586526101209485526101409384528060805216620004ab565b60a052620002ea6020604051620002c58162000455565b60018152600182820152604051809381926314d2f97b60e11b835260048301620004c8565b038173Cf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc95af49081156200025f5760009162000406575b5015620003f4573315620003db5760048054336001600160a01b0319821681179092556040519391906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3613936938462000522853960805184610920015260a0518481816103a901526118e7015260c05184818161168f0152612b17015260e051848181611f1a0152612b93015251838181610a7c0152612c090152518281816119340152611ed70152518181816105f101526119b80152f35b604051631e4fbdf760e01b815260006004820152602490fd5b604051633d7ba68560e21b8152600490fd5b90506020813d6020116200043a575b81620004246020938362000487565b810103126200043557518462000314565b600080fd5b3d915062000415565b604051633e104c7760e01b8152600490fd5b604081019081106001600160401b038211176200047157604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b038211908210176200047157604052565b8015620004c25760ff81116200026b576001901b90565b50600190565b6040810192916000915b60028310620004e057505050565b600190825181526020809101920192019190620004d2565b60ff1663ffffffff0264ffffffffff918282169182036200026b578216019081116200026b579056fe608080604052600436101561001357600080fd5b600090813560e01c908163055575eb14611f0657508063079410db14611ec15780631096c30e14611e53578063122db15314611e2b57806313fb893214611e025780631a8cbcaa14611dac5780631b6ef3c514611d1d5780632b78657114611d005780632b7ac3f314611cd757806331e766a514611cb25780633364120a146118615780633364c4c8146116be578063343393b5146116795780633dfb88b214611621578063423f3e191461159e57806346e47f9a146115385780634d5da86b14610c2d57806358bfc37914610b0a5780635bb9399514610ad957806362a361bb14610aab57806362b31f1e14610a6657806364e0ece114610944578063652c76e414610906578063683f3dc3146108ea5780636b4575e2146107e9578063715018a61461078b5780637d0a81c8146107495780638a2a3dfb146106a95780638da5cb5b146106805780639cfced9714610620578063aab4a670146105db578063ac2f0074146105a8578063ac98e5df14610566578063b686872014610537578063bea140b314610437578063c8cf9ab2146103fe578063d7a71b9a146103cc578063df82635a14610391578063edbfe83f146102665763f2fde38b146101d957600080fd5b34610263576020366003190112610263576101f2612276565b6101fa612f04565b6001600160a01b0390811690811561024a57600454826001600160601b0360a01b821617600455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b604051631e4fbdf760e01b815260048101849052602490fd5b80fd5b50346102635760403660031901126102635736602312156102635761028a3661223d565b60405161029681612130565b6040516102a281612114565b610140918236833752604051906102b8826120de565b8382528360208093015281604051936102d085612114565b8236863780518552015182840152604051906102eb826120de565b7f171e826ad4a870fd925e0bf0e87884e70e080879c2205ef10114f28a3b6f6dd78252828201917f2bd407d897fbbca9f88adfd2d15252e69de8c1564eb4d3d27162e259172f1a1d83526040519461034286612130565b855261034e8186612da6565b6040519551969094865b600a831061037c575050506101a09550519084015251610160830152610180820152f35b81806001928b51815201990192019197610358565b503461026357806003193601126102635760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b50346102635760ff60406020926103e2366122b9565b908252600c855282822090825284522054166040519015158152f35b5034610263576020366003190112610263576020906040906001600160a01b03610426612276565b168152600b83522054604051908152f35b5034610263576060366003190112610263573660231215610263576040519061045f826120ad565b6064823682116104f7576004905b8282106105275750506040516304b98e1d60e31b815292829150600484015b600383106105105750505060208260648173Dc64a140Aa3E981100a9becA4E685f962f0cF6C95af490811561050457906104cc575b602090604051908152f35b506020813d6020116104fc575b816104e660209383612166565b810103126104f757602090516104c1565b600080fd5b3d91506104d9565b604051903d90823e3d90fd5b60019082518152602080910192019201919061048c565b813581526020918201910161046d565b5034610263578060031936011261026357604060025464ffffffffff825191818116835260281c166020820152f35b5034610263578060031936011261026357608060065460ff604051918181168352818160081c166020840152818160101c16604084015260181c166060820152f35b503461026357602036600319011261026357602090600435815260018252604060018060a01b0391205416604051908152f35b50346102635780600319360112610263576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346102635760a0366003190112610263573660231215610263576040516106478161214b565b60a4813682116104f7576020926004905b838210610671578461066984612e64565b604051908152f35b81358152908401908401610658565b50346102635780600319360112610263576004546040516001600160a01b039091168152602090f35b50346102635736600319016101808112610745576101401361026357604051906106d282612130565b36602312156102635750604051906106e982612114565b81610144923684116104f7576004905b84821061073557505081526040366101431901126104f7576020916106699160405191610725836120de565b3582526101643584830152612da6565b81358152602091820191016106f9565b5080fd5b503461026357608036600319011261026357602061066960405161076c816120ad565b61077536612187565b8152604435838201526064356040820152612d6a565b50346102635780600319360112610263576107a4612f04565b600480546001600160a01b031981169091556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5034610263576101403660031901126102635760803660231901126104f757604051610814816120f9565b60243560ff811681036104f757815260443560ff811681036104f757602082015260643560ff811681036104f757604082015260843560ff811681036104f757606082015260403660a31901126104f757604051610871816120de565b60a435815260c435602082015261088661228c565b61010435929091906001600160a01b03841684036104f757610124359460028610156102635760606108be8787878787600435612a39565b6040805182516001600160a01b0390811682526020808501518216908301529282015190921690820152f35b50346102635780600319360112610263576020604051600a8152f35b5034610263578060031936011261026357602060405160ff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346102635736600319016101008112610745576080136104f75760405161096b816120f9565b60043560ff811681036104f75781526024359060ff821682036104f757602081019182526044359060ff821682036104f757604081019182526064359260ff841684036104f7576060820193845260403660831901126104f7576040516109d1816120de565b6084358152602081019160a435835260c4359560018060a01b03958688168098036104f75761ff0060ff610a0361228c565b97610a0c612f04565b511663ff00000062ff00006006549651945160101b16945160181b169463ffffffff1916179160081b1617171760065551600755516008556001600160601b0360a01b928360095416176009551690600a541617600a5580f35b50346102635780600319360112610263576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5034610263576040366003190112610263573660231215610263576020610669610ad43661223d565b61291c565b5034610263576020610669610aed366122b9565b60405191610afa836120de565b604036843782528382015261291c565b50346102635760209081600319360112610263576004356001600160401b0381116107455736602382011215610745578060040135610b48816122a2565b91610b566040519384612166565b8183528483016024819360051b83010191368311610c295791869394916024879401905b828210610c1757505050604051838101809251909590845b818110610bfe57505050610bb481610bc594959603601f198101835282612166565b604051928392839251928391611f49565b8101039060025afa15610504577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001905106604051908152f35b8251885296860196899689965090920191600101610b92565b81358152879450908501908501610b7a565b8580fd5b50346102635760a0366003190112610263576004356001600160401b03811161074557610c5e903690600401612210565b906001600160401b036024351161153457366023602435011215611534576001600160401b0360243560040135116115345736602480356004013560051b8135010111611534576044356001600160401b03811161153057610cc4903690600401612210565b91906002608435101561152c57610cd9612f04565b8454600954600a54604051929592610d519290916001600160a01b039081169116610d03836120f9565b60ff6006548181168552818160081c166020860152818160101c16604086015260181c166060840152604051610d38816120de565b6007548152600854602082015260843593606435612a39565b9260018060a01b038451168752600b60205284604088205560405195602080880152610d9d87610d8f60408201602435600401356024803501612864565b03601f198101895288612166565b610da960643542612573565b9660405190610db782612114565b878252610dc53684866121af565b60208301526040820152610dda3685876121af565b60608201528560808201524260a08201528760c08201526024356004013560e0820152610e0c602435600401356122a2565b610e196040519182612166565b602480356004810135835201602082015b602480356004013560051b8135010182106114e6575050610100820152604051610e5381612130565b8981526101208201528689526005602052604089209080518255602081015180516001600160401b03811161138557610e9c81610e936001870154612344565b60018701612759565b6020918c601f831160011461147757610ecc93909183611162575b50508160011b916000199060031b1c19161790565b60018301555b604081015180516001600160401b03811161138557610f0181610ef86002870154612344565b60028701612759565b6020918c601f831160011461140857610f30939091836111625750508160011b916000199060031b1c19161790565b60028301555b606081015180516001600160401b03811161138557610f6581610f5c6003870154612344565b60038701612759565b6020918c601f831160011461139957610f94939091836111625750508160011b916000199060031b1c19161790565b60038301555b608081015180516004840180546001600160a01b03199081166001600160a01b039384161790915560208301516005860180548316918416919091179055604090920151600685018054909316911617905560a0810151600783015560c0810151600883015560e0810151600983015561010081015180519068010000000000000000821161138557600a84015482600a86015580831061130a575b50602001600a84018c5260208c208c915b83831061121c575050505061012001518051906001600160401b0382116112085761108282611079600b860154612344565b600b8601612759565b6020908b601f841160011461116d5793600b6110e585611126967f7532e9985b123ef8bda3bc40b1a4296f34238889a58a41de23df560b8bfb9bc69d9c9a9661114d9c9a9661113f9a926111625750508160011b916000199060031b1c19161790565b9101555b6040805189516001600160a01b0390811682526020808c0151821690830152998201519099169089015261010060608901526101008801916127a0565b8581036080870152602435600401356024803501612864565b9184830360a08601526127a0565b934260c083015260e08201528033940390a380f35b015190503880610eb7565b50600b84018c5260208c209190601f1984168d5b8181106111f057506001857f7532e9985b123ef8bda3bc40b1a4296f34238889a58a41de23df560b8bfb9bc69c9b999561114d9b999561113f999561112699600b96106111d7575b505050811b019101556110e9565b015160001960f88460031b161c191690553880806111c9565b92936020600181928786015181550195019301611181565b634e487b7160e01b8b52604160045260248bfd5b80518051906001600160401b0382116112f5578f906112458361123f8754612344565b87612759565b602091601f841160011461128b57836001959294602094879661127c94926111625750508160011b916000199060031b1c19161790565b85555b01920192019190611047565b9190601f19841686845260208420935b8181106112dd57509360209360019693879693838895106112c4575b505050811b01855561127f565b015160001960f88460031b161c191690553880806112b7565b9293602060018192878601518155019501930161129b565b50634e487b7160e01b8f52604160045260248ffd5b600a85018d5260208d20908382018e5b828401821061132b57505050611036565b906001916113398254612344565b80611348575b5050018e61131a565b601f81118414611360575050600081555b8f3861133f565b82825261137b601f60208420920160051c8201858301612742565b6000835555611359565b634e487b7160e01b8c52604160045260248cfd5b5091600385018d5260208d20908d935b601f19841685106113ed576001945083601f198116106113d4575b505050811b016003830155610f9a565b015160001960f88460031b161c191690553880806113c4565b818101518355602094850194600190930192909101906113a9565b5091600285018d5260208d20908d935b601f198416851061145c576001945083601f19811610611443575b505050811b016002830155610f36565b015160001960f88460031b161c19169055388080611433565b81810151835560209485019460019093019290910190611418565b5091600185018d5260208d20908d935b601f19841685106114cb576001945083601f198116106114b2575b505050811b016001830155610ed2565b015160001960f88460031b161c191690553880806114a2565b81810151835560209485019460019093019290910190611487565b81356001600160401b0381116115285760243501366043820112156115285760209161151d839236906044602482013591016121af565b815201910190610e2a565b8c80fd5b8480fd5b8380fd5b8280fd5b5034610263576020366003190112610263576001600160a01b0361155a612276565b16808252600b602052604082205482541115611586578160409160209352600b83522054604051908152f35b6024906040519063e64d908d60e01b82526004820152fd5b503461026357806003193601126102635764ffffffffff908160025460281c1690600180936001945b6115d8575b60206106698686612fb3565b90919360ff8082169185846115ec85612967565b16101561161957508114611605578201939190816115c7565b634e487b7160e01b85526011600452602485fd5b9550506115cc565b503461026357608036600319011261026357366023121561026357604051611648816120f9565b6084813682116104f7576020926004905b83821061166a5784610669846127c1565b81358152908401908401611659565b50346102635780600319360112610263576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5034610263576040366003190112610263576004356001600160401b03602435818111611530576116f3903690600401612210565b91906116fd612f04565b84548410156118485783855260209160058352600b6040872001908411611834576117328461172c8354612344565b83612759565b85601f85116001146117ac579161179b9161178786807f2cd30b9efd64638f847bef681e87dfbb567e261d02660c8166a92f33729ab33e9897968b916117a1575b508160011b916000199060031b1c19161790565b90555b6040519383859485528401916127a0565b0390a280f35b905084013538611773565b81875283872090601f198616885b81811061181d57509161179b9391877f2cd30b9efd64638f847bef681e87dfbb567e261d02660c8166a92f33729ab33e9897969410611803575b5050600185811b01905561178a565b830135600019600388901b60f8161c1916905538806117f4565b9192866001819286890135815501940192016117ba565b634e487b7160e01b86526041600452602486fd5b60405163a86ecdd560e01b815260048101859052602490fd5b50346102635760803660031901126102635761187c36612187565b6001600160401b03906044358281116115305761189d9036906004016121f5565b60643583811161152c576118b59036906004016121f5565b9082518552600c602052604085206020840151865260205260ff9360ff604087205416611ca05760025464ffffffffff7f00000000000000000000000000000000000000000000000000000000000000009160281c161015611c8e576119218451602086015190612f30565b15611c7c576001600160a01b03918691907f0000000000000000000000000000000000000000000000000000000000000000841690813b156115305783916119809160405195868094819363125c7dfb60e11b83523360048401612ecb565b03925af18015611c7157611c48575b50506119b491602091604051808095819463b36543a960e01b83523360048401612ecb565b03917f0000000000000000000000000000000000000000000000000000000000000000165afa908115611c3d578491611c0b575b50611a0c6040516119f8816120ad565b838152826020820152426040820152612d6a565b926002549364ffffffffff8560281c169060019586830164ffffffffff8111611bf55769ffffffffff00000000009060281b169069ffffffffff00000000001916176002559085879173Cf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9915b611af8575b5050505050611a8b64ffffffffff60025460281c16612eed565b7fd3c3cd829e4e37d5baaf10abace26b24e0046e20500c999380410f807edfcda0606084519260208601519464ffffffffff604051921682526020820152426040820152a380518352600c6020526020604084209101518352602052604082209060ff1982541617905580f35b64ffffffffff611b0882856132fb565b168952600393846020528060408b205588821615611bef57611b7794602091611b39611b3385612eed565b876132fb565b9164ffffffffff60405193611b4d856120de565b168d52835260408c2054825282820152604051809681926314d2f97b60e11b8352600483016128ee565b0381855af4938415611be457889486918b91611ba5575b5094938401169290811c647fffffffff1690611a6c565b955050506020843d602011611bdc575b81611bc260209383612166565b810103126104f7578488647fffffffff8196519150611b8e565b3d9150611bb5565b6040513d8b823e3d90fd5b50611a71565b634e487b7160e01b600052601160045260246000fd5b90506020813d602011611c35575b81611c2660209383612166565b810103126104f75751386119e8565b3d9150611c19565b6040513d86823e3d90fd5b8196929611611c5d576040529381602061198f565b634e487b7160e01b82526041600452602482fd5b6040513d89823e3d90fd5b6040516379fae7af60e01b8152600490fd5b60405163b984588b60e01b8152600490fd5b604051632e13e04560e01b8152600490fd5b5034610263578060031936011261026357604060075460085482519182526020820152f35b50346102635780600319360112610263576009546040516001600160a01b039091168152602090f35b503461026357806003193601126102635760209054604051908152f35b503461026357606036600319011261026357604435801515810361074557611d4a906024356004356125c6565b60405190602092602083016020845282518091526040840194602060408360051b870101940192955b828710611d805785850386f35b909192938280611d9c600193603f198a82030186528851611f91565b9601920196019592919092611d73565b503461026357602036600319011261026357600435908054821015611de957602091815260018252604060018060a01b0391205416604051908152f35b60405163a86ecdd560e01b815260048101839052602490fd5b5034610263578060031936011261026357600a546040516001600160a01b039091168152602090f35b5034610263578060031936011261026357602064ffffffffff60025460281c16604051908152f35b503461026357602036600319011261026357600435611e706122ee565b508154811015611ea957604082611e9192611ea59452600560205220612414565b604051918291602083526020830190611f91565b0390f35b6024906040519063a86ecdd560e01b82526004820152fd5b50346102635780600319360112610263576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b9050346107455781600319360112610745577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b60005b838110611f5c5750506000910152565b8181015183820152602001611f4c565b90602091611f8581518092818552858086019101611f49565b601f01601f1916010190565b91906101809083518152611fdd611fcb611fb960209485880151908087870152850190611f6c565b60408701518482036040860152611f6c565b60608601518382036060850152611f6c565b60808086015180516001600160a01b03908116928501929092526020810151821660a0850152604001511660c08301529360a081015160e083015260c081015190610100918284015260e08101519161012092838501528101519383870361014085015284518088528188019180808360051b8b01019701926000905b83821061208057505050505061207d949550015190610160818403910152611f6c565b90565b9091929397838061209e6001938e601f199082030186528c51611f6c565b9a01920192019093929161205a565b606081019081106001600160401b038211176120c857604052565b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b038211176120c857604052565b608081019081106001600160401b038211176120c857604052565b61014081019081106001600160401b038211176120c857604052565b602081019081106001600160401b038211176120c857604052565b60a081019081106001600160401b038211176120c857604052565b90601f801991011681019081106001600160401b038211176120c857604052565b60409060031901126104f757604051906121a0826120de565b60043582526024356020830152565b9291926001600160401b0382116120c857604051916121d8601f8201601f191660200184612166565b8294818452818301116104f7578281602093846000960137010152565b9080601f830112156104f75781602061207d933591016121af565b9181601f840112156104f7578235916001600160401b0383116104f757602083818601950101116104f757565b906040519161224b836120de565b826044916044116104f7576004905b82821061226657505050565b813581526020918201910161225a565b600435906001600160a01b03821682036104f757565b60e435906001600160a01b03821682036104f757565b6001600160401b0381116120c85760051b60200190565b60409060031901126104f7576004359060243590565b604051906122dc826120ad565b60006040838281528260208201520152565b604051906122fb82612114565b8160008152610120606091826020820152826040820152828082015261231f6122cf565b6080820152600060a0820152600060c0820152600060e0820152826101008201520152565b90600182811c92168015612374575b602083101461235e57565b634e487b7160e01b600052602260045260246000fd5b91607f1691612353565b80546000939261238d82612344565b918282526020936001916001811690816000146123f557506001146123b4575b5050505050565b90939495506000929192528360002092846000945b8386106123e1575050505001019038808080806123ad565b8054858701830152940193859082016123c9565b60ff19168685015250505090151560051b0101915038808080806123ad565b9060409182519061242482612114565b819381548352600181519061244782612440816001880161237e565b0383612166565b6020916020860152825161246981612462816002890161237e565b0382612166565b83860152825161248081612462816003890161237e565b60608601528251612490816120ad565b60048501546001600160a01b039081168252600586015481166020830152600686015416848201526080860152600784015460a0860152600884015460c0860152600984015460e0860152600a84018054906124eb826122a2565b936124f886519586612166565b828552602085019160005260206000206000925b8484106125445750505050505061012092612539859361254093610100600b98015251809681930161237e565b0384612166565b0152565b858381928a5161255881612462818961237e565b81520192019301929061250c565b91908203918211611bf557565b91908201809211611bf557565b6000198114611bf55760010190565b80511561259c5760200190565b634e487b7160e01b600052603260045260246000fd5b805182101561259c5760209160051b010190565b60001980820194939290918511611bf55780850294808604821490151715611bf5576125f29085612573565b93818501948511611bf55784916000938454968784101561272857871115612716575b61261f8385612566565b906001820180921161270257612634826122a2565b926040926126456040519586612166565b808552612654601f19916122a2565b01875b8181106126eb575050839887955b8781111561267857505050505050505050565b8084156126c1575b906126bc918a5260056020526126b6868b20986126a561269f82612580565b9a612414565b6126af828b6125b2565b52886125b2565b50612580565b612665565b506126cc8183612566565b8381019081111561268057634e487b7160e01b8a52601160045260248afd5b6020906126f66122ee565b82828901015201612657565b634e487b7160e01b86526011600452602486fd5b92508086018681116116055792612615565b50505050509091506040519061273d82612130565b815290565b81811061274d575050565b60008155600101612742565b9190601f811161276857505050565b612794926000526020600020906020601f840160051c83019310612796575b601f0160051c0190612742565b565b9091508190612787565b908060209392818452848401376000828201840152601f01601f1916010190565b60405163248f667760e01b81529060049060008284015b83821061284d5750505050602081608481735FC8d32690cc91D4c39d9d3abcBD16989F8757075af490811561284157600091612812575090565b90506020813d602011612839575b8161282d60209383612166565b810103126104f7575190565b3d9150612820565b6040513d6000823e3d90fd5b6001908351815260208091019301910190916127d8565b908281815260208091019360208360051b82010194846000925b85841061288f575050505050505090565b90919293949596601f198282030184528735601e19843603018112156104f75783018681019190356001600160401b0381116104f75780360383136104f7576128dd889283926001956127a0565b99019401940192959493919061287e565b6040810192916000915b6002831061290557505050565b6001908251815260208091019201920191906128f8565b602061293c91604051809381926314d2f97b60e11b8352600483016128ee565b038173Cf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc95af490811561284157600091612812575090565b80156129885760ff8111611bf5576001901b9064ffffffffff8211611bf557565b50600190565b801561298857600190602081108216604e82108316176129ef5781906005925b8082116129c657505081600019048111611bf5570290565b909280600019048111611bf5578184166129e6575b800292811c906129ae565b809202916129db565b905060050a90565b908160209103126104f757516001600160a01b03811681036104f75790565b906002821015612a235752565b634e487b7160e01b600052602160045260246000fd5b9594909195939293612a496122cf565b506000805493600185018255885195602092612a6a848c0198895190612f30565b15611c7c57604098838a80950186815160ff16612a869061298e565b926060810193845160ff16612a9a9061298e565b90895190612aa7826120de565b8152838101918252600160a01b6001900399519b63cb7cdec560e01b8d5260048d01525160248c01525160448b0152805160ff1660648b0152015160ff1660848901525160ff1660a48801525160ff1660c48701528b5160e48701528851610104870152306101248701528486857f00000000000000000000000000000000000000000000000000000000000000001681855a9261014493f1958615612d60578296612d41575b508380808c5193633634487360e01b8552169485600485015216968760248401521695866044830152336064830152612b8a6084830189612a16565b858260a48186897f0000000000000000000000000000000000000000000000000000000000000000165af1918215612d3757908592918492612d18575b508b519463431a717560e01b8652600486015260248501528660448501521690816064840152336084840152612c0060a4840188612a16565b848360c48184887f0000000000000000000000000000000000000000000000000000000000000000165af1928315612d0c5793612cd0937f60ae5b55fbe14a60c1522de273b7cf937d367c8395a811c3c6cc1eaced4700499997938c8460a09b98612cda9a9694612cdd575b508a81526001865220856001600160601b038c1b8254161790558c5194612c92866120ad565b855283850152168a830152819b51985199519586528501906040908160018060a01b0391828151168552826020820151166020860152015116910152565b6080830190612a16565ba3565b612cfe919450863d8811612d05575b612cf68183612166565b8101906129f7565b9238612c6c565b503d612cec565b508951903d90823e3d90fd5b612d30919250873d8911612d0557612cf68183612166565b9038612bc7565b8b513d85823e3d90fd5b612d59919650853d8711612d0557612cf68183612166565b9438612b4e565b8a513d84823e3d90fd5b61207d906040805191612d7c836120f9565b608036843780515183526020815101516020840152602081015182840152015160608201526127c1565b602061207d926040612e4e815194612dbd8661214b565b60a0368737805151865284815101518587015282815101518387015260608151015160608701526080815101516080870152610120835191612dfe8361214b565b60a036843760a081510151835260c0815101518784015260e081510151858401526101008151015160608401525101516080820152612e47835196612e42886120f9565b612e64565b8652612e64565b83850152815190840152015160608201526127c1565b604051630926f44b60e31b815290600090600483015b60058310612eb45750505060208160a481730165878A594ca255338adfa4d48449f69242Eb8F5af490811561284157600091612812575090565b600190825181526020809101920192019190612e7a565b6001600160a01b03909116815260406020820181905261207d92910190611f6c565b64ffffffffff9081166000190191908211611bf557565b6004546001600160a01b03163303612f1857565b60405163118cdaa760e01b8152336004820152602490fd5b907f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001808080858196099380098180828187620292fc090894620292f80909600108908082811115612f8e575b50600091612f8991612566565b081590565b9050828101809111611bf5576000612f7c565b60ff60019116019060ff8211611bf557565b919060ff92838216916020908184116132e95764ffffffffff918284169182156132d857612fe18891612fa1565b16613018612fee826122a2565b95604092612ffe84519889612166565b80885261300d601f19916122a2565b013685890137612eed565b9060019485808416156000146132a3575080831694818611611bf557869560005260038552826000205461304b8961258f565b52999592995b6000935b613070575b5050505050505061306c9293506125b2565b5190565b86849a9998979a168881101561329857858c881661315f576130ca916130a186519161309b836120de565b8b6125b2565b5181526130ad87613322565b828201528551809381926314d2f97b60e11b8352600483016128ee565b038173Cf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc95af490811561315457600091613127575b509986647fffffffff829d8a9b9c9d613117849c866131108c612fa1565b16906125b2565b525b821c16950116939a96613055565b908682813d831161314d575b61313d8183612166565b81010312610263575051866130f2565b503d613133565b84513d6000823e3d90fd5b5082828c61316c88612fa1565b161c1690647fffffffff8d891c168092116000146131c757509986647fffffffff829d856131a6849c9d9e9f6131a18b612fa1565b6132fb565b166000526003895286600020546131c18d866131108c612fa1565b52613119565b61322591508690846131e28f6131dc90612eed565b896132fb565b16600052600382526132078660002054918751926131ff846120de565b83528b6125b2565b51828201528551809381926314d2f97b60e11b8352600483016128ee565b038173Cf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc95af49081156131545760009161326b575b509986647fffffffff829d8a9b9c9d6131c1849c866131108c612fa1565b908682813d8311613291575b6132818183612166565b810103126102635750518661324d565b503d613277565b50869798995061305a565b947f0ef71f46e11a513c599eed9dd03576c33439bcfb1cee155316f90541e41649ba6132ce8961258f565b5299959299613051565b94505050505061207d919250613322565b604051633e104c7760e01b8152600490fd5b60ff1663ffffffff0264ffffffffff91828216918203611bf557821601908111611bf55790565b60ff1680156138db57600181146138b65760028114613891576003811461386c5760048114613847576005811461382257600681146137fd57600781146137d857600881146137b3576009811461378e57600a811461376957600b811461374457600c811461371f57600d81146136fa57600e81146136d557600f81146136b0576010811461368b57601181146136665760128114613641576013811461361c57601481146135f757601581146135d257601681146135ad57601781146135885760188114613563576019811461353e57601a811461351957601b81146134f457601c81146134cf57601d81146134aa57601e811461348557601f81146134605760201461343c576040516310a2ea0560e21b8152600490fd5b7f1d90601a0c76d2f39824f6dc198fb3b48cbd0231516c8f6208e56ea741c341f990565b507f216b9fa3ac3724cf1ec6caf5a66dd85cae3aee727e00d2a0a59f273df3401f1090565b507f2b59c2651b412c029efa38f835ac1b1b5bdaf89dcb2e4bc9219e7d77c65e776a90565b507f14b46e659dc4072fc64a18d44911c4a303b45f1296c3cb7dec77f269bee9b5df90565b507f0845dd838ca63b2f68775aac8513bd692d26f511698206f3c6ce2b4100dd8d8f90565b507f132e4ff3e4ba890f1610efd4d2f69700b825514d557b82663878a56e2acef41c90565b507f24cb019b59431c232413f66b041923214f7a8a7489caa05b66860f1c3c76d3b190565b507f1b6367322bac9f24889900d310e2feaa0021516fac77470aea078e89335d3fcf90565b507f19b336a1e0a933e2a8f97d97322dcee843a2d9a2401bece52a3a25ddd5bb6bc990565b507f1d71ada9e49baeb4a2cf26be37d3bc680554995ef6706105e93978ba71cacf9490565b507f2560496c1138c827f1efb407d0cdb9d6ec9539b0957dfb67de2776e6026d630f90565b507f2ce2c1fb109ad6574570826774ecfca3e04866bb5a3963962b873646db6641f390565b507f1713f3e3dc5e2393bd31ccc0cdd8601bdee3198cf34d566bb60cfab13e5a087390565b507f2c849a73ab21c9e88e1d711f221863e2a94eb58f3eb42dde575301451f3ec5c890565b507f1874217e8e1dbc51c571a2db1103bf47c3e66a59305ca48bbcee6ad1c8cc575190565b507f2b8342160822355808db759147a7d6f61de451bd5bb88f9db2eb406ea68b813890565b507f199cd1f5b757c285023767abbe9bbb318da4e1fd375b5a001b54a0f3901ea7d390565b507f128fb9ad5b2d8e694bec0888ff95609c15b2a96ae80a34946c953dc503e46fb690565b507f2ec047dd616221873c234f36461080c3e760644bb519ebdb49eb9645215e0edc90565b507f2582b5cdefe032d75373f0ede9171406137e93e7d44405a0b0a409c1c739138090565b507f1f336d6d45d293180c75964e99a7599d44cac2ad447c202c3e1973b0322cf99090565b507f05e0136534f74776d69646bd0bd94519e63af45734405f479382d8400514c1a690565b507f10f7b76489e9c36644736c33c600d1bcedd465fd0aff3027e67b02e13875272d90565b507f1e73f08f6e5e4bb9c2096cc4587526ebfd033c222f4a27e97119c867c36a0d3a90565b507f1ea63a974336db6c0423e719d3f0e11494266237dda3a40de3cb76104436635990565b507f0690bfb582c7502ff6d15d519740ecd73d652b7a14dc82bfd250613ee8e0407690565b507f30553f8216db90854953edd47602897f897104d5b0d65a5ce000981c51da32e090565b507f11dc55d21b17daf8e60253c2a43d519039ba968733cf7c9d5df6155939e1a6d890565b507f08e4b5d410c8de929132c214ea600b5f252fa14aabb97ea67cda5bb4e0ebeec890565b507f04265868d2e705f48d3ae49f7749e67a587dafdb569c1d7334675496046eaad690565b507f2a06fb0b739b402c34dc752d8417b9cd67b7f7cabe4b06b5d995053791fcede490565b507f06928e817d2804a3713efd102bae900c9ab3e8e0b0c6c20f8613bd3b0423a89190565b507f0ef71f46e11a513c599eed9dd03576c33439bcfb1cee155316f90541e41649ba9056fea264697066735822122018590c9644c413d15c6fd178c7525d5e7a355c40760295ed6cd819847f00b22764736f6c63430008180033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c908163055575eb14611f0657508063079410db14611ec15780631096c30e14611e53578063122db15314611e2b57806313fb893214611e025780631a8cbcaa14611dac5780631b6ef3c514611d1d5780632b78657114611d005780632b7ac3f314611cd757806331e766a514611cb25780633364120a146118615780633364c4c8146116be578063343393b5146116795780633dfb88b214611621578063423f3e191461159e57806346e47f9a146115385780634d5da86b14610c2d57806358bfc37914610b0a5780635bb9399514610ad957806362a361bb14610aab57806362b31f1e14610a6657806364e0ece114610944578063652c76e414610906578063683f3dc3146108ea5780636b4575e2146107e9578063715018a61461078b5780637d0a81c8146107495780638a2a3dfb146106a95780638da5cb5b146106805780639cfced9714610620578063aab4a670146105db578063ac2f0074146105a8578063ac98e5df14610566578063b686872014610537578063bea140b314610437578063c8cf9ab2146103fe578063d7a71b9a146103cc578063df82635a14610391578063edbfe83f146102665763f2fde38b146101d957600080fd5b34610263576020366003190112610263576101f2612276565b6101fa612f04565b6001600160a01b0390811690811561024a57600454826001600160601b0360a01b821617600455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b604051631e4fbdf760e01b815260048101849052602490fd5b80fd5b50346102635760403660031901126102635736602312156102635761028a3661223d565b60405161029681612130565b6040516102a281612114565b610140918236833752604051906102b8826120de565b8382528360208093015281604051936102d085612114565b8236863780518552015182840152604051906102eb826120de565b7f171e826ad4a870fd925e0bf0e87884e70e080879c2205ef10114f28a3b6f6dd78252828201917f2bd407d897fbbca9f88adfd2d15252e69de8c1564eb4d3d27162e259172f1a1d83526040519461034286612130565b855261034e8186612da6565b6040519551969094865b600a831061037c575050506101a09550519084015251610160830152610180820152f35b81806001928b51815201990192019197610358565b503461026357806003193601126102635760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b50346102635760ff60406020926103e2366122b9565b908252600c855282822090825284522054166040519015158152f35b5034610263576020366003190112610263576020906040906001600160a01b03610426612276565b168152600b83522054604051908152f35b5034610263576060366003190112610263573660231215610263576040519061045f826120ad565b6064823682116104f7576004905b8282106105275750506040516304b98e1d60e31b815292829150600484015b600383106105105750505060208260648173__$fa059fb1da6d850ca47ea49359bfe89f78$__5af490811561050457906104cc575b602090604051908152f35b506020813d6020116104fc575b816104e660209383612166565b810103126104f757602090516104c1565b600080fd5b3d91506104d9565b604051903d90823e3d90fd5b60019082518152602080910192019201919061048c565b813581526020918201910161046d565b5034610263578060031936011261026357604060025464ffffffffff825191818116835260281c166020820152f35b5034610263578060031936011261026357608060065460ff604051918181168352818160081c166020840152818160101c16604084015260181c166060820152f35b503461026357602036600319011261026357602090600435815260018252604060018060a01b0391205416604051908152f35b50346102635780600319360112610263576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346102635760a0366003190112610263573660231215610263576040516106478161214b565b60a4813682116104f7576020926004905b838210610671578461066984612e64565b604051908152f35b81358152908401908401610658565b50346102635780600319360112610263576004546040516001600160a01b039091168152602090f35b50346102635736600319016101808112610745576101401361026357604051906106d282612130565b36602312156102635750604051906106e982612114565b81610144923684116104f7576004905b84821061073557505081526040366101431901126104f7576020916106699160405191610725836120de565b3582526101643584830152612da6565b81358152602091820191016106f9565b5080fd5b503461026357608036600319011261026357602061066960405161076c816120ad565b61077536612187565b8152604435838201526064356040820152612d6a565b50346102635780600319360112610263576107a4612f04565b600480546001600160a01b031981169091556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5034610263576101403660031901126102635760803660231901126104f757604051610814816120f9565b60243560ff811681036104f757815260443560ff811681036104f757602082015260643560ff811681036104f757604082015260843560ff811681036104f757606082015260403660a31901126104f757604051610871816120de565b60a435815260c435602082015261088661228c565b61010435929091906001600160a01b03841684036104f757610124359460028610156102635760606108be8787878787600435612a39565b6040805182516001600160a01b0390811682526020808501518216908301529282015190921690820152f35b50346102635780600319360112610263576020604051600a8152f35b5034610263578060031936011261026357602060405160ff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346102635736600319016101008112610745576080136104f75760405161096b816120f9565b60043560ff811681036104f75781526024359060ff821682036104f757602081019182526044359060ff821682036104f757604081019182526064359260ff841684036104f7576060820193845260403660831901126104f7576040516109d1816120de565b6084358152602081019160a435835260c4359560018060a01b03958688168098036104f75761ff0060ff610a0361228c565b97610a0c612f04565b511663ff00000062ff00006006549651945160101b16945160181b169463ffffffff1916179160081b1617171760065551600755516008556001600160601b0360a01b928360095416176009551690600a541617600a5580f35b50346102635780600319360112610263576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5034610263576040366003190112610263573660231215610263576020610669610ad43661223d565b61291c565b5034610263576020610669610aed366122b9565b60405191610afa836120de565b604036843782528382015261291c565b50346102635760209081600319360112610263576004356001600160401b0381116107455736602382011215610745578060040135610b48816122a2565b91610b566040519384612166565b8183528483016024819360051b83010191368311610c295791869394916024879401905b828210610c1757505050604051838101809251909590845b818110610bfe57505050610bb481610bc594959603601f198101835282612166565b604051928392839251928391611f49565b8101039060025afa15610504577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001905106604051908152f35b8251885296860196899689965090920191600101610b92565b81358152879450908501908501610b7a565b8580fd5b50346102635760a0366003190112610263576004356001600160401b03811161074557610c5e903690600401612210565b906001600160401b036024351161153457366023602435011215611534576001600160401b0360243560040135116115345736602480356004013560051b8135010111611534576044356001600160401b03811161153057610cc4903690600401612210565b91906002608435101561152c57610cd9612f04565b8454600954600a54604051929592610d519290916001600160a01b039081169116610d03836120f9565b60ff6006548181168552818160081c166020860152818160101c16604086015260181c166060840152604051610d38816120de565b6007548152600854602082015260843593606435612a39565b9260018060a01b038451168752600b60205284604088205560405195602080880152610d9d87610d8f60408201602435600401356024803501612864565b03601f198101895288612166565b610da960643542612573565b9660405190610db782612114565b878252610dc53684866121af565b60208301526040820152610dda3685876121af565b60608201528560808201524260a08201528760c08201526024356004013560e0820152610e0c602435600401356122a2565b610e196040519182612166565b602480356004810135835201602082015b602480356004013560051b8135010182106114e6575050610100820152604051610e5381612130565b8981526101208201528689526005602052604089209080518255602081015180516001600160401b03811161138557610e9c81610e936001870154612344565b60018701612759565b6020918c601f831160011461147757610ecc93909183611162575b50508160011b916000199060031b1c19161790565b60018301555b604081015180516001600160401b03811161138557610f0181610ef86002870154612344565b60028701612759565b6020918c601f831160011461140857610f30939091836111625750508160011b916000199060031b1c19161790565b60028301555b606081015180516001600160401b03811161138557610f6581610f5c6003870154612344565b60038701612759565b6020918c601f831160011461139957610f94939091836111625750508160011b916000199060031b1c19161790565b60038301555b608081015180516004840180546001600160a01b03199081166001600160a01b039384161790915560208301516005860180548316918416919091179055604090920151600685018054909316911617905560a0810151600783015560c0810151600883015560e0810151600983015561010081015180519068010000000000000000821161138557600a84015482600a86015580831061130a575b50602001600a84018c5260208c208c915b83831061121c575050505061012001518051906001600160401b0382116112085761108282611079600b860154612344565b600b8601612759565b6020908b601f841160011461116d5793600b6110e585611126967f7532e9985b123ef8bda3bc40b1a4296f34238889a58a41de23df560b8bfb9bc69d9c9a9661114d9c9a9661113f9a926111625750508160011b916000199060031b1c19161790565b9101555b6040805189516001600160a01b0390811682526020808c0151821690830152998201519099169089015261010060608901526101008801916127a0565b8581036080870152602435600401356024803501612864565b9184830360a08601526127a0565b934260c083015260e08201528033940390a380f35b015190503880610eb7565b50600b84018c5260208c209190601f1984168d5b8181106111f057506001857f7532e9985b123ef8bda3bc40b1a4296f34238889a58a41de23df560b8bfb9bc69c9b999561114d9b999561113f999561112699600b96106111d7575b505050811b019101556110e9565b015160001960f88460031b161c191690553880806111c9565b92936020600181928786015181550195019301611181565b634e487b7160e01b8b52604160045260248bfd5b80518051906001600160401b0382116112f5578f906112458361123f8754612344565b87612759565b602091601f841160011461128b57836001959294602094879661127c94926111625750508160011b916000199060031b1c19161790565b85555b01920192019190611047565b9190601f19841686845260208420935b8181106112dd57509360209360019693879693838895106112c4575b505050811b01855561127f565b015160001960f88460031b161c191690553880806112b7565b9293602060018192878601518155019501930161129b565b50634e487b7160e01b8f52604160045260248ffd5b600a85018d5260208d20908382018e5b828401821061132b57505050611036565b906001916113398254612344565b80611348575b5050018e61131a565b601f81118414611360575050600081555b8f3861133f565b82825261137b601f60208420920160051c8201858301612742565b6000835555611359565b634e487b7160e01b8c52604160045260248cfd5b5091600385018d5260208d20908d935b601f19841685106113ed576001945083601f198116106113d4575b505050811b016003830155610f9a565b015160001960f88460031b161c191690553880806113c4565b818101518355602094850194600190930192909101906113a9565b5091600285018d5260208d20908d935b601f198416851061145c576001945083601f19811610611443575b505050811b016002830155610f36565b015160001960f88460031b161c19169055388080611433565b81810151835560209485019460019093019290910190611418565b5091600185018d5260208d20908d935b601f19841685106114cb576001945083601f198116106114b2575b505050811b016001830155610ed2565b015160001960f88460031b161c191690553880806114a2565b81810151835560209485019460019093019290910190611487565b81356001600160401b0381116115285760243501366043820112156115285760209161151d839236906044602482013591016121af565b815201910190610e2a565b8c80fd5b8480fd5b8380fd5b8280fd5b5034610263576020366003190112610263576001600160a01b0361155a612276565b16808252600b602052604082205482541115611586578160409160209352600b83522054604051908152f35b6024906040519063e64d908d60e01b82526004820152fd5b503461026357806003193601126102635764ffffffffff908160025460281c1690600180936001945b6115d8575b60206106698686612fb3565b90919360ff8082169185846115ec85612967565b16101561161957508114611605578201939190816115c7565b634e487b7160e01b85526011600452602485fd5b9550506115cc565b503461026357608036600319011261026357366023121561026357604051611648816120f9565b6084813682116104f7576020926004905b83821061166a5784610669846127c1565b81358152908401908401611659565b50346102635780600319360112610263576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5034610263576040366003190112610263576004356001600160401b03602435818111611530576116f3903690600401612210565b91906116fd612f04565b84548410156118485783855260209160058352600b6040872001908411611834576117328461172c8354612344565b83612759565b85601f85116001146117ac579161179b9161178786807f2cd30b9efd64638f847bef681e87dfbb567e261d02660c8166a92f33729ab33e9897968b916117a1575b508160011b916000199060031b1c19161790565b90555b6040519383859485528401916127a0565b0390a280f35b905084013538611773565b81875283872090601f198616885b81811061181d57509161179b9391877f2cd30b9efd64638f847bef681e87dfbb567e261d02660c8166a92f33729ab33e9897969410611803575b5050600185811b01905561178a565b830135600019600388901b60f8161c1916905538806117f4565b9192866001819286890135815501940192016117ba565b634e487b7160e01b86526041600452602486fd5b60405163a86ecdd560e01b815260048101859052602490fd5b50346102635760803660031901126102635761187c36612187565b6001600160401b03906044358281116115305761189d9036906004016121f5565b60643583811161152c576118b59036906004016121f5565b9082518552600c602052604085206020840151865260205260ff9360ff604087205416611ca05760025464ffffffffff7f00000000000000000000000000000000000000000000000000000000000000009160281c161015611c8e576119218451602086015190612f30565b15611c7c576001600160a01b03918691907f0000000000000000000000000000000000000000000000000000000000000000841690813b156115305783916119809160405195868094819363125c7dfb60e11b83523360048401612ecb565b03925af18015611c7157611c48575b50506119b491602091604051808095819463b36543a960e01b83523360048401612ecb565b03917f0000000000000000000000000000000000000000000000000000000000000000165afa908115611c3d578491611c0b575b50611a0c6040516119f8816120ad565b838152826020820152426040820152612d6a565b926002549364ffffffffff8560281c169060019586830164ffffffffff8111611bf55769ffffffffff00000000009060281b169069ffffffffff00000000001916176002559085879173__$1540826e134b1b69b7091c82576ee3aadd$__915b611af8575b5050505050611a8b64ffffffffff60025460281c16612eed565b7fd3c3cd829e4e37d5baaf10abace26b24e0046e20500c999380410f807edfcda0606084519260208601519464ffffffffff604051921682526020820152426040820152a380518352600c6020526020604084209101518352602052604082209060ff1982541617905580f35b64ffffffffff611b0882856132fb565b168952600393846020528060408b205588821615611bef57611b7794602091611b39611b3385612eed565b876132fb565b9164ffffffffff60405193611b4d856120de565b168d52835260408c2054825282820152604051809681926314d2f97b60e11b8352600483016128ee565b0381855af4938415611be457889486918b91611ba5575b5094938401169290811c647fffffffff1690611a6c565b955050506020843d602011611bdc575b81611bc260209383612166565b810103126104f7578488647fffffffff8196519150611b8e565b3d9150611bb5565b6040513d8b823e3d90fd5b50611a71565b634e487b7160e01b600052601160045260246000fd5b90506020813d602011611c35575b81611c2660209383612166565b810103126104f75751386119e8565b3d9150611c19565b6040513d86823e3d90fd5b8196929611611c5d576040529381602061198f565b634e487b7160e01b82526041600452602482fd5b6040513d89823e3d90fd5b6040516379fae7af60e01b8152600490fd5b60405163b984588b60e01b8152600490fd5b604051632e13e04560e01b8152600490fd5b5034610263578060031936011261026357604060075460085482519182526020820152f35b50346102635780600319360112610263576009546040516001600160a01b039091168152602090f35b503461026357806003193601126102635760209054604051908152f35b503461026357606036600319011261026357604435801515810361074557611d4a906024356004356125c6565b60405190602092602083016020845282518091526040840194602060408360051b870101940192955b828710611d805785850386f35b909192938280611d9c600193603f198a82030186528851611f91565b9601920196019592919092611d73565b503461026357602036600319011261026357600435908054821015611de957602091815260018252604060018060a01b0391205416604051908152f35b60405163a86ecdd560e01b815260048101839052602490fd5b5034610263578060031936011261026357600a546040516001600160a01b039091168152602090f35b5034610263578060031936011261026357602064ffffffffff60025460281c16604051908152f35b503461026357602036600319011261026357600435611e706122ee565b508154811015611ea957604082611e9192611ea59452600560205220612414565b604051918291602083526020830190611f91565b0390f35b6024906040519063a86ecdd560e01b82526004820152fd5b50346102635780600319360112610263576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b9050346107455781600319360112610745577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b60005b838110611f5c5750506000910152565b8181015183820152602001611f4c565b90602091611f8581518092818552858086019101611f49565b601f01601f1916010190565b91906101809083518152611fdd611fcb611fb960209485880151908087870152850190611f6c565b60408701518482036040860152611f6c565b60608601518382036060850152611f6c565b60808086015180516001600160a01b03908116928501929092526020810151821660a0850152604001511660c08301529360a081015160e083015260c081015190610100918284015260e08101519161012092838501528101519383870361014085015284518088528188019180808360051b8b01019701926000905b83821061208057505050505061207d949550015190610160818403910152611f6c565b90565b9091929397838061209e6001938e601f199082030186528c51611f6c565b9a01920192019093929161205a565b606081019081106001600160401b038211176120c857604052565b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b038211176120c857604052565b608081019081106001600160401b038211176120c857604052565b61014081019081106001600160401b038211176120c857604052565b602081019081106001600160401b038211176120c857604052565b60a081019081106001600160401b038211176120c857604052565b90601f801991011681019081106001600160401b038211176120c857604052565b60409060031901126104f757604051906121a0826120de565b60043582526024356020830152565b9291926001600160401b0382116120c857604051916121d8601f8201601f191660200184612166565b8294818452818301116104f7578281602093846000960137010152565b9080601f830112156104f75781602061207d933591016121af565b9181601f840112156104f7578235916001600160401b0383116104f757602083818601950101116104f757565b906040519161224b836120de565b826044916044116104f7576004905b82821061226657505050565b813581526020918201910161225a565b600435906001600160a01b03821682036104f757565b60e435906001600160a01b03821682036104f757565b6001600160401b0381116120c85760051b60200190565b60409060031901126104f7576004359060243590565b604051906122dc826120ad565b60006040838281528260208201520152565b604051906122fb82612114565b8160008152610120606091826020820152826040820152828082015261231f6122cf565b6080820152600060a0820152600060c0820152600060e0820152826101008201520152565b90600182811c92168015612374575b602083101461235e57565b634e487b7160e01b600052602260045260246000fd5b91607f1691612353565b80546000939261238d82612344565b918282526020936001916001811690816000146123f557506001146123b4575b5050505050565b90939495506000929192528360002092846000945b8386106123e1575050505001019038808080806123ad565b8054858701830152940193859082016123c9565b60ff19168685015250505090151560051b0101915038808080806123ad565b9060409182519061242482612114565b819381548352600181519061244782612440816001880161237e565b0383612166565b6020916020860152825161246981612462816002890161237e565b0382612166565b83860152825161248081612462816003890161237e565b60608601528251612490816120ad565b60048501546001600160a01b039081168252600586015481166020830152600686015416848201526080860152600784015460a0860152600884015460c0860152600984015460e0860152600a84018054906124eb826122a2565b936124f886519586612166565b828552602085019160005260206000206000925b8484106125445750505050505061012092612539859361254093610100600b98015251809681930161237e565b0384612166565b0152565b858381928a5161255881612462818961237e565b81520192019301929061250c565b91908203918211611bf557565b91908201809211611bf557565b6000198114611bf55760010190565b80511561259c5760200190565b634e487b7160e01b600052603260045260246000fd5b805182101561259c5760209160051b010190565b60001980820194939290918511611bf55780850294808604821490151715611bf5576125f29085612573565b93818501948511611bf55784916000938454968784101561272857871115612716575b61261f8385612566565b906001820180921161270257612634826122a2565b926040926126456040519586612166565b808552612654601f19916122a2565b01875b8181106126eb575050839887955b8781111561267857505050505050505050565b8084156126c1575b906126bc918a5260056020526126b6868b20986126a561269f82612580565b9a612414565b6126af828b6125b2565b52886125b2565b50612580565b612665565b506126cc8183612566565b8381019081111561268057634e487b7160e01b8a52601160045260248afd5b6020906126f66122ee565b82828901015201612657565b634e487b7160e01b86526011600452602486fd5b92508086018681116116055792612615565b50505050509091506040519061273d82612130565b815290565b81811061274d575050565b60008155600101612742565b9190601f811161276857505050565b612794926000526020600020906020601f840160051c83019310612796575b601f0160051c0190612742565b565b9091508190612787565b908060209392818452848401376000828201840152601f01601f1916010190565b60405163248f667760e01b81529060049060008284015b83821061284d575050505060208160848173__$e61c65d9562aef5fa6ab22c0f787cf1e30$__5af490811561284157600091612812575090565b90506020813d602011612839575b8161282d60209383612166565b810103126104f7575190565b3d9150612820565b6040513d6000823e3d90fd5b6001908351815260208091019301910190916127d8565b908281815260208091019360208360051b82010194846000925b85841061288f575050505050505090565b90919293949596601f198282030184528735601e19843603018112156104f75783018681019190356001600160401b0381116104f75780360383136104f7576128dd889283926001956127a0565b99019401940192959493919061287e565b6040810192916000915b6002831061290557505050565b6001908251815260208091019201920191906128f8565b602061293c91604051809381926314d2f97b60e11b8352600483016128ee565b038173__$1540826e134b1b69b7091c82576ee3aadd$__5af490811561284157600091612812575090565b80156129885760ff8111611bf5576001901b9064ffffffffff8211611bf557565b50600190565b801561298857600190602081108216604e82108316176129ef5781906005925b8082116129c657505081600019048111611bf5570290565b909280600019048111611bf5578184166129e6575b800292811c906129ae565b809202916129db565b905060050a90565b908160209103126104f757516001600160a01b03811681036104f75790565b906002821015612a235752565b634e487b7160e01b600052602160045260246000fd5b9594909195939293612a496122cf565b506000805493600185018255885195602092612a6a848c0198895190612f30565b15611c7c57604098838a80950186815160ff16612a869061298e565b926060810193845160ff16612a9a9061298e565b90895190612aa7826120de565b8152838101918252600160a01b6001900399519b63cb7cdec560e01b8d5260048d01525160248c01525160448b0152805160ff1660648b0152015160ff1660848901525160ff1660a48801525160ff1660c48701528b5160e48701528851610104870152306101248701528486857f00000000000000000000000000000000000000000000000000000000000000001681855a9261014493f1958615612d60578296612d41575b508380808c5193633634487360e01b8552169485600485015216968760248401521695866044830152336064830152612b8a6084830189612a16565b858260a48186897f0000000000000000000000000000000000000000000000000000000000000000165af1918215612d3757908592918492612d18575b508b519463431a717560e01b8652600486015260248501528660448501521690816064840152336084840152612c0060a4840188612a16565b848360c48184887f0000000000000000000000000000000000000000000000000000000000000000165af1928315612d0c5793612cd0937f60ae5b55fbe14a60c1522de273b7cf937d367c8395a811c3c6cc1eaced4700499997938c8460a09b98612cda9a9694612cdd575b508a81526001865220856001600160601b038c1b8254161790558c5194612c92866120ad565b855283850152168a830152819b51985199519586528501906040908160018060a01b0391828151168552826020820151166020860152015116910152565b6080830190612a16565ba3565b612cfe919450863d8811612d05575b612cf68183612166565b8101906129f7565b9238612c6c565b503d612cec565b508951903d90823e3d90fd5b612d30919250873d8911612d0557612cf68183612166565b9038612bc7565b8b513d85823e3d90fd5b612d59919650853d8711612d0557612cf68183612166565b9438612b4e565b8a513d84823e3d90fd5b61207d906040805191612d7c836120f9565b608036843780515183526020815101516020840152602081015182840152015160608201526127c1565b602061207d926040612e4e815194612dbd8661214b565b60a0368737805151865284815101518587015282815101518387015260608151015160608701526080815101516080870152610120835191612dfe8361214b565b60a036843760a081510151835260c0815101518784015260e081510151858401526101008151015160608401525101516080820152612e47835196612e42886120f9565b612e64565b8652612e64565b83850152815190840152015160608201526127c1565b604051630926f44b60e31b815290600090600483015b60058310612eb45750505060208160a48173__$46fbdf6658faf65265971bdad66851b86c$__5af490811561284157600091612812575090565b600190825181526020809101920192019190612e7a565b6001600160a01b03909116815260406020820181905261207d92910190611f6c565b64ffffffffff9081166000190191908211611bf557565b6004546001600160a01b03163303612f1857565b60405163118cdaa760e01b8152336004820152602490fd5b907f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001808080858196099380098180828187620292fc090894620292f80909600108908082811115612f8e575b50600091612f8991612566565b081590565b9050828101809111611bf5576000612f7c565b60ff60019116019060ff8211611bf557565b919060ff92838216916020908184116132e95764ffffffffff918284169182156132d857612fe18891612fa1565b16613018612fee826122a2565b95604092612ffe84519889612166565b80885261300d601f19916122a2565b013685890137612eed565b9060019485808416156000146132a3575080831694818611611bf557869560005260038552826000205461304b8961258f565b52999592995b6000935b613070575b5050505050505061306c9293506125b2565b5190565b86849a9998979a168881101561329857858c881661315f576130ca916130a186519161309b836120de565b8b6125b2565b5181526130ad87613322565b828201528551809381926314d2f97b60e11b8352600483016128ee565b038173__$1540826e134b1b69b7091c82576ee3aadd$__5af490811561315457600091613127575b509986647fffffffff829d8a9b9c9d613117849c866131108c612fa1565b16906125b2565b525b821c16950116939a96613055565b908682813d831161314d575b61313d8183612166565b81010312610263575051866130f2565b503d613133565b84513d6000823e3d90fd5b5082828c61316c88612fa1565b161c1690647fffffffff8d891c168092116000146131c757509986647fffffffff829d856131a6849c9d9e9f6131a18b612fa1565b6132fb565b166000526003895286600020546131c18d866131108c612fa1565b52613119565b61322591508690846131e28f6131dc90612eed565b896132fb565b16600052600382526132078660002054918751926131ff846120de565b83528b6125b2565b51828201528551809381926314d2f97b60e11b8352600483016128ee565b038173__$1540826e134b1b69b7091c82576ee3aadd$__5af49081156131545760009161326b575b509986647fffffffff829d8a9b9c9d6131c1849c866131108c612fa1565b908682813d8311613291575b6132818183612166565b810103126102635750518661324d565b503d613277565b50869798995061305a565b947f0ef71f46e11a513c599eed9dd03576c33439bcfb1cee155316f90541e41649ba6132ce8961258f565b5299959299613051565b94505050505061207d919250613322565b604051633e104c7760e01b8152600490fd5b60ff1663ffffffff0264ffffffffff91828216918203611bf557821601908111611bf55790565b60ff1680156138db57600181146138b65760028114613891576003811461386c5760048114613847576005811461382257600681146137fd57600781146137d857600881146137b3576009811461378e57600a811461376957600b811461374457600c811461371f57600d81146136fa57600e81146136d557600f81146136b0576010811461368b57601181146136665760128114613641576013811461361c57601481146135f757601581146135d257601681146135ad57601781146135885760188114613563576019811461353e57601a811461351957601b81146134f457601c81146134cf57601d81146134aa57601e811461348557601f81146134605760201461343c576040516310a2ea0560e21b8152600490fd5b7f1d90601a0c76d2f39824f6dc198fb3b48cbd0231516c8f6208e56ea741c341f990565b507f216b9fa3ac3724cf1ec6caf5a66dd85cae3aee727e00d2a0a59f273df3401f1090565b507f2b59c2651b412c029efa38f835ac1b1b5bdaf89dcb2e4bc9219e7d77c65e776a90565b507f14b46e659dc4072fc64a18d44911c4a303b45f1296c3cb7dec77f269bee9b5df90565b507f0845dd838ca63b2f68775aac8513bd692d26f511698206f3c6ce2b4100dd8d8f90565b507f132e4ff3e4ba890f1610efd4d2f69700b825514d557b82663878a56e2acef41c90565b507f24cb019b59431c232413f66b041923214f7a8a7489caa05b66860f1c3c76d3b190565b507f1b6367322bac9f24889900d310e2feaa0021516fac77470aea078e89335d3fcf90565b507f19b336a1e0a933e2a8f97d97322dcee843a2d9a2401bece52a3a25ddd5bb6bc990565b507f1d71ada9e49baeb4a2cf26be37d3bc680554995ef6706105e93978ba71cacf9490565b507f2560496c1138c827f1efb407d0cdb9d6ec9539b0957dfb67de2776e6026d630f90565b507f2ce2c1fb109ad6574570826774ecfca3e04866bb5a3963962b873646db6641f390565b507f1713f3e3dc5e2393bd31ccc0cdd8601bdee3198cf34d566bb60cfab13e5a087390565b507f2c849a73ab21c9e88e1d711f221863e2a94eb58f3eb42dde575301451f3ec5c890565b507f1874217e8e1dbc51c571a2db1103bf47c3e66a59305ca48bbcee6ad1c8cc575190565b507f2b8342160822355808db759147a7d6f61de451bd5bb88f9db2eb406ea68b813890565b507f199cd1f5b757c285023767abbe9bbb318da4e1fd375b5a001b54a0f3901ea7d390565b507f128fb9ad5b2d8e694bec0888ff95609c15b2a96ae80a34946c953dc503e46fb690565b507f2ec047dd616221873c234f36461080c3e760644bb519ebdb49eb9645215e0edc90565b507f2582b5cdefe032d75373f0ede9171406137e93e7d44405a0b0a409c1c739138090565b507f1f336d6d45d293180c75964e99a7599d44cac2ad447c202c3e1973b0322cf99090565b507f05e0136534f74776d69646bd0bd94519e63af45734405f479382d8400514c1a690565b507f10f7b76489e9c36644736c33c600d1bcedd465fd0aff3027e67b02e13875272d90565b507f1e73f08f6e5e4bb9c2096cc4587526ebfd033c222f4a27e97119c867c36a0d3a90565b507f1ea63a974336db6c0423e719d3f0e11494266237dda3a40de3cb76104436635990565b507f0690bfb582c7502ff6d15d519740ecd73d652b7a14dc82bfd250613ee8e0407690565b507f30553f8216db90854953edd47602897f897104d5b0d65a5ce000981c51da32e090565b507f11dc55d21b17daf8e60253c2a43d519039ba968733cf7c9d5df6155939e1a6d890565b507f08e4b5d410c8de929132c214ea600b5f252fa14aabb97ea67cda5bb4e0ebeec890565b507f04265868d2e705f48d3ae49f7749e67a587dafdb569c1d7334675496046eaad690565b507f2a06fb0b739b402c34dc752d8417b9cd67b7f7cabe4b06b5d995053791fcede490565b507f06928e817d2804a3713efd102bae900c9ab3e8e0b0c6c20f8613bd3b0423a89190565b507f0ef71f46e11a513c599eed9dd03576c33439bcfb1cee155316f90541e41649ba9056fea264697066735822122018590c9644c413d15c6fd178c7525d5e7a355c40760295ed6cd819847f00b22764736f6c63430008180033",
  "libraries": {
    "PoseidonT4": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "PoseidonT3": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "PoseidonT5": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
    "PoseidonT6": "0x0165878A594ca255338adfa4d48449f69242Eb8F"
  },
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "deployPoll(uint256,(uint8,uint8,uint8,uint8),(uint256,uint256),address,address,uint8)": {
        "params": {
          "_coordinatorPubKey": "The coordinator's public key",
          "_duration": "How long should the Poll last for",
          "_mode": "Voting mode",
          "_treeDepths": "The depth of the Merkle trees",
          "_verifier": "The Verifier Contract",
          "_vkRegistry": "The VkRegistry Contract"
        },
        "returns": {
          "pollAddr": "a new Poll contract address"
        }
      },
      "getPoll(uint256)": {
        "params": {
          "_pollId": "The identifier of the Poll to retrieve"
        },
        "returns": {
          "poll": "The Poll contract object"
        }
      },
      "getStateTreeRoot()": {
        "returns": {
          "root": "The Merkle root"
        }
      },
      "hash2(uint256[2])": {
        "params": {
          "array": "An array of two uint256 elements."
        },
        "returns": {
          "result": "The Poseidon hash of the two elements."
        }
      },
      "hash3(uint256[3])": {
        "params": {
          "array": "An array of three uint256 elements."
        },
        "returns": {
          "result": "The Poseidon hash of the three elements."
        }
      },
      "hash4(uint256[4])": {
        "params": {
          "array": "An array of four uint256 elements."
        },
        "returns": {
          "result": "The Poseidon hash of the four elements."
        }
      },
      "hash5(uint256[5])": {
        "params": {
          "array": "An array of five uint256 elements."
        },
        "returns": {
          "result": "The Poseidon hash of the five elements."
        }
      },
      "hashLeftRight(uint256,uint256)": {
        "params": {
          "left": "the first element to hash.",
          "right": "the second element to hash."
        },
        "returns": {
          "result": "The Poseidon hash of the two elements."
        }
      },
      "hashMessageAndEncPubKey((uint256[10]),(uint256,uint256))": {
        "params": {
          "_encPubKey": "the encryption public key to be hashed",
          "_message": "the message to be hashed"
        },
        "returns": {
          "msgHash": "The hash of the message and the encryption public key"
        }
      },
      "hashStateLeaf(((uint256,uint256),uint256,uint256))": {
        "params": {
          "_stateLeaf": "the state leaf to be hashed"
        },
        "returns": {
          "ciphertext": "The hash of the state leaf"
        }
      },
      "numSignUps()": {
        "returns": {
          "signUps": "numsignUps The number of signups"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "padAndHashMessage(uint256[2])": {
        "params": {
          "dataToPad": "the data to be padded"
        },
        "returns": {
          "message": "The padded message",
          "msgHash": "The hash of the padded message and encryption key",
          "padKey": "The padding public key"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "sha256Hash(uint256[])": {
        "params": {
          "array": "The array of uint256 elements."
        },
        "returns": {
          "result": "The SHA256 hash of the array."
        }
      },
      "signUp((uint256,uint256),bytes,bytes)": {
        "params": {
          "_initialVoiceCreditProxyData": "Data to pass to the     InitialVoiceCreditProxy, which allows it to determine how many voice     credits this user should have.",
          "_pubKey": "The user's desired public key.",
          "_signUpGatekeeperData": "Data to pass to the sign-up gatekeeper's     register() function. For instance, the POAPGatekeeper or     SignUpTokenGatekeeper requires this value to be the ABI-encoded     token ID."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "MACI - Minimum Anti-Collusion Infrastructure Version 1",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "DefaultZeroBadIndex()": [
        {
          "notice": "Custom errors"
        }
      ],
      "InvalidMessage()": [
        {
          "notice": "custom errors"
        }
      ],
      "PoseidonHashLibrariesNotLinked()": [
        {
          "notice": "custom errors"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "MESSAGE_DATA_LENGTH()": {
        "notice": "the length of a MACI message"
      },
      "deployPoll(uint256,(uint8,uint8,uint8,uint8),(uint256,uint256),address,address,uint8)": {
        "notice": "Deploy a new Poll contract."
      },
      "getPoll(uint256)": {
        "notice": "Get the Poll details"
      },
      "getStateTreeRoot()": {
        "notice": "Return the main root of the StateAq contract"
      },
      "hash2(uint256[2])": {
        "notice": "Computes the Poseidon hash of two uint256 elements."
      },
      "hash3(uint256[3])": {
        "notice": "Computes the Poseidon hash of three uint256 elements."
      },
      "hash4(uint256[4])": {
        "notice": "Computes the Poseidon hash of four uint256 elements."
      },
      "hash5(uint256[5])": {
        "notice": "Computes the Poseidon hash of five uint256 elements."
      },
      "hashLeftRight(uint256,uint256)": {
        "notice": "Computes the Poseidon hash of two uint256 elements."
      },
      "hashMessageAndEncPubKey((uint256[10]),(uint256,uint256))": {
        "notice": "An utility function used to hash a MACI message and an encryption public key"
      },
      "hashStateLeaf(((uint256,uint256),uint256,uint256))": {
        "notice": "An utility function used to hash a state leaf"
      },
      "initialVoiceCreditProxy()": {
        "notice": "The contract which provides the values of the initial voice credit balance per user"
      },
      "lazyIMTData()": {
        "notice": "The state tree. Represents a mapping between each user's public key and their voice credit balance."
      },
      "messageProcessorFactory()": {
        "notice": "Factory contract that deploy a MessageProcessor contract"
      },
      "nextPollId()": {
        "notice": "Each poll has an incrementing ID"
      },
      "numSignUps()": {
        "notice": "Get the number of signups"
      },
      "padAndHashMessage(uint256[2])": {
        "notice": "An utility function used to pad and hash a MACI message"
      },
      "pollFactory()": {
        "notice": "Factory contract that deploy a Poll contract"
      },
      "polls(uint256)": {
        "notice": "A mapping of poll IDs to Poll contracts."
      },
      "sha256Hash(uint256[])": {
        "notice": "Computes the SHA256 hash of an array of uint256 elements."
      },
      "signUp((uint256,uint256),bytes,bytes)": {
        "notice": "Allows any eligible user sign up. The sign-up gatekeeper should prevent double sign-ups or ineligible users from doing so.  This function will only succeed if the sign-up deadline has not passed. It also enqueues a fresh state leaf into the state AccQueue."
      },
      "signUpGatekeeper()": {
        "notice": "Address of the SignUpGatekeeper, a contract which determines whether a user may sign up to vote"
      },
      "stateTreeDepth()": {
        "notice": "The state tree depth is fixed. As such it should be as large as feasible so that there can be as many users as possible.  i.e. 2 ** 23 = 8388608 this should also match the parameter of the circom circuits.IMPORTANT: remember to change the ballot tree depth in contracts/ts/genEmptyBallotRootsContract.ts file if we change the state tree depth!"
      },
      "tallyFactory()": {
        "notice": "Factory contract that deploy a Tally contract"
      }
    },
    "notice": "A contract which allows users to sign up, and deploy new polls",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 715,
        "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
        "label": "nextPollId",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 720,
        "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
        "label": "polls",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 736,
        "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
        "label": "lazyIMTData",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(LazyIMTData)2899_storage"
      },
      {
        "astId": 8,
        "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
        "label": "_owner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 228,
        "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
        "label": "_polls",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(PollData)223_storage)"
      },
      {
        "astId": 231,
        "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
        "label": "treeDepths",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(TreeDepths)3686_storage"
      },
      {
        "astId": 234,
        "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
        "label": "coordinatorPubKey",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(PubKey)3659_storage"
      },
      {
        "astId": 236,
        "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
        "label": "verifier",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 238,
        "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
        "label": "vkRegistry",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 242,
        "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
        "label": "pollIds",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 274,
        "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
        "label": "isPublicKeyRegistered",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_uint256,t_struct(PollData)223_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MACIWrapper.PollData)",
        "numberOfBytes": "32",
        "value": "t_struct(PollData)223_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(LazyIMTData)2899_storage": {
        "encoding": "inplace",
        "label": "struct LazyIMTData",
        "members": [
          {
            "astId": 2892,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "maxIndex",
            "offset": 0,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 2894,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "numberOfLeaves",
            "offset": 5,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 2898,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "elements",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PollContracts)752_storage": {
        "encoding": "inplace",
        "label": "struct MACI.PollContracts",
        "members": [
          {
            "astId": 747,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "poll",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 749,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "messageProcessor",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 751,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "tally",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PollData)223_storage": {
        "encoding": "inplace",
        "label": "struct MACIWrapper.PollData",
        "members": [
          {
            "astId": 202,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 204,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 206,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "encodedOptions",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          },
          {
            "astId": 208,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "metadata",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 211,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "pollContracts",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(PollContracts)752_storage"
          },
          {
            "astId": 213,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "startTime",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 215,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "endTime",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 217,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "numOfOptions",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 220,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "options",
            "offset": 0,
            "slot": "10",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 222,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "tallyJsonCID",
            "offset": 0,
            "slot": "11",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(PubKey)3659_storage": {
        "encoding": "inplace",
        "label": "struct DomainObjs.PubKey",
        "members": [
          {
            "astId": 3656,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "x",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3658,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "y",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TreeDepths)3686_storage": {
        "encoding": "inplace",
        "label": "struct Params.TreeDepths",
        "members": [
          {
            "astId": 3679,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "intStateTreeDepth",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3681,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "messageTreeSubDepth",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3683,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "messageTreeDepth",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3685,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "voteOptionTreeDepth",
            "offset": 3,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}