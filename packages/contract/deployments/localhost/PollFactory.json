{
  "address": "0x59b670e9fA9D0A427751Af201D676719a970857b",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidMaxValues",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MESSAGE_DATA_LENGTH",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maxMessages",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxVoteOptions",
              "type": "uint256"
            }
          ],
          "internalType": "struct Params.MaxValues",
          "name": "_maxValues",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "intStateTreeDepth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "messageTreeSubDepth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "messageTreeDepth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "voteOptionTreeDepth",
              "type": "uint8"
            }
          ],
          "internalType": "struct Params.TreeDepths",
          "name": "_treeDepths",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct DomainObjs.PubKey",
          "name": "_coordinatorPubKey",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_maci",
          "type": "address"
        },
        {
          "internalType": "contract TopupCredit",
          "name": "_topupCredit",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pollOwner",
          "type": "address"
        }
      ],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "address",
          "name": "pollAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa31941dd79f24238fee8a43aa2a31b44e1c41f37e63da475a02d85a4dcdb820c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x59b670e9fA9D0A427751Af201D676719a970857b",
    "transactionIndex": 0,
    "gasUsed": "4219104",
    "logsBloom": "0x
    "blockHash": "0x355535a996c08bbce57575c7709bba7124d4df987d29899ff35e779c288e020b",
    "transactionHash": "0xa31941dd79f24238fee8a43aa2a31b44e1c41f37e63da475a02d85a4dcdb820c",
    "logs": [],
    "blockNumber": 42,
    "cumulativeGasUsed": "4219104",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d4edc97ed9e4f18935e5ac94c4119edc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidMaxValues\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MESSAGE_DATA_LENGTH\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxMessages\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxVoteOptions\",\"type\":\"uint256\"}],\"internalType\":\"struct Params.MaxValues\",\"name\":\"_maxValues\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"intStateTreeDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"messageTreeSubDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"messageTreeDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"voteOptionTreeDepth\",\"type\":\"uint8\"}],\"internalType\":\"struct Params.TreeDepths\",\"name\":\"_treeDepths\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainObjs.PubKey\",\"name\":\"_coordinatorPubKey\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_maci\",\"type\":\"address\"},{\"internalType\":\"contract TopupCredit\",\"name\":\"_topupCredit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pollOwner\",\"type\":\"address\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pollAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deploy(uint256,(uint256,uint256),(uint8,uint8,uint8,uint8),(uint256,uint256),address,address,address)\":{\"params\":{\"_coordinatorPubKey\":\"The coordinator's public key\",\"_duration\":\"The duration of the poll\",\"_maci\":\"The MACI contract interface reference\",\"_maxValues\":\"The max values for the poll\",\"_pollOwner\":\"The owner of the poll\",\"_topupCredit\":\"The TopupCredit contract\",\"_treeDepths\":\"The depths of the merkle trees\"},\"returns\":{\"pollAddr\":\"The deployed Poll contract\"}}},\"title\":\"PollFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"MESSAGE_DATA_LENGTH()\":{\"notice\":\"the length of a MACI message\"},\"constructor\":{\"notice\":\"The PollFactory constructor\"},\"deploy(uint256,(uint256,uint256),(uint8,uint8,uint8,uint8),(uint256,uint256),address,address,address)\":{\"notice\":\"Deploy a new Poll contract and AccQueue contract for messages.\"}},\"notice\":\"A factory contract which deploys Poll contracts. It allows the MACI contract size to stay within the limit set by EIP-170.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"maci-contracts/contracts/PollFactory.sol\":\"PollFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"maci-contracts/contracts/Poll.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { Params } from \\\"./utilities/Params.sol\\\";\\nimport { SnarkCommon } from \\\"./crypto/SnarkCommon.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { EmptyBallotRoots } from \\\"./trees/EmptyBallotRoots.sol\\\";\\nimport { IPoll } from \\\"./interfaces/IPoll.sol\\\";\\nimport { Utilities } from \\\"./utilities/Utilities.sol\\\";\\nimport { CurveBabyJubJub } from \\\"./crypto/BabyJubJub.sol\\\";\\n\\n/// @title Poll\\n/// @notice A Poll contract allows voters to submit encrypted messages\\n/// which can be either votes, key change messages or topup messages.\\n/// @dev Do not deploy this directly. Use PollFactory.deploy() which performs some\\n/// checks on the Poll constructor arguments.\\ncontract Poll is Params, Utilities, SnarkCommon, Ownable(msg.sender), EmptyBallotRoots, IPoll {\\n  using SafeERC20 for ERC20;\\n\\n  /// @notice Whether the Poll has been initialized\\n  bool internal isInit;\\n\\n  /// @notice The coordinator's public key\\n  PubKey public coordinatorPubKey;\\n\\n  /// @notice Hash of the coordinator's public key\\n  uint256 public immutable coordinatorPubKeyHash;\\n\\n  /// @notice the state root of the state merkle tree\\n  uint256 public mergedStateRoot;\\n\\n  // The timestamp of the block at which the Poll was deployed\\n  uint256 internal immutable deployTime;\\n\\n  // The duration of the polling period, in seconds\\n  uint256 internal immutable duration;\\n\\n  /// @notice Whether the MACI contract's stateAq has been merged by this contract\\n  bool public stateAqMerged;\\n\\n  /// @notice Get the commitment to the state leaves and the ballots. This is\\n  /// hash3(stateRoot, ballotRoot, salt).\\n  /// Its initial value should be\\n  /// hash(maciStateRootSnapshot, emptyBallotRoot, 0)\\n  /// Each successful invocation of processMessages() should use a different\\n  /// salt to update this value, so that an external observer cannot tell in\\n  /// the case that none of the messages are valid.\\n  uint256 public currentSbCommitment;\\n\\n  /// @notice The number of messages that have been published\\n  uint256 public numMessages;\\n\\n  /// @notice The number of signups that have been processed\\n  /// before the Poll ended (stateAq merged)\\n  uint256 public numSignups;\\n\\n  /// @notice Max values for the poll\\n  MaxValues public maxValues;\\n\\n  /// @notice Depths of the merkle trees\\n  TreeDepths public treeDepths;\\n\\n  /// @notice The contracts used by the Poll\\n  ExtContracts public extContracts;\\n\\n  error VotingPeriodOver();\\n  error VotingPeriodNotOver();\\n  error PollAlreadyInit();\\n  error TooManyMessages();\\n  error InvalidPubKey();\\n  error StateAqAlreadyMerged();\\n  error StateAqSubtreesNeedMerge();\\n  error InvalidBatchLength();\\n\\n  event PublishMessage(Message _message, PubKey _encPubKey);\\n  event TopupMessage(Message _message);\\n  event MergeMaciStateAqSubRoots(uint256 indexed _numSrQueueOps);\\n  event MergeMaciStateAq(uint256 indexed _stateRoot, uint256 indexed _numSignups);\\n  event MergeMessageAqSubRoots(uint256 indexed _numSrQueueOps);\\n  event MergeMessageAq(uint256 indexed _messageRoot);\\n\\n  /// @notice Each MACI instance can have multiple Polls.\\n  /// When a Poll is deployed, its voting period starts immediately.\\n  /// @param _duration The duration of the voting period, in seconds\\n  /// @param _maxValues The maximum number of messages and vote options\\n  /// @param _treeDepths The depths of the merkle trees\\n  /// @param _coordinatorPubKey The coordinator's public key\\n  /// @param _extContracts The external contracts\\n  constructor(\\n    uint256 _duration,\\n    MaxValues memory _maxValues,\\n    TreeDepths memory _treeDepths,\\n    PubKey memory _coordinatorPubKey,\\n    ExtContracts memory _extContracts\\n  ) payable {\\n    // check that the coordinator public key is valid\\n    if (!CurveBabyJubJub.isOnCurve(_coordinatorPubKey.x, _coordinatorPubKey.y)) {\\n      revert InvalidPubKey();\\n    }\\n\\n    // store the pub key as object then calculate the hash\\n    coordinatorPubKey = _coordinatorPubKey;\\n    // we hash it ourselves to ensure we store the correct value\\n    coordinatorPubKeyHash = hashLeftRight(_coordinatorPubKey.x, _coordinatorPubKey.y);\\n    // store the external contracts to interact with\\n    extContracts = _extContracts;\\n    // store duration of the poll\\n    duration = _duration;\\n    // store max values\\n    maxValues = _maxValues;\\n    // store tree depth\\n    treeDepths = _treeDepths;\\n    // Record the current timestamp\\n    deployTime = block.timestamp;\\n  }\\n\\n  /// @notice A modifier that causes the function to revert if the voting period is\\n  /// not over.\\n  modifier isAfterVotingDeadline() {\\n    uint256 secondsPassed = block.timestamp - deployTime;\\n    if (secondsPassed <= duration) revert VotingPeriodNotOver();\\n    _;\\n  }\\n\\n  /// @notice A modifier that causes the function to revert if the voting period is\\n  /// over\\n  modifier isWithinVotingDeadline() {\\n    uint256 secondsPassed = block.timestamp - deployTime;\\n    if (secondsPassed >= duration) revert VotingPeriodOver();\\n    _;\\n  }\\n\\n  /// @notice The initialization function.\\n  /// @dev Should be called immediately after Poll creation\\n  /// and messageAq ownership transferred\\n  function init() public {\\n    if (isInit) revert PollAlreadyInit();\\n    // set to true so it cannot be called again\\n    isInit = true;\\n\\n    unchecked {\\n      numMessages++;\\n    }\\n\\n    // init messageAq here by inserting placeholderLeaf\\n    uint256[2] memory dat;\\n    dat[0] = NOTHING_UP_MY_SLEEVE;\\n    dat[1] = 0;\\n\\n    (Message memory _message, PubKey memory _padKey, uint256 placeholderLeaf) = padAndHashMessage(dat, 1);\\n    extContracts.messageAq.enqueue(placeholderLeaf);\\n\\n    emit PublishMessage(_message, _padKey);\\n  }\\n\\n  /// @inheritdoc IPoll\\n  function topup(uint256 stateIndex, uint256 amount) public virtual isWithinVotingDeadline {\\n    // we check that we do not exceed the max number of messages\\n    if (numMessages >= maxValues.maxMessages) revert TooManyMessages();\\n\\n    // cannot realistically overflow\\n    unchecked {\\n      numMessages++;\\n    }\\n\\n    /// @notice topupCredit is a trusted token contract which reverts if the transfer fails\\n    extContracts.topupCredit.transferFrom(msg.sender, address(this), amount);\\n\\n    uint256[2] memory dat;\\n    dat[0] = stateIndex;\\n    dat[1] = amount;\\n\\n    (Message memory _message, , uint256 messageLeaf) = padAndHashMessage(dat, 2);\\n\\n    extContracts.messageAq.enqueue(messageLeaf);\\n\\n    emit TopupMessage(_message);\\n  }\\n\\n  /// @inheritdoc IPoll\\n  function publishMessage(Message memory _message, PubKey calldata _encPubKey) public virtual isWithinVotingDeadline {\\n    // we check that we do not exceed the max number of messages\\n    if (numMessages >= maxValues.maxMessages) revert TooManyMessages();\\n\\n    // check if the public key is on the curve\\n    if (!CurveBabyJubJub.isOnCurve(_encPubKey.x, _encPubKey.y)) {\\n      revert InvalidPubKey();\\n    }\\n\\n    // cannot realistically overflow\\n    unchecked {\\n      numMessages++;\\n    }\\n\\n    // we enforce that msgType here is 1 so we don't need checks\\n    // at the circuit level\\n    _message.msgType = 1;\\n\\n    uint256 messageLeaf = hashMessageAndEncPubKey(_message, _encPubKey);\\n    extContracts.messageAq.enqueue(messageLeaf);\\n\\n    emit PublishMessage(_message, _encPubKey);\\n  }\\n\\n  /// @notice submit a message batch\\n  /// @dev Can only be submitted before the voting deadline\\n  /// @param _messages the messages\\n  /// @param _encPubKeys the encrypted public keys\\n  function publishMessageBatch(Message[] calldata _messages, PubKey[] calldata _encPubKeys) external {\\n    if (_messages.length != _encPubKeys.length) {\\n      revert InvalidBatchLength();\\n    }\\n\\n    uint256 len = _messages.length;\\n    for (uint256 i = 0; i < len; ) {\\n      // an event will be published by this function already\\n      publishMessage(_messages[i], _encPubKeys[i]);\\n\\n      unchecked {\\n        i++;\\n      }\\n    }\\n  }\\n\\n  /// @inheritdoc IPoll\\n  function mergeMaciStateAqSubRoots(uint256 _numSrQueueOps, uint256 _pollId) public onlyOwner isAfterVotingDeadline {\\n    // This function cannot be called after the stateAq was merged\\n    if (stateAqMerged) revert StateAqAlreadyMerged();\\n\\n    // merge subroots\\n    extContracts.maci.mergeStateAqSubRoots(_numSrQueueOps, _pollId);\\n\\n    emit MergeMaciStateAqSubRoots(_numSrQueueOps);\\n  }\\n\\n  /// @inheritdoc IPoll\\n  function mergeMaciStateAq(uint256 _pollId) public onlyOwner isAfterVotingDeadline {\\n    // This function can only be called once per Poll after the voting\\n    // deadline\\n    if (stateAqMerged) revert StateAqAlreadyMerged();\\n\\n    // set merged to true so it cannot be called again\\n    stateAqMerged = true;\\n\\n    // the subtrees must have been merged first\\n    if (!extContracts.maci.stateAq().subTreesMerged()) revert StateAqSubtreesNeedMerge();\\n\\n    mergedStateRoot = extContracts.maci.mergeStateAq(_pollId);\\n\\n    // Set currentSbCommitment\\n    uint256[3] memory sb;\\n    sb[0] = mergedStateRoot;\\n    sb[1] = emptyBallotRoots[treeDepths.voteOptionTreeDepth - 1];\\n    sb[2] = uint256(0);\\n\\n    currentSbCommitment = hash3(sb);\\n\\n    numSignups = extContracts.maci.numSignUps();\\n    emit MergeMaciStateAq(mergedStateRoot, numSignups);\\n  }\\n\\n  /// @inheritdoc IPoll\\n  function mergeMessageAqSubRoots(uint256 _numSrQueueOps) public onlyOwner isAfterVotingDeadline {\\n    extContracts.messageAq.mergeSubRoots(_numSrQueueOps);\\n    emit MergeMessageAqSubRoots(_numSrQueueOps);\\n  }\\n\\n  /// @inheritdoc IPoll\\n  function mergeMessageAq() public onlyOwner isAfterVotingDeadline {\\n    uint256 root = extContracts.messageAq.merge(treeDepths.messageTreeDepth);\\n    emit MergeMessageAq(root);\\n  }\\n\\n  /// @inheritdoc IPoll\\n  function getDeployTimeAndDuration() public view returns (uint256 pollDeployTime, uint256 pollDuration) {\\n    pollDeployTime = deployTime;\\n    pollDuration = duration;\\n  }\\n\\n  /// @inheritdoc IPoll\\n  function numSignUpsAndMessages() public view returns (uint256 numSUps, uint256 numMsgs) {\\n    numSUps = numSignups;\\n    numMsgs = numMessages;\\n  }\\n}\\n\",\"keccak256\":\"0x36f06166631529a6a80146c4c167e8e9342be6255e3029173bf9cf4916b64eee\",\"license\":\"MIT\"},\"maci-contracts/contracts/PollFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { IMACI } from \\\"./interfaces/IMACI.sol\\\";\\nimport { AccQueue } from \\\"./trees/AccQueue.sol\\\";\\nimport { AccQueueQuinaryMaci } from \\\"./trees/AccQueueQuinaryMaci.sol\\\";\\nimport { TopupCredit } from \\\"./TopupCredit.sol\\\";\\nimport { Params } from \\\"./utilities/Params.sol\\\";\\nimport { DomainObjs } from \\\"./utilities/DomainObjs.sol\\\";\\nimport { Poll } from \\\"./Poll.sol\\\";\\nimport { IPollFactory } from \\\"./interfaces/IPollFactory.sol\\\";\\n\\n/// @title PollFactory\\n/// @notice A factory contract which deploys Poll contracts. It allows the MACI contract\\n/// size to stay within the limit set by EIP-170.\\ncontract PollFactory is Params, DomainObjs, IPollFactory {\\n  // The number of children each node in the message tree has\\n  uint256 internal constant TREE_ARITY = 5;\\n\\n  // custom error\\n  error InvalidMaxValues();\\n\\n  /// @notice The PollFactory constructor\\n  // solhint-disable-next-line no-empty-blocks\\n  constructor() payable {}\\n\\n  /// @inheritdoc IPollFactory\\n  function deploy(\\n    uint256 _duration,\\n    MaxValues calldata _maxValues,\\n    TreeDepths calldata _treeDepths,\\n    PubKey calldata _coordinatorPubKey,\\n    address _maci,\\n    TopupCredit _topupCredit,\\n    address _pollOwner\\n  ) public virtual returns (address pollAddr) {\\n    /// @notice Validate _maxValues\\n    /// maxVoteOptions must be less than 2 ** 50 due to circuit limitations;\\n    /// it will be packed as a 50-bit value along with other values as one\\n    /// of the inputs (aka packedVal)\\n    if (_maxValues.maxVoteOptions >= (2 ** 50)) {\\n      revert InvalidMaxValues();\\n    }\\n\\n    /// @notice deploy a new AccQueue contract to store messages\\n    AccQueue messageAq = new AccQueueQuinaryMaci(_treeDepths.messageTreeSubDepth);\\n\\n    /// @notice the smart contracts that a Poll would interact with\\n    ExtContracts memory extContracts = ExtContracts({\\n      maci: IMACI(_maci),\\n      messageAq: messageAq,\\n      topupCredit: _topupCredit\\n    });\\n\\n    // deploy the poll\\n    Poll poll = new Poll(_duration, _maxValues, _treeDepths, _coordinatorPubKey, extContracts);\\n\\n    // Make the Poll contract own the messageAq contract, so only it can\\n    // run enqueue/merge\\n    messageAq.transferOwnership(address(poll));\\n\\n    // init Poll\\n    poll.init();\\n\\n    poll.transferOwnership(_pollOwner);\\n\\n    pollAddr = address(poll);\\n  }\\n}\\n\",\"keccak256\":\"0x7b28f58b60b39ee2f4774fb80f98f43e01d644586f44a4390d84a9a795f6fdfb\",\"license\":\"MIT\"},\"maci-contracts/contracts/TopupCredit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title TopupCredit\\n/// @notice A contract representing a token used to topup a MACI's voter\\n/// credits\\ncontract TopupCredit is ERC20, Ownable(msg.sender) {\\n  uint8 public constant DECIMALS = 1;\\n  uint256 public constant MAXIMUM_AIRDROP_AMOUNT = 100000 * 10 ** DECIMALS;\\n\\n  /// @notice custom errors\\n  error ExceedLimit();\\n\\n  /// @notice create  a new TopupCredit token\\n  constructor() payable ERC20(\\\"TopupCredit\\\", \\\"TopupCredit\\\") {}\\n\\n  /// @notice mint tokens to an account\\n  /// @param account the account to mint tokens to\\n  /// @param amount the amount of tokens to mint\\n  function airdropTo(address account, uint256 amount) public onlyOwner {\\n    if (amount >= MAXIMUM_AIRDROP_AMOUNT) {\\n      revert ExceedLimit();\\n    }\\n\\n    _mint(account, amount);\\n  }\\n\\n  /// @notice mint tokens to the contract owner\\n  /// @param amount the amount of tokens to mint\\n  function airdrop(uint256 amount) public onlyOwner {\\n    if (amount >= MAXIMUM_AIRDROP_AMOUNT) {\\n      revert ExceedLimit();\\n    }\\n\\n    _mint(msg.sender, amount);\\n  }\\n}\\n\",\"keccak256\":\"0x9cddcaa8b2f7d8bccbfdf40d38fb4a950bbeaf0941dee4213c76d69eadbea33c\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/BabyJubJub.sol\":{\"content\":\"// @note This code was taken from\\n// https://github.com/yondonfu/sol-baby-jubjub/blob/master/contracts/CurveBabyJubJub.sol\\n// Thanks to yondonfu for the code\\n// Implementation cited on baby-jubjub's paper\\n// https://eips.ethereum.org/EIPS/eip-2494#implementation\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nlibrary CurveBabyJubJub {\\n  // Curve parameters\\n  // E: 168700x^2 + y^2 = 1 + 168696x^2y^2\\n  // A = 168700\\n  uint256 public constant A = 0x292FC;\\n  // D = 168696\\n  uint256 public constant D = 0x292F8;\\n  // Prime Q = 21888242871839275222246405745257275088548364400416034343698204186575808495617\\n  uint256 public constant Q = 0x30644E72E131A029B85045B68181585D2833E84879B9709143E1F593F0000001;\\n\\n  /**\\n   * @dev Add 2 points on baby jubjub curve\\n   * Formula for adding 2 points on a twisted Edwards curve:\\n   * x3 = (x1y2 + y1x2) / (1 + dx1x2y1y2)\\n   * y3 = (y1y2 - ax1x2) / (1 - dx1x2y1y2)\\n   */\\n  function pointAdd(uint256 _x1, uint256 _y1, uint256 _x2, uint256 _y2) internal view returns (uint256 x3, uint256 y3) {\\n    if (_x1 == 0 && _y1 == 0) {\\n      return (_x2, _y2);\\n    }\\n\\n    if (_x2 == 0 && _y1 == 0) {\\n      return (_x1, _y1);\\n    }\\n\\n    uint256 x1x2 = mulmod(_x1, _x2, Q);\\n    uint256 y1y2 = mulmod(_y1, _y2, Q);\\n    uint256 dx1x2y1y2 = mulmod(D, mulmod(x1x2, y1y2, Q), Q);\\n    uint256 x3Num = addmod(mulmod(_x1, _y2, Q), mulmod(_y1, _x2, Q), Q);\\n    uint256 y3Num = submod(y1y2, mulmod(A, x1x2, Q), Q);\\n\\n    x3 = mulmod(x3Num, inverse(addmod(1, dx1x2y1y2, Q)), Q);\\n    y3 = mulmod(y3Num, inverse(submod(1, dx1x2y1y2, Q)), Q);\\n  }\\n\\n  /**\\n   * @dev Double a point on baby jubjub curve\\n   * Doubling can be performed with the same formula as addition\\n   */\\n  function pointDouble(uint256 _x1, uint256 _y1) internal view returns (uint256 x2, uint256 y2) {\\n    return pointAdd(_x1, _y1, _x1, _y1);\\n  }\\n\\n  /**\\n   * @dev Multiply a point on baby jubjub curve by a scalar\\n   * Use the double and add algorithm\\n   */\\n  function pointMul(uint256 _x1, uint256 _y1, uint256 _d) internal view returns (uint256 x2, uint256 y2) {\\n    uint256 remaining = _d;\\n\\n    uint256 px = _x1;\\n    uint256 py = _y1;\\n    uint256 ax = 0;\\n    uint256 ay = 0;\\n\\n    while (remaining != 0) {\\n      if ((remaining & 1) != 0) {\\n        // Binary digit is 1 so add\\n        (ax, ay) = pointAdd(ax, ay, px, py);\\n      }\\n\\n      (px, py) = pointDouble(px, py);\\n\\n      remaining = remaining / 2;\\n    }\\n\\n    x2 = ax;\\n    y2 = ay;\\n  }\\n\\n  /**\\n   * @dev Check if a given point is on the curve\\n   * (168700x^2 + y^2) - (1 + 168696x^2y^2) == 0\\n   */\\n  function isOnCurve(uint256 _x, uint256 _y) internal pure returns (bool) {\\n    uint256 xSq = mulmod(_x, _x, Q);\\n    uint256 ySq = mulmod(_y, _y, Q);\\n    uint256 lhs = addmod(mulmod(A, xSq, Q), ySq, Q);\\n    uint256 rhs = addmod(1, mulmod(mulmod(D, xSq, Q), ySq, Q), Q);\\n    return submod(lhs, rhs, Q) == 0;\\n  }\\n\\n  /**\\n   * @dev Perform modular subtraction\\n   */\\n  function submod(uint256 _a, uint256 _b, uint256 _mod) internal pure returns (uint256) {\\n    uint256 aNN = _a;\\n\\n    if (_a <= _b) {\\n      aNN += _mod;\\n    }\\n\\n    return addmod(aNN - _b, 0, _mod);\\n  }\\n\\n  /**\\n   * @dev Compute modular inverse of a number\\n   */\\n  function inverse(uint256 _a) internal view returns (uint256) {\\n    // We can use Euler's theorem instead of the extended Euclidean algorithm\\n    // Since m = Q and Q is prime we have: a^-1 = a^(m - 2) (mod m)\\n    return expmod(_a, Q - 2, Q);\\n  }\\n\\n  /**\\n   * @dev Helper function to call the bigModExp precompile\\n   */\\n  function expmod(uint256 _b, uint256 _e, uint256 _m) internal view returns (uint256 o) {\\n    assembly {\\n      let memPtr := mload(0x40)\\n      mstore(memPtr, 0x20) // Length of base _b\\n      mstore(add(memPtr, 0x20), 0x20) // Length of exponent _e\\n      mstore(add(memPtr, 0x40), 0x20) // Length of modulus _m\\n      mstore(add(memPtr, 0x60), _b) // Base _b\\n      mstore(add(memPtr, 0x80), _e) // Exponent _e\\n      mstore(add(memPtr, 0xa0), _m) // Modulus _m\\n\\n      // The bigModExp precompile is at 0x05\\n      let success := staticcall(gas(), 0x05, memPtr, 0xc0, memPtr, 0x20)\\n      switch success\\n      case 0 {\\n        revert(0x0, 0x0)\\n      }\\n      default {\\n        o := mload(memPtr)\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xf28f6c9c4534cecd69276c7f902a33ed94a08901400f570979085701d796cea8\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/Hasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { SnarkConstants } from \\\"./SnarkConstants.sol\\\";\\nimport { PoseidonT3 } from \\\"./PoseidonT3.sol\\\";\\nimport { PoseidonT4 } from \\\"./PoseidonT4.sol\\\";\\nimport { PoseidonT5 } from \\\"./PoseidonT5.sol\\\";\\nimport { PoseidonT6 } from \\\"./PoseidonT6.sol\\\";\\n\\n/// @notice A SHA256 hash function for any number of input elements, and Poseidon hash\\n/// functions for 2, 3, 4, 5, and 12 input elements.\\ncontract Hasher is SnarkConstants {\\n  /// @notice Computes the SHA256 hash of an array of uint256 elements.\\n  /// @param array The array of uint256 elements.\\n  /// @return result The SHA256 hash of the array.\\n  function sha256Hash(uint256[] memory array) public pure returns (uint256 result) {\\n    result = uint256(sha256(abi.encodePacked(array))) % SNARK_SCALAR_FIELD;\\n  }\\n\\n  /// @notice Computes the Poseidon hash of two uint256 elements.\\n  /// @param array An array of two uint256 elements.\\n  /// @return result The Poseidon hash of the two elements.\\n  function hash2(uint256[2] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT3.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of three uint256 elements.\\n  /// @param array An array of three uint256 elements.\\n  /// @return result The Poseidon hash of the three elements.\\n  function hash3(uint256[3] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT4.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of four uint256 elements.\\n  /// @param array An array of four uint256 elements.\\n  /// @return result The Poseidon hash of the four elements.\\n  function hash4(uint256[4] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT5.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of five uint256 elements.\\n  /// @param array An array of five uint256 elements.\\n  /// @return result The Poseidon hash of the five elements.\\n  function hash5(uint256[5] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT6.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of two uint256 elements.\\n  /// @param left the first element to hash.\\n  /// @param right the second element to hash.\\n  /// @return result The Poseidon hash of the two elements.\\n  function hashLeftRight(uint256 left, uint256 right) public pure returns (uint256 result) {\\n    uint256[2] memory input;\\n    input[0] = left;\\n    input[1] = right;\\n    result = hash2(input);\\n  }\\n}\\n\",\"keccak256\":\"0x5bd9dc3c43c862d8fd566e8ae2d3a52e1271f2aa3b042c71f97fe2dc449b1d5f\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/Pairing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to\\n// deal in the Software without restriction, including without limitation the\\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\\n// sell copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\\n// IN THE SOFTWARE.\\n\\n// 2019 OKIMS\\n\\npragma solidity ^0.8.20;\\n\\n/// @title Pairing\\n/// @notice A library implementing the alt_bn128 elliptic curve operations.\\nlibrary Pairing {\\n  uint256 public constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n  struct G1Point {\\n    uint256 x;\\n    uint256 y;\\n  }\\n\\n  // Encoding of field elements is: X[0] * z + X[1]\\n  struct G2Point {\\n    uint256[2] x;\\n    uint256[2] y;\\n  }\\n\\n  /// @notice custom errors\\n  error PairingAddFailed();\\n  error PairingMulFailed();\\n  error PairingOpcodeFailed();\\n\\n  /// @notice The negation of p, i.e. p.plus(p.negate()) should be zero.\\n  function negate(G1Point memory p) internal pure returns (G1Point memory) {\\n    // The prime q in the base field F_q for G1\\n    if (p.x == 0 && p.y == 0) {\\n      return G1Point(0, 0);\\n    } else {\\n      return G1Point(p.x, PRIME_Q - (p.y % PRIME_Q));\\n    }\\n  }\\n\\n  /// @notice r Returns the sum of two points of G1.\\n  function plus(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {\\n    uint256[4] memory input;\\n    input[0] = p1.x;\\n    input[1] = p1.y;\\n    input[2] = p2.x;\\n    input[3] = p2.y;\\n    bool success;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n\\n    if (!success) {\\n      revert PairingAddFailed();\\n    }\\n  }\\n\\n  /// @notice r Return the product of a point on G1 and a scalar, i.e.\\n  ///         p == p.scalarMul(1) and p.plus(p) == p.scalarMul(2) for all\\n  ///         points p.\\n  function scalarMul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\\n    uint256[3] memory input;\\n    input[0] = p.x;\\n    input[1] = p.y;\\n    input[2] = s;\\n    bool success;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n\\n    if (!success) {\\n      revert PairingMulFailed();\\n    }\\n  }\\n\\n  /// @return isValid The result of computing the pairing check\\n  ///         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n  ///        For example,\\n  ///        pairing([P1(), P1().negate()], [P2(), P2()]) should return true.\\n  function pairing(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2,\\n    G1Point memory c1,\\n    G2Point memory c2,\\n    G1Point memory d1,\\n    G2Point memory d2\\n  ) internal view returns (bool isValid) {\\n    G1Point[4] memory p1;\\n    p1[0] = a1;\\n    p1[1] = b1;\\n    p1[2] = c1;\\n    p1[3] = d1;\\n\\n    G2Point[4] memory p2;\\n    p2[0] = a2;\\n    p2[1] = b2;\\n    p2[2] = c2;\\n    p2[3] = d2;\\n\\n    uint256 inputSize = 24;\\n    uint256[] memory input = new uint256[](inputSize);\\n\\n    for (uint8 i = 0; i < 4; ) {\\n      uint8 j = i * 6;\\n      input[j + 0] = p1[i].x;\\n      input[j + 1] = p1[i].y;\\n      input[j + 2] = p2[i].x[0];\\n      input[j + 3] = p2[i].x[1];\\n      input[j + 4] = p2[i].y[0];\\n      input[j + 5] = p2[i].y[1];\\n\\n      unchecked {\\n        i++;\\n      }\\n    }\\n\\n    uint256[1] memory out;\\n    bool success;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n\\n    if (!success) {\\n      revert PairingOpcodeFailed();\\n    }\\n\\n    isValid = out[0] != 0;\\n  }\\n}\\n\",\"keccak256\":\"0x3efa7d9dc2beee359445d7083d857e4c08a399443ac3f489a73ccc270bcc8bdd\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/PoseidonT3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT3 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[2] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0x27b66b331502146590287b856ab767b2a2fb66a16da114961e3cef9e160d7263\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/PoseidonT4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT4 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[3] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xd38b24182625dab43ccd72c623df1263f2fec8ef828852189bf8ac17e59ae12b\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/PoseidonT5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT5 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[4] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0x93228facf0feb920e3b92e536040ba3c6fd5ffcdd5ae415373f153e05cec78b9\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/PoseidonT6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT6 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[5] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0x792080273729327555e4bed7ba86e51a22e63769732308ac0a59dce88e451505\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/SnarkCommon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\nimport { Pairing } from \\\"./Pairing.sol\\\";\\n\\n/// @title SnarkCommon\\n/// @notice a Contract which holds a struct\\n/// representing a Groth16 verifying key\\ncontract SnarkCommon {\\n  /// @notice a struct representing a Groth16 verifying key\\n  struct VerifyingKey {\\n    Pairing.G1Point alpha1;\\n    Pairing.G2Point beta2;\\n    Pairing.G2Point gamma2;\\n    Pairing.G2Point delta2;\\n    Pairing.G1Point[] ic;\\n  }\\n}\\n\",\"keccak256\":\"0x41a3c06b5e34c032c618e3b9bf2286e128a1565f12bfec58b8b3951f3601be2d\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/SnarkConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @title SnarkConstants\\n/// @notice This contract contains constants related to the SNARK\\n/// components of MACI.\\ncontract SnarkConstants {\\n  /// @notice The scalar field\\n  uint256 internal constant SNARK_SCALAR_FIELD =\\n    21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n  /// @notice The public key here is the first Pedersen base\\n  /// point from iden3's circomlib implementation of the Pedersen hash.\\n  /// Since it is generated using a hash-to-curve function, we are\\n  /// confident that no-one knows the private key associated with this\\n  /// public key. See:\\n  /// https://github.com/iden3/circomlib/blob/d5ed1c3ce4ca137a6b3ca48bec4ac12c1b38957a/src/pedersen_printbases.js\\n  /// Its hash should equal\\n  /// 6769006970205099520508948723718471724660867171122235270773600567925038008762.\\n  uint256 internal constant PAD_PUBKEY_X =\\n    10457101036533406547632367118273992217979173478358440826365724437999023779287;\\n  uint256 internal constant PAD_PUBKEY_Y =\\n    19824078218392094440610104313265183977899662750282163392862422243483260492317;\\n\\n  /// @notice The Keccack256 hash of 'Maci'\\n  uint256 internal constant NOTHING_UP_MY_SLEEVE =\\n    8370432830353022751713833565135785980866757267633941821328460903436894336785;\\n}\\n\",\"keccak256\":\"0xef88737ff3d47333964f4fd6b939a12fe6e2ca64b069b26600a10c6a8f52fc7b\",\"license\":\"MIT\"},\"maci-contracts/contracts/interfaces/IMACI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { AccQueue } from \\\"../trees/AccQueue.sol\\\";\\n\\n/// @title IMACI\\n/// @notice MACI interface\\ninterface IMACI {\\n  /// @notice Get the depth of the state tree\\n  /// @return The depth of the state tree\\n  function stateTreeDepth() external view returns (uint8);\\n\\n  /// @notice Return the main root of the StateAq contract\\n  /// @return The Merkle root\\n  function getStateAqRoot() external view returns (uint256);\\n\\n  /// @notice Allow Poll contracts to merge the state subroots\\n  /// @param _numSrQueueOps Number of operations\\n  /// @param _pollId The ID of the active Poll\\n  function mergeStateAqSubRoots(uint256 _numSrQueueOps, uint256 _pollId) external;\\n\\n  /// @notice Allow Poll contracts to merge the state root\\n  /// @param _pollId The active Poll ID\\n  /// @return The calculated Merkle root\\n  function mergeStateAq(uint256 _pollId) external returns (uint256);\\n\\n  /// @notice Get the number of signups\\n  /// @return numsignUps The number of signups\\n  function numSignUps() external view returns (uint256);\\n\\n  /// @notice Get the state AccQueue\\n  /// @return The state AccQueue\\n  function stateAq() external view returns (AccQueue);\\n}\\n\",\"keccak256\":\"0x1c1f514b23fe09d8703aea3e89769dc6667625c3f47d2931d6294ef53b3d6e9f\",\"license\":\"MIT\"},\"maci-contracts/contracts/interfaces/IPoll.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { DomainObjs } from \\\"../utilities/DomainObjs.sol\\\";\\nimport { IMACI } from \\\"./IMACI.sol\\\";\\nimport { AccQueue } from \\\"../trees/AccQueue.sol\\\";\\nimport { TopupCredit } from \\\"../TopupCredit.sol\\\";\\n\\n/// @title IPoll\\n/// @notice Poll interface\\ninterface IPoll {\\n  /// @notice The number of messages which have been processed and the number of signups\\n  /// @return numSignups The number of signups\\n  /// @return numMsgs The number of messages sent by voters\\n  function numSignUpsAndMessages() external view returns (uint256 numSignups, uint256 numMsgs);\\n\\n  /// @notice Allows to publish a Topup message\\n  /// @param stateIndex The index of user in the state queue\\n  /// @param amount The amount of credits to topup\\n  function topup(uint256 stateIndex, uint256 amount) external;\\n\\n  /// @notice Allows anyone to publish a message (an encrypted command and signature).\\n  /// This function also enqueues the message.\\n  /// @param _message The message to publish\\n  /// @param _encPubKey An epheremal public key which can be combined with the\\n  /// coordinator's private key to generate an ECDH shared key with which\\n  /// to encrypt the message.\\n  function publishMessage(DomainObjs.Message memory _message, DomainObjs.PubKey calldata _encPubKey) external;\\n\\n  /// @notice The first step of merging the MACI state AccQueue. This allows the\\n  /// ProcessMessages circuit to access the latest state tree and ballots via\\n  /// currentSbCommitment.\\n  /// @param _numSrQueueOps Number of operations\\n  /// @param _pollId The ID of the active Poll\\n  function mergeMaciStateAqSubRoots(uint256 _numSrQueueOps, uint256 _pollId) external;\\n\\n  /// @notice The second step of merging the MACI state AccQueue. This allows the\\n  /// ProcessMessages circuit to access the latest state tree and ballots via\\n  /// currentSbCommitment.\\n  /// @param _pollId The ID of the active Poll\\n  function mergeMaciStateAq(uint256 _pollId) external;\\n\\n  /// @notice The first step in merging the message AccQueue so that the\\n  /// ProcessMessages circuit can access the message root.\\n  /// @param _numSrQueueOps The number of subroot queue operations to perform\\n  function mergeMessageAqSubRoots(uint256 _numSrQueueOps) external;\\n\\n  /// @notice The second step in merging the message AccQueue so that the\\n  /// ProcessMessages circuit can access the message root.\\n  function mergeMessageAq() external;\\n\\n  /// @notice Returns the Poll's deploy time and duration\\n  /// @return _deployTime The deployment timestamp\\n  /// @return _duration The duration of the poll\\n  function getDeployTimeAndDuration() external view returns (uint256 _deployTime, uint256 _duration);\\n\\n  /// @notice Get the result of whether the MACI contract's stateAq has been merged by this contract\\n  /// @return Whether the MACI contract's stateAq has been merged by this contract\\n  function stateAqMerged() external view returns (bool);\\n\\n  /// @notice Get the depths of the merkle trees\\n  /// @return intStateTreeDepth The depth of the state tree\\n  /// @return messageTreeSubDepth The subdepth of the message tree\\n  /// @return messageTreeDepth The depth of the message tree\\n  /// @return voteOptionTreeDepth The subdepth of the vote option tree\\n  function treeDepths()\\n    external\\n    view\\n    returns (uint8 intStateTreeDepth, uint8 messageTreeSubDepth, uint8 messageTreeDepth, uint8 voteOptionTreeDepth);\\n\\n  /// @notice Get the max values for the poll\\n  /// @return maxMessages The maximum number of messages\\n  /// @return maxVoteOptions The maximum number of vote options\\n  function maxValues() external view returns (uint256 maxMessages, uint256 maxVoteOptions);\\n\\n  /// @notice Get the external contracts\\n  /// @return maci The IMACI contract\\n  /// @return messageAq The AccQueue contract\\n  /// @return topupCredit The TopupCredit contract\\n  function extContracts() external view returns (IMACI maci, AccQueue messageAq, TopupCredit topupCredit);\\n\\n  /// @notice Get the hash of coordinator's public key\\n  /// @return _coordinatorPubKeyHash the hash of coordinator's public key\\n  function coordinatorPubKeyHash() external view returns (uint256 _coordinatorPubKeyHash);\\n\\n  /// @notice Get the commitment to the state leaves and the ballots. This is\\n  /// hash3(stateRoot, ballotRoot, salt).\\n  /// Its initial value should be\\n  /// hash(maciStateRootSnapshot, emptyBallotRoot, 0)\\n  /// Each successful invocation of processMessages() should use a different\\n  /// salt to update this value, so that an external observer cannot tell in\\n  /// the case that none of the messages are valid.\\n  /// @return The commitment to the state leaves and the ballots\\n  function currentSbCommitment() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6543c65572462d7e052503a4094a1900a12cb450ed91f097bed1e8d97ad0243c\",\"license\":\"MIT\"},\"maci-contracts/contracts/interfaces/IPollFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { TopupCredit } from \\\"../TopupCredit.sol\\\";\\nimport { Params } from \\\"../utilities/Params.sol\\\";\\nimport { DomainObjs } from \\\"../utilities/DomainObjs.sol\\\";\\n\\n/// @title IPollFactory\\n/// @notice PollFactory interface\\ninterface IPollFactory {\\n  /// @notice Deploy a new Poll contract and AccQueue contract for messages.\\n  /// @param _duration The duration of the poll\\n  /// @param _maxValues The max values for the poll\\n  /// @param _treeDepths The depths of the merkle trees\\n  /// @param _coordinatorPubKey The coordinator's public key\\n  /// @param _maci The MACI contract interface reference\\n  /// @param _topupCredit The TopupCredit contract\\n  /// @param _pollOwner The owner of the poll\\n  /// @return The deployed Poll contract\\n  function deploy(\\n    uint256 _duration,\\n    Params.MaxValues memory _maxValues,\\n    Params.TreeDepths memory _treeDepths,\\n    DomainObjs.PubKey memory _coordinatorPubKey,\\n    address _maci,\\n    TopupCredit _topupCredit,\\n    address _pollOwner\\n  ) external returns (address);\\n}\\n\",\"keccak256\":\"0xd729956bc34555baae893d62b4234a5cd17463f41737574a8e21def0045c13fc\",\"license\":\"MIT\"},\"maci-contracts/contracts/trees/AccQueue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Hasher } from \\\"../crypto/Hasher.sol\\\";\\n\\n/// @title AccQueue\\n/// @notice This contract defines a Merkle tree where each leaf insertion only updates a\\n/// subtree. To obtain the main tree root, the contract owner must merge the\\n/// subtrees together. Merging subtrees requires at least 2 operations:\\n/// mergeSubRoots(), and merge(). To get around the gas limit,\\n/// the mergeSubRoots() can be performed in multiple transactions.\\nabstract contract AccQueue is Ownable(msg.sender), Hasher {\\n  // The maximum tree depth\\n  uint256 public constant MAX_DEPTH = 32;\\n\\n  /// @notice A Queue is a 2D array of Merkle roots and indices which represents nodes\\n  /// in a Merkle tree while it is progressively updated.\\n  struct Queue {\\n    /// @notice IMPORTANT: the following declares an array of b elements of type T: T[b]\\n    /// And the following declares an array of b elements of type T[a]: T[a][b]\\n    /// As such, the following declares an array of MAX_DEPTH+1 arrays of\\n    /// uint256[4] arrays, **not the other way round**:\\n    uint256[4][MAX_DEPTH + 1] levels;\\n    uint256[MAX_DEPTH + 1] indices;\\n  }\\n\\n  // The depth of each subtree\\n  uint256 internal immutable subDepth;\\n\\n  // The number of elements per hash operation. Should be either 2 (for\\n  // binary trees) or 5 (quinary trees). The limit is 5 because that is the\\n  // maximum supported number of inputs for the EVM implementation of the\\n  // Poseidon hash function\\n  uint256 internal immutable hashLength;\\n\\n  // hashLength ** subDepth\\n  uint256 internal immutable subTreeCapacity;\\n\\n  // True hashLength == 2, false if hashLength == 5\\n  bool internal isBinary;\\n\\n  // The index of the current subtree. e.g. the first subtree has index 0, the\\n  // second has 1, and so on\\n  uint256 internal currentSubtreeIndex;\\n\\n  // Tracks the current subtree.\\n  Queue internal leafQueue;\\n\\n  // Tracks the smallest tree of subroots\\n  Queue internal subRootQueue;\\n\\n  // Subtree roots\\n  mapping(uint256 => uint256) internal subRoots;\\n\\n  // Merged roots\\n  uint256[MAX_DEPTH + 1] internal mainRoots;\\n\\n  // Whether the subtrees have been merged\\n  bool public subTreesMerged;\\n\\n  // Whether entire merkle tree has been merged\\n  bool public treeMerged;\\n\\n  // The root of the shortest possible tree which fits all current subtree\\n  // roots\\n  uint256 internal smallSRTroot;\\n\\n  // Tracks the next subroot to queue\\n  uint256 internal nextSubRootIndex;\\n\\n  // The number of leaves inserted across all subtrees so far\\n  uint256 public numLeaves;\\n\\n  /// @notice custom errors\\n  error SubDepthCannotBeZero();\\n  error SubdepthTooLarge(uint256 _subDepth, uint256 max);\\n  error InvalidHashLength();\\n  error DepthCannotBeZero();\\n  error SubTreesAlreadyMerged();\\n  error NothingToMerge();\\n  error SubTreesNotMerged();\\n  error DepthTooLarge(uint256 _depth, uint256 max);\\n  error DepthTooSmall(uint256 _depth, uint256 min);\\n  error InvalidIndex(uint256 _index);\\n  error InvalidLevel();\\n\\n  /// @notice Create a new AccQueue\\n  /// @param _subDepth The depth of each subtree.\\n  /// @param _hashLength The number of leaves per node (2 or 5).\\n  constructor(uint256 _subDepth, uint256 _hashLength) payable {\\n    /// validation\\n    if (_subDepth == 0) revert SubDepthCannotBeZero();\\n    if (_subDepth > MAX_DEPTH) revert SubdepthTooLarge(_subDepth, MAX_DEPTH);\\n    if (_hashLength != 2 && _hashLength != 5) revert InvalidHashLength();\\n\\n    isBinary = _hashLength == 2;\\n    subDepth = _subDepth;\\n    hashLength = _hashLength;\\n    subTreeCapacity = _hashLength ** _subDepth;\\n  }\\n\\n  /// @notice Hash the contents of the specified level and the specified leaf.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which require\\n  /// different input array lengths.\\n  /// @param _level The level to hash.\\n  /// @param _leaf The leaf include with the level.\\n  /// @return _hash The hash of the level and leaf.\\n  // solhint-disable-next-line no-empty-blocks\\n  function hashLevel(uint256 _level, uint256 _leaf) internal virtual returns (uint256 _hash) {}\\n\\n  /// @notice Hash the contents of the specified level and the specified leaf.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which require\\n  /// different input array lengths.\\n  /// @param _level The level to hash.\\n  /// @param _leaf The leaf include with the level.\\n  /// @return _hash The hash of the level and leaf.\\n  // solhint-disable-next-line no-empty-blocks\\n  function hashLevelLeaf(uint256 _level, uint256 _leaf) public view virtual returns (uint256 _hash) {}\\n\\n  /// @notice Returns the zero leaf at a specified level.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which will produce\\n  /// different zero values (e.g. hashLeftRight(0, 0) vs\\n  /// hash5([0, 0, 0, 0, 0]). Moreover, the zero value may be a\\n  /// nothing-up-my-sleeve value.\\n  /// @param _level The level at which to return the zero leaf.\\n  /// @return zero The zero leaf at the specified level.\\n  // solhint-disable-next-line no-empty-blocks\\n  function getZero(uint256 _level) internal virtual returns (uint256 zero) {}\\n\\n  /// @notice Add a leaf to the queue for the current subtree.\\n  /// @param _leaf The leaf to add.\\n  /// @return leafIndex The index of the leaf in the queue.\\n  function enqueue(uint256 _leaf) public onlyOwner returns (uint256 leafIndex) {\\n    leafIndex = numLeaves;\\n    // Recursively queue the leaf\\n    _enqueue(_leaf, 0);\\n\\n    // Update the leaf counter\\n    numLeaves = leafIndex + 1;\\n\\n    // Now that a new leaf has been added, mainRoots and smallSRTroot are\\n    // obsolete\\n    delete mainRoots;\\n    delete smallSRTroot;\\n    subTreesMerged = false;\\n\\n    // If a subtree is full\\n    if (numLeaves % subTreeCapacity == 0) {\\n      // Store the subroot\\n      subRoots[currentSubtreeIndex] = leafQueue.levels[subDepth][0];\\n\\n      // Increment the index\\n      currentSubtreeIndex++;\\n\\n      // Delete ancillary data\\n      delete leafQueue.levels[subDepth][0];\\n      delete leafQueue.indices;\\n    }\\n  }\\n\\n  /// @notice Updates the queue at a given level and hashes any subroots\\n  /// that need to be hashed.\\n  /// @param _leaf The leaf to add.\\n  /// @param _level The level at which to queue the leaf.\\n  function _enqueue(uint256 _leaf, uint256 _level) internal {\\n    if (_level > subDepth) {\\n      revert InvalidLevel();\\n    }\\n\\n    while (true) {\\n      uint256 n = leafQueue.indices[_level];\\n\\n      if (n != hashLength - 1) {\\n        // Just store the leaf\\n        leafQueue.levels[_level][n] = _leaf;\\n\\n        if (_level != subDepth) {\\n          // Update the index\\n          leafQueue.indices[_level]++;\\n        }\\n\\n        return;\\n      }\\n\\n      // Hash the leaves to next level\\n      _leaf = hashLevel(_level, _leaf);\\n\\n      // Reset the index for this level\\n      delete leafQueue.indices[_level];\\n\\n      // Queue the hash of the leaves into to the next level\\n      _level++;\\n    }\\n  }\\n\\n  /// @notice Fill any empty leaves of the current subtree with zeros and store the\\n  /// resulting subroot.\\n  function fill() public onlyOwner {\\n    if (numLeaves % subTreeCapacity == 0) {\\n      // If the subtree is completely empty, then the subroot is a\\n      // precalculated zero value\\n      subRoots[currentSubtreeIndex] = getZero(subDepth);\\n    } else {\\n      // Otherwise, fill the rest of the subtree with zeros\\n      _fill(0);\\n\\n      // Store the subroot\\n      subRoots[currentSubtreeIndex] = leafQueue.levels[subDepth][0];\\n\\n      // Reset the subtree data\\n      delete leafQueue.levels;\\n\\n      // Reset the merged roots\\n      delete mainRoots;\\n    }\\n\\n    // Increment the subtree index\\n    uint256 curr = currentSubtreeIndex + 1;\\n    currentSubtreeIndex = curr;\\n\\n    // Update the number of leaves\\n    numLeaves = curr * subTreeCapacity;\\n\\n    // Reset the subroot tree root now that it is obsolete\\n    delete smallSRTroot;\\n\\n    subTreesMerged = false;\\n  }\\n\\n  /// @notice A function that queues zeros to the specified level, hashes,\\n  /// the level, and enqueues the hash to the next level.\\n  /// @param _level The level at which to queue zeros.\\n  // solhint-disable-next-line no-empty-blocks\\n  function _fill(uint256 _level) internal virtual {}\\n\\n  /// Insert a subtree. Used for batch enqueues.\\n  function insertSubTree(uint256 _subRoot) public onlyOwner {\\n    subRoots[currentSubtreeIndex] = _subRoot;\\n\\n    // Increment the subtree index\\n    currentSubtreeIndex++;\\n\\n    // Update the number of leaves\\n    numLeaves += subTreeCapacity;\\n\\n    // Reset the subroot tree root now that it is obsolete\\n    delete smallSRTroot;\\n\\n    subTreesMerged = false;\\n  }\\n\\n  /// @notice Calculate the lowest possible height of a tree with\\n  /// all the subroots merged together.\\n  /// @return depth The lowest possible height of a tree with all the\\n  function calcMinHeight() public view returns (uint256 depth) {\\n    depth = 1;\\n    while (true) {\\n      if (hashLength ** depth >= currentSubtreeIndex) {\\n        break;\\n      }\\n      depth++;\\n    }\\n  }\\n\\n  /// @notice Merge all subtrees to form the shortest possible tree.\\n  /// This function can be called either once to merge all subtrees in a\\n  /// single transaction, or multiple times to do the same in multiple\\n  /// transactions.\\n  /// @param _numSrQueueOps The number of times this function will call\\n  ///                       queueSubRoot(), up to the maximum number of times\\n  ///                       necessary. If it is set to 0, it will call\\n  ///                       queueSubRoot() as many times as is necessary. Set\\n  ///                       this to a low number and call this function\\n  ///                       multiple times if there are many subroots to\\n  ///                       merge, or a single transaction could run out of\\n  ///                       gas.\\n  function mergeSubRoots(uint256 _numSrQueueOps) public onlyOwner {\\n    // This function can only be called once unless a new subtree is created\\n    if (subTreesMerged) revert SubTreesAlreadyMerged();\\n\\n    // There must be subtrees to merge\\n    if (numLeaves == 0) revert NothingToMerge();\\n\\n    // Fill any empty leaves in the current subtree with zeros only if the\\n    // current subtree is not full\\n    if (numLeaves % subTreeCapacity != 0) {\\n      fill();\\n    }\\n\\n    // If there is only 1 subtree, use its root\\n    if (currentSubtreeIndex == 1) {\\n      smallSRTroot = getSubRoot(0);\\n      subTreesMerged = true;\\n      return;\\n    }\\n\\n    uint256 depth = calcMinHeight();\\n\\n    uint256 queueOpsPerformed = 0;\\n    for (uint256 i = nextSubRootIndex; i < currentSubtreeIndex; i++) {\\n      if (_numSrQueueOps != 0 && queueOpsPerformed == _numSrQueueOps) {\\n        // If the limit is not 0, stop if the limit has been reached\\n        return;\\n      }\\n\\n      // Queue the next subroot\\n      queueSubRoot(getSubRoot(nextSubRootIndex), 0, depth);\\n\\n      // Increment the next subroot counter\\n      nextSubRootIndex++;\\n\\n      // Increment the ops counter\\n      queueOpsPerformed++;\\n    }\\n\\n    // The height of the tree of subroots\\n    uint256 m = hashLength ** depth;\\n\\n    // Queue zeroes to fill out the SRT\\n    if (nextSubRootIndex == currentSubtreeIndex) {\\n      uint256 z = getZero(subDepth);\\n      for (uint256 i = currentSubtreeIndex; i < m; i++) {\\n        queueSubRoot(z, 0, depth);\\n      }\\n    }\\n\\n    // Store the smallest main root\\n    smallSRTroot = subRootQueue.levels[depth][0];\\n    subTreesMerged = true;\\n  }\\n\\n  /// @notice Queues a subroot into the subroot tree.\\n  /// @param _leaf The value to queue.\\n  /// @param _level The level at which to queue _leaf.\\n  /// @param _maxDepth The depth of the tree.\\n  function queueSubRoot(uint256 _leaf, uint256 _level, uint256 _maxDepth) internal {\\n    if (_level > _maxDepth) {\\n      return;\\n    }\\n\\n    uint256 n = subRootQueue.indices[_level];\\n\\n    if (n != hashLength - 1) {\\n      // Just store the leaf\\n      subRootQueue.levels[_level][n] = _leaf;\\n      subRootQueue.indices[_level]++;\\n    } else {\\n      // Hash the elements in this level and queue it in the next level\\n      uint256 hashed;\\n      if (isBinary) {\\n        uint256[2] memory inputs;\\n        inputs[0] = subRootQueue.levels[_level][0];\\n        inputs[1] = _leaf;\\n        hashed = hash2(inputs);\\n      } else {\\n        uint256[5] memory inputs;\\n        for (uint8 i = 0; i < n; i++) {\\n          inputs[i] = subRootQueue.levels[_level][i];\\n        }\\n        inputs[n] = _leaf;\\n        hashed = hash5(inputs);\\n      }\\n\\n      // TODO: change recursion to a while loop\\n      // Recurse\\n      delete subRootQueue.indices[_level];\\n      queueSubRoot(hashed, _level + 1, _maxDepth);\\n    }\\n  }\\n\\n  /// @notice Merge all subtrees to form a main tree with a desired depth.\\n  /// @param _depth The depth of the main tree. It must fit all the leaves or\\n  ///               this function will revert.\\n  /// @return root The root of the main tree.\\n  function merge(uint256 _depth) public onlyOwner returns (uint256 root) {\\n    // The tree depth must be more than 0\\n    if (_depth == 0) revert DepthCannotBeZero();\\n\\n    // Ensure that the subtrees have been merged\\n    if (!subTreesMerged) revert SubTreesNotMerged();\\n\\n    // Check the depth\\n    if (_depth > MAX_DEPTH) revert DepthTooLarge(_depth, MAX_DEPTH);\\n\\n    // Calculate the SRT depth\\n    uint256 srtDepth = subDepth;\\n    while (true) {\\n      if (hashLength ** srtDepth >= numLeaves) {\\n        break;\\n      }\\n      srtDepth++;\\n    }\\n\\n    if (_depth < srtDepth) revert DepthTooSmall(_depth, srtDepth);\\n\\n    // If the depth is the same as the SRT depth, just use the SRT root\\n    if (_depth == srtDepth) {\\n      mainRoots[_depth] = smallSRTroot;\\n      treeMerged = true;\\n      return smallSRTroot;\\n    } else {\\n      root = smallSRTroot;\\n\\n      // Calculate the main root\\n\\n      for (uint256 i = srtDepth; i < _depth; i++) {\\n        uint256 z = getZero(i);\\n\\n        if (isBinary) {\\n          uint256[2] memory inputs;\\n          inputs[0] = root;\\n          inputs[1] = z;\\n          root = hash2(inputs);\\n        } else {\\n          uint256[5] memory inputs;\\n          inputs[0] = root;\\n          inputs[1] = z;\\n          inputs[2] = z;\\n          inputs[3] = z;\\n          inputs[4] = z;\\n          root = hash5(inputs);\\n        }\\n      }\\n\\n      mainRoots[_depth] = root;\\n      treeMerged = true;\\n    }\\n  }\\n\\n  /// @notice Returns the subroot at the specified index. Reverts if the index refers\\n  /// to a subtree which has not been filled yet.\\n  /// @param _index The subroot index.\\n  /// @return subRoot The subroot at the specified index.\\n  function getSubRoot(uint256 _index) public view returns (uint256 subRoot) {\\n    if (currentSubtreeIndex <= _index) revert InvalidIndex(_index);\\n    subRoot = subRoots[_index];\\n  }\\n\\n  /// @notice Returns the subroot tree (SRT) root. Its value must first be computed\\n  /// using mergeSubRoots.\\n  /// @return smallSubTreeRoot The SRT root.\\n  function getSmallSRTroot() public view returns (uint256 smallSubTreeRoot) {\\n    if (!subTreesMerged) revert SubTreesNotMerged();\\n    smallSubTreeRoot = smallSRTroot;\\n  }\\n\\n  /// @notice Return the merged Merkle root of all the leaves at a desired depth.\\n  /// @dev merge() or merged(_depth) must be called first.\\n  /// @param _depth The depth of the main tree. It must first be computed\\n  ///               using mergeSubRoots() and merge().\\n  /// @return mainRoot The root of the main tree.\\n  function getMainRoot(uint256 _depth) public view returns (uint256 mainRoot) {\\n    if (hashLength ** _depth < numLeaves) revert DepthTooSmall(_depth, numLeaves);\\n\\n    mainRoot = mainRoots[_depth];\\n  }\\n\\n  /// @notice Get the next subroot index and the current subtree index.\\n  function getSrIndices() public view returns (uint256 next, uint256 current) {\\n    next = nextSubRootIndex;\\n    current = currentSubtreeIndex;\\n  }\\n}\\n\",\"keccak256\":\"0xf7b3357a612808b59e27300842bd92fefc42e276348fc2f4bf794192e2499de8\",\"license\":\"MIT\"},\"maci-contracts/contracts/trees/AccQueueQuinary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { AccQueue } from \\\"./AccQueue.sol\\\";\\n\\n/// @title AccQueueQuinary\\n/// @notice This contract defines a Merkle tree where each leaf insertion only updates a\\n/// subtree. To obtain the main tree root, the contract owner must merge the\\n/// subtrees together. Merging subtrees requires at least 2 operations:\\n/// mergeSubRoots(), and merge(). To get around the gas limit,\\n/// the mergeSubRoots() can be performed in multiple transactions.\\n/// @dev This contract is for a quinary tree (5 leaves per node)\\nabstract contract AccQueueQuinary is AccQueue {\\n  /// @notice Create a new AccQueueQuinary instance\\n  constructor(uint256 _subDepth) AccQueue(_subDepth, 5) {}\\n\\n  /// @notice Hash the contents of the specified level and the specified leaf.\\n  /// @dev it also frees up storage slots to refund gas.\\n  /// @param _level The level to hash.\\n  /// @param _leaf The leaf include with the level.\\n  /// @return hashed The hash of the level and leaf.\\n  function hashLevel(uint256 _level, uint256 _leaf) internal override returns (uint256 hashed) {\\n    uint256[5] memory inputs;\\n    inputs[0] = leafQueue.levels[_level][0];\\n    inputs[1] = leafQueue.levels[_level][1];\\n    inputs[2] = leafQueue.levels[_level][2];\\n    inputs[3] = leafQueue.levels[_level][3];\\n    inputs[4] = _leaf;\\n    hashed = hash5(inputs);\\n\\n    // Free up storage slots to refund gas. Note that using a loop here\\n    // would result in lower gas savings.\\n    delete leafQueue.levels[_level];\\n  }\\n\\n  /// @notice Hash the contents of the specified level and the specified leaf.\\n  /// @param _level The level to hash.\\n  /// @param _leaf The leaf include with the level.\\n  /// @return hashed The hash of the level and leaf.\\n  function hashLevelLeaf(uint256 _level, uint256 _leaf) public view override returns (uint256 hashed) {\\n    uint256[5] memory inputs;\\n    inputs[0] = leafQueue.levels[_level][0];\\n    inputs[1] = leafQueue.levels[_level][1];\\n    inputs[2] = leafQueue.levels[_level][2];\\n    inputs[3] = leafQueue.levels[_level][3];\\n    inputs[4] = _leaf;\\n    hashed = hash5(inputs);\\n  }\\n\\n  /// @notice An internal function which fills a subtree\\n  /// @param _level The level at which to fill the subtree\\n  function _fill(uint256 _level) internal override {\\n    while (_level < subDepth) {\\n      uint256 n = leafQueue.indices[_level];\\n\\n      if (n != 0) {\\n        // Fill the subtree level with zeros and hash the level\\n        uint256 hashed;\\n\\n        uint256[5] memory inputs;\\n        uint256 z = getZero(_level);\\n        uint8 i = 0;\\n        for (; i < n; i++) {\\n          inputs[i] = leafQueue.levels[_level][i];\\n        }\\n\\n        for (; i < hashLength; i++) {\\n          inputs[i] = z;\\n        }\\n        hashed = hash5(inputs);\\n\\n        // Update the subtree from the next level onwards with the new leaf\\n        _enqueue(hashed, _level + 1);\\n      }\\n\\n      // Reset the current level\\n      delete leafQueue.indices[_level];\\n\\n      _level++;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x49345d375ed859d017b90f3611fe1c98bd470b2a11d4ddb36545d17decf6158a\",\"license\":\"MIT\"},\"maci-contracts/contracts/trees/AccQueueQuinaryMaci.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { MerkleZeros as MerkleQuinaryMaci } from \\\"./zeros/MerkleQuinaryMaci.sol\\\";\\nimport { AccQueueQuinary } from \\\"./AccQueueQuinary.sol\\\";\\n\\n/// @title AccQueueQuinaryMaci\\n/// @notice This contract extends AccQueueQuinary and MerkleQuinaryMaci\\n/// @dev This contract is used for creating a\\n/// Merkle tree with quinary (5 leaves per node) structure\\ncontract AccQueueQuinaryMaci is AccQueueQuinary, MerkleQuinaryMaci {\\n  /// @notice Constructor for creating AccQueueQuinaryMaci contract\\n  /// @param _subDepth The depth of each subtree\\n  constructor(uint256 _subDepth) AccQueueQuinary(_subDepth) {}\\n\\n  /// @notice Returns the zero leaf at a specified level\\n  /// @param _level The level at which to return the zero leaf\\n  /// @return zero The zero leaf at the specified level\\n  function getZero(uint256 _level) internal view override returns (uint256 zero) {\\n    zero = zeros[_level];\\n  }\\n}\\n\",\"keccak256\":\"0xdee901020c21b4f7b79de35f3515ec7cba23db17c729596efb8ce06181395df9\",\"license\":\"MIT\"},\"maci-contracts/contracts/trees/EmptyBallotRoots.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nabstract contract EmptyBallotRoots {\\n  // emptyBallotRoots contains the roots of Ballot trees of five leaf\\n  // configurations.\\n  // Each tree has a depth of 10, which is the hardcoded state tree depth.\\n  // Each leaf is an empty ballot. A configuration refers to the depth of the\\n  // voice option tree for that ballot.\\n\\n  // The leaf for the root at index 0 contains hash(0, root of a VO tree with\\n  // depth 1 and zero-value 0)\\n\\n  // The leaf for the root at index 1 contains hash(0, root of a VO tree with\\n  // depth 2 and zero-value 0)\\n\\n  // ... and so on.\\n\\n  // The first parameter to the hash function is the nonce, which is 0.\\n\\n  uint256[5] internal emptyBallotRoots;\\n\\n  constructor() {\\n    emptyBallotRoots[0] = uint256(4904028317433377177773123885584230878115556059208431880161186712332781831975);\\n    emptyBallotRoots[1] = uint256(344732312350052944041104345325295111408747975338908491763817872057138864163);\\n    emptyBallotRoots[2] = uint256(19445814455012978799483892811950396383084183210860279923207176682490489907069);\\n    emptyBallotRoots[3] = uint256(10621810780690303482827422143389858049829670222244900617652404672125492013328);\\n    emptyBallotRoots[4] = uint256(17077690379337026179438044602068085690662043464643511544329656140997390498741);\\n  }\\n}\\n\",\"keccak256\":\"0x8a87b3f1ff40f4e0e39c4671440445fefe4c893fb72fc74944486df7d1d3a2d1\",\"license\":\"MIT\"},\"maci-contracts/contracts/trees/zeros/MerkleQuinaryMaci.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nabstract contract MerkleZeros {\\n  uint256[33] internal zeros;\\n\\n  // Quinary tree zeros (Keccak hash of 'Maci')\\n  constructor() {\\n    zeros[0] = uint256(8370432830353022751713833565135785980866757267633941821328460903436894336785);\\n    zeros[1] = uint256(12915444503621073454579416579430905206970714557680052030066757042249102605307);\\n    zeros[2] = uint256(15825388848727206932541662858173052318786639683743459477657913288690190505308);\\n    zeros[3] = uint256(20672917177817295069558894035958266756825295443848082659014905185716743537191);\\n    zeros[4] = uint256(448586013948167251740855715259393055429962470693972912240018559200278204556);\\n    zeros[5] = uint256(3228865992178886480410396198366133115832717015233640381802715479176981303177);\\n    zeros[6] = uint256(19116532419590876304532847271428641103751206695152259493043279205958851263600);\\n    zeros[7] = uint256(13531983203936271379763604150672239370281863210813769735936250692178889682484);\\n    zeros[8] = uint256(8276490051100115441938424474671329955897359239518198952109759468777824929104);\\n    zeros[9] = uint256(1234816188709792521426066175633785051600533236493067959807265450339481920006);\\n    zeros[10] = uint256(14253963034950198848796956783804665963745244419038717333683296599064556174281);\\n    zeros[11] = uint256(6367560368479067766970398112009211893636892126125767203198799843543931913172);\\n    zeros[12] = uint256(9086778412328290069463938062555298073857321633960448227011862356090607842391);\\n    zeros[13] = uint256(1440983698234119608650157588008070947531139377294971527360643096251396484622);\\n    zeros[14] = uint256(3957599085599383799297196095384587366602816424699353871878382158004571037876);\\n    zeros[15] = uint256(2874250189355749385170216620368454832544508482778847425177457138604069991955);\\n    zeros[16] = uint256(21009179226085449764156117702096359546848859855915028677582017987249294772778);\\n    zeros[17] = uint256(11639371146919469643603772238908032714588430905217730187804009793768292270213);\\n    zeros[18] = uint256(6279313411277883478350325643881386249374023631847602720184182017599127173896);\\n    zeros[19] = uint256(21059196126634383551994255775761712285020874549906884292741523421591865338509);\\n    zeros[20] = uint256(9444544622817172574621750245792527383369133221167610044960147559319164808325);\\n    zeros[21] = uint256(5374570219497355452080912323548395721574511162814862844226178635172695078543);\\n    zeros[22] = uint256(4155904241440251764630449308160227499466701168124519106689866311729092343061);\\n    zeros[23] = uint256(15881609944326576145786405158479503217901875433072026818450276983706463215155);\\n    zeros[24] = uint256(20831546672064137588434602157208687297579005252478070660473540633558666587287);\\n    zeros[25] = uint256(3209071488384365842993449718919243416332014108747571544339190291353564426179);\\n    zeros[26] = uint256(10030934989297780221224272248227257782450689603145083016739151821673604746295);\\n    zeros[27] = uint256(16504852316033851373501270056537918974469380446508638487151124538300880427080);\\n    zeros[28] = uint256(5226137093551352657015038416264755428944140743893702595442932837011856178457);\\n    zeros[29] = uint256(18779994066356991319291039019820482828679702085087990978933303018673869446075);\\n    zeros[30] = uint256(12037506572124351893114409509086276299115869080424687624451184925646292710978);\\n    zeros[31] = uint256(12049750997011422639258622747494178076018128204515149991024639355149614767606);\\n    zeros[32] = uint256(3171463916443906096008599541392648187002297410622977814790586531203175805057);\\n  }\\n}\\n\",\"keccak256\":\"0xc666c20da86841a737568f4239f31887d29def5aa39661f08b266dfe3278c60e\",\"license\":\"MIT\"},\"maci-contracts/contracts/utilities/DomainObjs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @title DomainObjs\\n/// @notice An utility contract that holds\\n/// a number of domain objects and functions\\ncontract DomainObjs {\\n  /// @notice the length of a MACI message\\n  uint8 public constant MESSAGE_DATA_LENGTH = 10;\\n\\n  /// @notice voting modes\\n  enum Mode {\\n    QV,\\n    NON_QV\\n  }\\n\\n  /// @title Message\\n  /// @notice this struct represents a MACI message\\n  /// @dev msgType: 1 for vote message, 2 for topup message (size 2)\\n  struct Message {\\n    uint256 msgType;\\n    uint256[MESSAGE_DATA_LENGTH] data;\\n  }\\n\\n  /// @title PubKey\\n  /// @notice A MACI public key\\n  struct PubKey {\\n    uint256 x;\\n    uint256 y;\\n  }\\n\\n  /// @title StateLeaf\\n  /// @notice A MACI state leaf\\n  /// @dev used to represent a user's state\\n  /// in the state Merkle tree\\n  struct StateLeaf {\\n    PubKey pubKey;\\n    uint256 voiceCreditBalance;\\n    uint256 timestamp;\\n  }\\n}\\n\",\"keccak256\":\"0x01994d163c6f1bf7020542ac40540c579dd2c9ec37a0cf3697a715261a0109fb\",\"license\":\"MIT\"},\"maci-contracts/contracts/utilities/Params.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { IMACI } from \\\"../interfaces/IMACI.sol\\\";\\nimport { AccQueue } from \\\"../trees/AccQueue.sol\\\";\\nimport { TopupCredit } from \\\"../TopupCredit.sol\\\";\\n\\n/// @title Params\\n/// @notice This contracts contains a number of structures\\n/// which are to be passed as parameters to Poll contracts.\\n/// This way we can reduce the number of parameters\\n/// and avoid a stack too deep error during compilation.\\ncontract Params {\\n  /// @notice A struct holding the depths of the merkle trees\\n  struct TreeDepths {\\n    uint8 intStateTreeDepth;\\n    uint8 messageTreeSubDepth;\\n    uint8 messageTreeDepth;\\n    uint8 voteOptionTreeDepth;\\n  }\\n\\n  /// @notice A struct holding the max values for the poll\\n  struct MaxValues {\\n    uint256 maxMessages;\\n    uint256 maxVoteOptions;\\n  }\\n\\n  /// @notice A struct holding the external contracts\\n  /// that are to be passed to a Poll contract on\\n  /// deployment\\n  struct ExtContracts {\\n    IMACI maci;\\n    AccQueue messageAq;\\n    TopupCredit topupCredit;\\n  }\\n}\\n\",\"keccak256\":\"0x6c9d1840a1b8c9b33d889d0c5ef377781398fdcc48b05f70045fe897da7eba3f\",\"license\":\"MIT\"},\"maci-contracts/contracts/utilities/Utilities.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\nimport { DomainObjs } from \\\"./DomainObjs.sol\\\";\\nimport { Hasher } from \\\"../crypto/Hasher.sol\\\";\\nimport { SnarkConstants } from \\\"../crypto/SnarkConstants.sol\\\";\\n\\n/// @title Utilities\\n/// @notice An utility contract that can be used to:\\n/// * hash a state leaf\\n/// * pad and hash a MACI message\\n/// * hash a MACI message and an encryption public key\\ncontract Utilities is SnarkConstants, DomainObjs, Hasher {\\n  /// @notice custom errors\\n  error InvalidMessage();\\n\\n  /// @notice An utility function used to hash a state leaf\\n  /// @param _stateLeaf the state leaf to be hashed\\n  /// @return ciphertext The hash of the state leaf\\n  function hashStateLeaf(StateLeaf memory _stateLeaf) public pure returns (uint256 ciphertext) {\\n    uint256[4] memory plaintext;\\n    plaintext[0] = _stateLeaf.pubKey.x;\\n    plaintext[1] = _stateLeaf.pubKey.y;\\n    plaintext[2] = _stateLeaf.voiceCreditBalance;\\n    plaintext[3] = _stateLeaf.timestamp;\\n\\n    ciphertext = hash4(plaintext);\\n  }\\n\\n  /// @notice An utility function used to pad and hash a MACI message\\n  /// @param dataToPad the data to be padded\\n  /// @param msgType the type of the message\\n  /// @return message The padded message\\n  /// @return padKey The padding public key\\n  /// @return msgHash The hash of the padded message and encryption key\\n  function padAndHashMessage(\\n    uint256[2] memory dataToPad,\\n    uint256 msgType\\n  ) public pure returns (Message memory message, PubKey memory padKey, uint256 msgHash) {\\n    // add data and pad it to 10 elements (automatically cause it's the default value)\\n    uint256[10] memory dat;\\n    dat[0] = dataToPad[0];\\n    dat[1] = dataToPad[1];\\n\\n    padKey = PubKey(PAD_PUBKEY_X, PAD_PUBKEY_Y);\\n    message = Message({ msgType: msgType, data: dat });\\n    msgHash = hashMessageAndEncPubKey(message, padKey);\\n  }\\n\\n  /// @notice An utility function used to hash a MACI message and an encryption public key\\n  /// @param _message the message to be hashed\\n  /// @param _encPubKey the encryption public key to be hashed\\n  /// @return msgHash The hash of the message and the encryption public key\\n  function hashMessageAndEncPubKey(\\n    Message memory _message,\\n    PubKey memory _encPubKey\\n  ) public pure returns (uint256 msgHash) {\\n    if (_message.data.length != 10) {\\n      revert InvalidMessage();\\n    }\\n\\n    uint256[5] memory n;\\n    n[0] = _message.data[0];\\n    n[1] = _message.data[1];\\n    n[2] = _message.data[2];\\n    n[3] = _message.data[3];\\n    n[4] = _message.data[4];\\n\\n    uint256[5] memory m;\\n    m[0] = _message.data[5];\\n    m[1] = _message.data[6];\\n    m[2] = _message.data[7];\\n    m[3] = _message.data[8];\\n    m[4] = _message.data[9];\\n\\n    msgHash = hash5([_message.msgType, hash5(n), hash5(m), _encPubKey.x, _encPubKey.y]);\\n  }\\n}\\n\",\"keccak256\":\"0xf556ba98b831bfb30bd4931f0a40869d3cdcf8053eac90073465f494d5f238d7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608080604052614b9190816100128239f3fe60806040818152600490813610156200001757600080fd5b600092833560e01c908163683f3dc31462000341575063b43c4969146200003d57600080fd5b346200028a57610180806003193601126200033d57816023193601126200033d5760803660631901126200033d578160e3193601126200033d57610124356001600160a01b0381811692918390036200029857610144359281841680940362000339576101643592828416809403620003355760443591660400000000000083101562000325576084359060ff821680920362000321578751906122649182810167ffffffffffffffff938282108583111762000304576020918391620028f883398681520301908cf080156200031757861697895191606083018381108582111762000304578b52825260208201938985528a83019182528a519661256a8089019589871090871117620002f0576200038e89398c35855260243560208601528b85015260643560ff8116809103620002ec576060850152608084015260a43560ff8116809103620002e85760a084015260c4359160ff8316809303620002e857869488809492819360c088015260e43560e08801526101043561010088015251166101208601525116610140840152511661016082015203019087f08015620002de571693823b156200029857835186816024818363f2fde38b60e01b988983528b888401525af18015620002d457620002be575b50843b15620002985783516370e39c9560e11b8152869081818481838b5af18015620002b4576200029c575b5050843b1562000298578351928352820152838160248183875af180156200028e5762000272575b6020838351908152f35b6200027e849162000362565b6200028a578262000268565b8280fd5b82513d86823e3d90fd5b8580fd5b620002a79062000362565b6200029857853862000240565b86513d84823e3d90fd5b620002cc9096919662000362565b943862000214565b85513d89823e3d90fd5b84513d88823e3d90fd5b8c80fd5b8d80fd5b50634e487b7160e01b8e5260418d5260248efd5b634e487b7160e01b8e5260418d5260248efd5b89513d8d823e3d90fd5b8980fd5b86516302c3596560e51b81528890fd5b8780fd5b8680fd5b8380fd5b8490346200035e57816003193601126200035e5780600a60209252f35b5080fd5b67ffffffffffffffff81116200037757604052565b634e487b7160e01b600052604160045260246000fdfe60e0806040526200256a80380380916200001a828562000527565b833981018181039161018083126200048c578051926200003e83602084016200054b565b6080605f198301126200048c57604051946001600160401b03926080870184811188821017620004bd57604052620000796060860162000585565b8752620000896080860162000585565b60208801526200009c60a0860162000585565b94604088019586526060620000c9620000b860c0840162000585565b98828b01998a5260e084016200054b565b9261011f1901126200048c576040516060810181811087821117620004bd576040526101208201516001600160a01b03811681036200048c578152610140820151916001600160a01b03831683036200048c57602082019283526101600151926001600160a01b03841684036200048c576040820193845233156200050e5760008054336001600160a01b0319821681178355604051939290916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a37f0ad794e7fb50257e0edc93fe4616c69ea691e7a6c653333b6a5b507d798947276001557ec31c90221285dc87ee66daadc19f64f922e45a613f4f5429d74ddc7d66e0236002557f2afdf0e1d10d07d0df3a8481202bf2595108195e34d4ccb88742641c576aa77d6003557f177bbb5acaafc1f1deb73b8ae33f97132089ab84039048a096e202b1f8c429106004557f25c1a155f21ae70ca3b8bdb27961efdee58bdafff83274c18dd37d0f0a8bfbb5600555805191602082019283517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001808080858196099380098180828187620292fc090894620292f809096001088181811115620004f8575b508103908111620004e25760009008620004d35750519081600755519081600855604051978860408101109060408a011117620004bd57604088016040526040368937875260208701526040516314d2f97b60e11b8152956000600488015b60028210620004a657505050602086604481739A9f2CCfdE556A7E9Ff0848998Aa4a0CFD8863AE5af480156200049a576000906200045c575b6020965060805260018060a01b0390511660018060a01b0319601154161760115560018060a01b0390511660018060a01b0319601254161760125560018060a01b0390511660018060a01b0319601354161760135560c0528051600e550151600f5560ff83511663ff00000062ff000061ff00602060105497015160081b16935160101b16935160181b169363ffffffff1916171717176010554260a052604051611fd59081620005958239608051816109eb015260a051818181610540015281816108db01528181610a2d01528181610d1b015281816112fb015281816113d3015281816115a90152611982015260c0518181816105670152818161090201528181610a5401528181610cf70152818161131e015281816113fa015281816115d001526119a90152f35b506020863d60201162000491575b81620004796020938362000527565b810103126200048c576020955162000331565b600080fd5b3d91506200046a565b6040513d6000823e3d90fd5b6020806001928551815201930191019091620002f8565b634e487b7160e01b600052604160045260246000fd5b6379fae7af60e01b8152600490fd5b634e487b7160e01b600052601160045260246000fd5b909150828101809111620004e257903862000299565b604051631e4fbdf760e01b815260006004820152602490fd5b601f909101601f19168101906001600160401b03821190821017620004bd57604052565b91908260409103126200048c57604080519081016001600160401b03811182821017620004bd576040526020808294805184520151910152565b519060ff821682036200048c5756fe6080604052600436101561001257600080fd5b6000803560e01c8062329f2f146119645780630396a0ce1461193f57806306912d3c1461182d5780630f4cf6921461180f578063167fd483146117df578063184ff47f1461159557806331e766a514611570578063394b78a2146113a35780633dfb88b2146113445780634909229f146112e45780634f367f0f146112bf57806358bfc379146111755780635bb93995146111445780635d5909dd1461112657806362a361bb14611101578063683f3dc3146110e5578063715018a61461108b5780637296aaea14610bae5780637d0a81c814610aff57806386f3c3f714610a0e5780638aa0ba92146109d35780638da5cb5b146109ac5780639c971729146108b95780639cfced9714610861578063ac98e5df1461081f578063ae93a21214610520578063b5f38c81146104fd578063bc14ee2b146104c0578063bea140b314610460578063c17268d914610442578063e1c7392a1461023d578063f2fde38b146101a75763fba630f21461018757600080fd5b346101a457806003193601126101a4576020600954604051908152f35b80fd5b50346101a45760203660031901126101a4576004356001600160a01b0381811691829003610239576101d7611f53565b811561022057600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b604051631e4fbdf760e01b815260048101849052602490fd5b8280fd5b50346101a457806003193601126101a45760065460ff81166104305760019060ff1916176006556001600c5401600c5560405161027981611a96565b60403682377f12817f4161f2f5ded33f26c55735a77e80e4f8975483c8c2704745128417f7118152602090818101838152604051916102b783611a96565b600083526040516102c781611ab2565b84610140948536843701526000846040516102e181611a96565b8281520152604051926102f384611ab2565b368437518252518282015260405161030a81611a96565b7f171e826ad4a870fd925e0bf0e87884e70e080879c2205ef10114f28a3b6f6dd78152828101927f2bd407d897fbbca9f88adfd2d15252e69de8c1564eb4d3d27162e259172f1a1d84526040519261036184611a96565b600184528184015284816103758486611c85565b601254604051631ffc735d60e01b815260048101929092529092839160249183916001600160a01b03165af18015610425576103f3575b857fe2067f06dd7b8159b21a5490f8663f6bb031d9b35ed6d298b5489674cb9cda4b6101a08688876103e16040518094611b87565b5161016083015251610180820152a180f35b819392933d831161041e575b6104098183611b23565b81010312610419579038806103ac565b600080fd5b503d6103ff565b6040513d88823e3d90fd5b6040516342a2e18d60e01b8152600490fd5b50346101a457806003193601126101a4576020600b54604051908152f35b50346101a45760603660031901126101a45736602312156101a45760405161048781611b07565b606481368211610419576020926004905b8382106104b157846104a984611eec565b604051908152f35b81358152908401908401610498565b50346101a457806003193601126101a457606060018060a01b03806011541690806012541690601354169060405192835260208301526040820152f35b50346101a457806003193601126101a457602060ff600a54166040519015158152f35b50346101a45760208060031936011261081b5761053b611f53565b6105657f000000000000000000000000000000000000000000000000000000000000000042611c62565b7f0000000000000000000000000000000000000000000000000000000000000000101561080957600a5460ff81166107f75760ff1916600117600a55601154604051630c0775ff60e31b81526001600160a01b03918216908381600481855afa9081156107af578391859187916107ba575b5060046040518094819363b6a64acd60e01b8352165afa9081156107af578591610782575b50156107715782849160246040518094819363dd0982a360e01b835260043560048401525af1908115610766578491610739575b50806009556040519061064282611b07565b6060368337815260ff60105460181c16600019810160ff81116107255760051115610711579161068084926004945484820152866040820152611eec565b600b55601154166040519283809263122db15360e01b82525afa9182156107065783926106d8575b505080600d556009547fa80928657383ff9d374f1409cf51e7460a64472b6baeb5ded1199830c15bae018380a380f35b90809250813d83116106ff575b6106ef8183611b23565b81010312610419575138806106a8565b503d6106e5565b6040513d85823e3d90fd5b634e487b7160e01b85526032600452602485fd5b634e487b7160e01b86526011600452602486fd5b90508281813d831161075f575b6107508183611b23565b81010312610419575138610630565b503d610746565b6040513d86823e3d90fd5b604051624a03c360e31b8152600490fd5b6107a29150843d86116107a8575b61079a8183611b23565b810190611d63565b386105fc565b503d610790565b6040513d87823e3d90fd5b92505081813d83116107f0575b6107d18183611b23565b810103126107ec575182811681036107ec57838391386105d7565b8480fd5b503d6107c7565b60405163084ef7b960e41b8152600490fd5b604051630931513d60e11b8152600490fd5b5080fd5b50346101a457806003193601126101a457608060105460ff604051918181168352818160081c166020840152818160101c16604084015260181c166060820152f35b50346101a45760a03660031901126101a45736602312156101a45760405161088881611aeb565b60a481368211610419576020926004905b8382106108aa57846104a984611e85565b81358152908401908401610899565b50346101a45760203660031901126101a4576004356108d6611f53565b6109007f000000000000000000000000000000000000000000000000000000000000000042611c62565b7f000000000000000000000000000000000000000000000000000000000000000010156108095760125482906001600160a01b0316803b1561081b5781809160246040518094819363c15da65b60e01b83528860048401525af180156109a15761098d575b50807f1245b881cb30fdad22b2f9fde2d5c2a3605bbdf272d5e8a2235d8c9e81aba2ce91a280f35b61099690611a6c565b61081b578138610965565b6040513d84823e3d90fd5b50346101a457806003193601126101a457546040516001600160a01b039091168152602090f35b50346101a457806003193601126101a45760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b50346101a457610a1d36611c4c565b610a28929192611f53565b610a527f000000000000000000000000000000000000000000000000000000000000000042611c62565b7f000000000000000000000000000000000000000000000000000000000000000010156108095760ff600a54166107f7576011546001600160a01b031690813b1561023957829160448392604051948593849263cfa1fa0360e01b845289600485015260248401525af180156109a157610af0575b50907fbe5eae95ff0a9a2779506ae62da06dda1e349311d3f2b6ceb990ea42b6a5f20b8280a280f35b610af990611a6c565b38610ac7565b50346101a45736600319016080811261081b5760405191606083019183831067ffffffffffffffff841117610b9a57604090838252126101a45760206104a98484610b4981611a96565b6004358152602435608083015281528281016044358152604082019060643582528460405193610b7885611acf565b6080368637805151855251015185840152516040830152516060820152611d7b565b634e487b7160e01b82526041600452602482fd5b50346101a45760403660031901126101a45767ffffffffffffffff806004351161081b5736602360043501121561081b5780600435600401351161081b57366024610160600435600401350260043501011161081b57806024351161081b5736602360243501121561081b5760243560040135116101a45736602480356004013560061b81350101116101a45760243560040135600435600401350361107957805b600435600401358110610c61575080f35b6024356004013581101561106557610160600435828202013603602319011261081b5760405190610c9182611a96565b60043561016082020160248101358352366063909101121561023957604051610cb981611ab2565b803661018461016085026004350101116107ec57604461016084026004350101905b61018461016085026004350101821061105557505060208301527f0000000000000000000000000000000000000000000000000000000000000000610d407f000000000000000000000000000000000000000000000000000000000000000042611c62565b101561104357600c54600e5481101561103157600080516020611f8083398151915280602435600685901b01604401358009818060248035600688901b0101358009620292fc090884600080516020611f808339815191528080602435600688901b0160440135800981806024803560068b901b0101358009620292f80909600108600080516020611f8083398151915280602435600688901b0160440135800981806024803560068b901b0101358009620292fc09081115610f65575b600080516020611f8083398151915291610e439083808060243560068a901b0160440135800981806024803560068d901b0101358009620292f8090960010890611c62565b08610f5357600101600c556001825260406023198260061b602435013603011261023957826020610e97604051610e7981611a96565b60248035600687901b01908101358252604401358382015285611c85565b601254604051631ffc735d60e01b815260048101929092529092839160249183916001600160a01b03165af1801561076657610f28575b507fe2067f06dd7b8159b21a5490f8663f6bb031d9b35ed6d298b5489674cb9cda4b6101a0600193610f036040518092611b87565b60248035600686901b019081013561016083015260440135610180820152a101610c50565b602090813d8311610f4c575b610f3e8183611b23565b810103126102395738610ece565b503d610f34565b6040516379fae7af60e01b8152600490fd5b50600080516020611f8083398151915290508080602435600686901b01604401358009818060248035600689901b0101358009620292fc090801600080516020611f8083398151915280602435600686901b01604401358009818060248035600689901b0101358009620292fc09081161101d57600080516020611f8083398151915284610e43828080602435600689901b0160440135800981806024803560068c901b0101358009620292fc090801925050610dfe565b634e487b7160e01b84526011600452602484fd5b604051631ec0b2f760e01b8152600490fd5b60405163148fb9a960e31b8152600490fd5b8135815260209182019101610cdb565b634e487b7160e01b82526032600452602482fd5b60405163ca3487f760e01b8152600490fd5b50346101a457806003193601126101a4576110a4611f53565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346101a457806003193601126101a4576020604051600a8152f35b50346101a45760403660031901126101a45760206104a961112136611b45565b611e1e565b50346101a457806003193601126101a4576020600d54604051908152f35b50346101a45760206104a961115836611c4c565b6040519161116583611a96565b6040368437825283820152611e1e565b50346101a457602090816003193601126101a45767ffffffffffffffff60043581811161023957366023820112156102395780600401359182116112ab578160051b90604051926111c886840185611b23565b835284830160248193830101913683116112a75791859391602488969401905b8282106112955750506040519251858401929150845b81811061127c575050508161121b9103601f198101835282611b23565b6040519080519084845b8381106112675750505081908101838152039060025afa1561125b57600080516020611f80833981519152905106604051908152f35b604051903d90823e3d90fd5b82810182015185820152879550869101611225565b82518452889688965093840193909201916001016111fe565b813581528795509086019086016111e8565b8580fd5b634e487b7160e01b83526041600452602483fd5b50346101a457806003193601126101a4576040600d54600c5482519182526020820152f35b50346101a457806003193601126101a457604080517f000000000000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000006020820152f35b50346101a45760803660031901126101a45736602312156101a45760405161136b81611acf565b806084913660841161139f57602093506004905b83821061139057846104a984611d7b565b8135815290840190840161137f565b8380fd5b50346101a4576101a08060031936011261081b576113c036611bbb565b90604036610163190112610239576113f87f000000000000000000000000000000000000000000000000000000000000000042611c62565b7f0000000000000000000000000000000000000000000000000000000000000000111561104357600c5491600e548310156110315761016435926101843590600080516020611f8083398151915286818780098280808780098180828187620292fc090894620292f80909600108908082811115611542575b509061147c91611c62565b08610f5357600101600c55600182528460206114a061149a36611c21565b85611c85565b601254604051631ffc735d60e01b815260048101929092529092839160249183916001600160a01b03165af1801561042557611517575b507fe2067f06dd7b8159b21a5490f8663f6bb031d9b35ed6d298b5489674cb9cda4b936115076040518094611b87565b610160830152610180820152a180f35b602090813d831161153b575b61152d8183611b23565b810103126107ec57386114d7565b503d611523565b809293508491500180911161155c5788919061147c611471565b634e487b7160e01b89526011600452602489fd5b50346101a457806003193601126101a457604060075460085482519182526020820152f35b50346101a4576115a436611c4c565b6115ce7f000000000000000000000000000000000000000000000000000000000000000042611c62565b7f0000000000000000000000000000000000000000000000000000000000000000111561104357600c54600e5481101561103157600101600c556013546040516323b872dd60e01b81523360048201523060248201526044810183905260209285926001600160a01b039190859084906064908290889087165af19283156107665785936117c2575b506040519561166587611a96565b604036883786528286019081526040519561167f87611a96565b84875260405161168e81611ab2565b846101409889368437015284846040516116a781611a96565b8281520152604051966116b988611ab2565b368837518652518286015260246117386040516116d581611a96565b7f171e826ad4a870fd925e0bf0e87884e70e080879c2205ef10114f28a3b6f6dd781527f2bd407d897fbbca9f88adfd2d15252e69de8c1564eb4d3d27162e259172f1a1d858201526040519761172a89611a96565b600289528589015287611c85565b9160125416916040519485938492631ffc735d60e01b845260048401525af1801561076657611799575b837f935afc7bb7cc33eb3e24e20dcfc75f5b21fa58e9c82cca06435238efaf9a3a58610160856117956040518092611b87565ba180f35b813d83116117bb575b6117ac8183611b23565b8101031261081b573880611762565b503d6117a2565b6117d890843d86116107a85761079a8183611b23565b5038611657565b50346101a4576101a03660031901126101a45760206104a961180036611bbb565b61180936611c21565b90611c85565b50346101a457806003193601126101a4576020600c54604051908152f35b50346101a45760603660031901126101a4576101c09061184c36611b45565b906040519061185a82611a96565b808252602092839160405161186e81611ab2565b83610140958636843701528260405161188681611a96565b82815201526040519261189884611ab2565b36843780518352015182820152604051906118b282611a96565b7f171e826ad4a870fd925e0bf0e87884e70e080879c2205ef10114f28a3b6f6dd78252828201907f2bd407d897fbbca9f88adfd2d15252e69de8c1564eb4d3d27162e259172f1a1d82526040519361190985611a96565b604435855284015261191b8284611c85565b916119296040518095611b87565b51610160840152516101808301526101a0820152f35b50346101a457806003193601126101a4576040600e54600f5482519182526020820152f35b50346101a457806003193601126101a45761197d611f53565b6119a77f000000000000000000000000000000000000000000000000000000000000000042611c62565b7f0000000000000000000000000000000000000000000000000000000000000000101561080957601254601080546040516324a47aeb60e01b8152911c60ff166004820152906020908290602490829086906001600160a01b03165af19081156109a1578291611a3a575b507fc5624680ab5d50c84507f9e0dc2032163de2bda906ab8a661a53dd4d43bd5dc78280a280f35b90506020813d602011611a64575b81611a5560209383611b23565b8101031261081b575138611a12565b3d9150611a48565b67ffffffffffffffff8111611a8057604052565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff821117611a8057604052565b610140810190811067ffffffffffffffff821117611a8057604052565b6080810190811067ffffffffffffffff821117611a8057604052565b60a0810190811067ffffffffffffffff821117611a8057604052565b6060810190811067ffffffffffffffff821117611a8057604052565b90601f8019910116810190811067ffffffffffffffff821117611a8057604052565b80602312156104195760405190611b5b82611a96565b81604491604411610419576004905b828210611b775750505090565b8135815260209182019101611b6a565b805182526020808092015192016000905b600a8210611ba65750505050565b82806001928651815201940191019092611b98565b906101606003198301126104195760405191611bd683611a96565b82600435815281604312156104195760405191611bf283611ab2565b82610164918211610419576024905b828210611c115750505060200152565b8135815260209182019101611c01565b6040906101631901126104195760405190611c3b82611a96565b610164358252610184356020830152565b6040906003190112610419576004359060243590565b91908203918211611c6f57565b634e487b7160e01b600052601160045260246000fd5b906020808301916040805194611c9a86611aeb565b60a0368737845151865283855101518487015281855101518287015260608551015160608701526080855101516080870152610120825195611cdb87611aeb565b60a036883760a081510151875260c0815101518688015260e08151015184880152610100815101516060880152510151608086015281519460a0860186811067ffffffffffffffff821117611a8057611d6097611d4993611d40928652518852611e85565b85870152611e85565b908401528051606084015201516080820152611e85565b90565b90816020910312610419575180151581036104195790565b60405163248f667760e01b81529060049060008284015b838210611e075750505050602081608481733Aa5ebB10DC797CAC828524e59A333d0A371443c5af4908115611dfb57600091611dcc575090565b90506020813d602011611df3575b81611de760209383611b23565b81010312610419575190565b3d9150611dda565b6040513d6000823e3d90fd5b600190835181526020809101930191019091611d92565b6040516314d2f97b60e11b815290600090600483015b60028310611e6e57505050602081604481739A9f2CCfdE556A7E9Ff0848998Aa4a0CFD8863AE5af4908115611dfb57600091611dcc575090565b600190825181526020809101920192019190611e34565b604051630926f44b60e31b815290600090600483015b60058310611ed55750505060208160a48173c6e7DF5E7b4f2A278906862b61205850344D4e7d5af4908115611dfb57600091611dcc575090565b600190825181526020809101920192019190611e9b565b6040516304b98e1d60e31b815290600090600483015b60038310611f3c575050506020816064817368B1D87F95878fE05B998F19b66F4baba5De1aed5af4908115611dfb57600091611dcc575090565b600190825181526020809101920192019190611f02565b6000546001600160a01b03163303611f6757565b60405163118cdaa760e01b8152336004820152602490fdfe30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001a2646970667358221220885293766f7d1db200f1d820722de7fbb2d312142c8c0536813c0bf4c2a107e864736f6c6343000818003360e0346200067c57601f6200226438819003918201601f19168301916001600160401b0383118484101762000681578084926020946040528339810103126200067c575133156200066357600054906040513360018060a01b0384167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a381156200065457506020811162000635576001600160a81b03199091163360ff60a01b1916176000556080819052600560a052620000be9062000697565b60c0527f12817f4161f2f5ded33f26c55735a77e80e4f8975483c8c2704745128417f711610172557f1c8de1edeabc24fc4c1595acaabb70be9b70f351d58c6fa338e1e9a994413bfb610173557f22fcda488c14b34fc60eb073fbe92fe10793e2ab14682e0f057332ddbef3d55c610174557f2db474db7c7212646cb15c6177d87be30711e6c04f1139d8e495ef1d1d998227610175557efde404053ec39a19f6ac347121a2264815dda84f910a388cb372e967a5d08c610176557f0723792ffab6ec6cfb3ece1509b9b4fb07e5bdb2299d1538e6e1db916f90cf89610177557f2a4392ec4e3d1811cd6a950cc865ee6f2342910a6551c5dce38cb995576c7c70610178557f1dead4c14f75e9d8449c80b648dcd4694c2ee50da2ba16e5e438f0d77ab02e34610179557f124c53ce0953fffb7ab5e3c143df6cd48ba747d3959fcb8086405d763ed5455061017a557f02bae19605746a8cd3f0927b2c01630f36f4d1bab9216ca839833e7ff6efa20661017b557f1f8375099becf17173d457d0d07bfb74c7067df1143b5ad987046e8e66817bc961017c557f0e13e954d61bb3fa3b03e7d136ca909b610fa2ca4443d920d94d16684f2b83d461017d557f1416ef2fc4f88fcfc4f9eb12f8e214b1c3e31c6c10ece9cfa51f078a3bbf345761017e557f032f915ff71e198a7955d2697249f40fb94c65812ed24e670c9700f52fdf6e0e61017f557f08bfebf4b3ddb0f8c51dd40193f5996da9f3d799ee0d8beb6be4038132df60b4610180557f065ac498cf4a5acaeb3b6cee826da9f834c961fa39feff6ae925b90dff79b613610181557f2e72c628101a93201b912a3e3fe96d39b0a9076ec39b7935a015c59bb32b8a2a610182557f19bba68e7b9da1e6ec42e52d7ab2adaf3b6a5521b1a454ec70f62e0ab702c085610183557f0de1f72745a5af2a34cac412e00eb6c8b5db1f3b52fa1bff88076c2726b83b08610184557f2e8f152603b2fac10d6a14c841327c23c502537367ccb1e42fab9a3bd9db2a8d610185557f14e16c3e0dcfd7e621a32627ebf37f6c0afb4467d34c7b7aeffded11769dec85610186557f0be1e62127948b4805c85a1d836574f0892ca6473fcde98f3fd1781248a9768f610187557f0930288fbd7c849197c8372f1dd8f9087f8a03f09b9cd904a469c15ef6b1b515610188557f231cac34e215e3f404d2fcfb79e0705deeb3d40978f0ee31072f6cbc1b579e33610189557f2e0e3cd2718ac7199b81dc14e841de40a9536b7ffe95fa1fc9c6b799e43e2c9761018a557f0718452506f0a232e98966d84b1a4675a66bd80263a2dc58bdac873825752fc361018b557f162d4ed998307d6e132edbf5c11f62f53d4636aa10cb3c2244c2bf5577168c3761018c557f247d6a5544a8f295a894ae77c7efcdcbf52e3bf4e5d0c0d2f40557a61d44984861018d557f0b8de3868471f109e91670daca698dba917d1c5535821f33aa9598d1db8e3d1961018e557f29851997020f527c92e20f030d232b81d334144a641e6a8866b46dd925005bbb61018f557f1a9cfcbe29a2b6503a03049727c0bca3111afd62f2836f392080321d1b4ef642610190557f1aa3ead91fa89cc1d6cb1d0eb76a27190c6abfdd3265d6d0a1e5c58feddaddf6610191557f0702fc26a7d367e6677efefd95204a7e00144c2fc7dbc2a581aa00d99f51f08161019255604051611b3f908162000725823960805181818161025c015281816102d601528181610c3a01528181610ff7015281816113c0015281816114e10152818161154f015281816117aa01526118a0015260a05181818161042c01528181610ce401528181610fd401528181611194015281816113690152818161166b01528181611780015281816118c901526119b5015260c05181818161022d0152818161051b01528181610c0301526113070152f35b60449060405190637ccdcc9760e11b8252600482015260206024820152fd5b63682e504160e11b8152600490fd5b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b80156200071e57600190602081108216604e8210831617620007165781906005925b808211620006e957505081600019048111620006d3570290565b634e487b7160e01b600052601160045260246000fd5b909280600019048111620006d3578184166200070c575b800292811c90620006b9565b8092029162000700565b905060050a90565b5060019056fe60406080815260048036101561001457600080fd5b600091823560e01c80631b9b8aa714610cc85780631ffc735d14610ba957806324a47aeb14610b815780633bfa6fce14610b645780633dfb88b214610a8a5780633e1a8cc114610a5057806358bfc379146108f95780635bb93995146108c85780635bf1fa4d1461085257806362a361bb146107f757806369e7c586146107cf578063715018a61461077557806381d6a24a1461074f5780638da5cb5b146107275780639cfced97146106cb578063a27154ba146106b0578063b6a64acd1461068b578063bea140b31461056b578063c00bdbcc146104da578063c15da65b146104b2578063d9c55ce114610206578063dda89a6e146101e2578063e93fb4d4146101b85763f2fde38b1461012857600080fd5b346101b45760203660031901126101b4576001600160a01b038235818116939192908490036101b057610159611742565b831561019a57505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8480fd5b8280fd5b5082346101df5760203660031901126101df57506101d86020923561170e565b9051908152f35b80fd5b838234610202578160031936011261020257602090610171549051908152f35b5080fd5b50829034610202578160031936011261020257610221611742565b610171908154906102537f00000000000000000000000000000000000000000000000000000000000000008093610f20565b6102d4576102807f000000000000000000000000000000000000000000000000000000000000000061196e565b90600154855261014c6020528420555b600154600181018091116102c15790816102ac92600155610f0d565b90558061016f5561016e60ff19815416905580f35b634e487b7160e01b845260118552602484fd5b7f0000000000000000000000000000000000000000000000000000000000000000845b8181106103605750602181101561034d5760021b6002015490600154855261014c6020528420558360025b60868110610339575050610334610eda565b610290565b61034582820182610ef6565b018490610322565b634e487b7160e01b855260328652602485fd5b60218110158061038d5781608601908154806103a0575b5061038d5790866103889255610f65565b6102f7565b634e487b7160e01b875260328852602487fd5b9585979193959894929851976103b589610d8d565b60a0368a376103c38761196e565b93865b60ff81168a81101561041c578761040857908b6103fd610403936103f0848e600290811b01610f55565b90549060031b1c92610f9c565b5261197f565b6103c6565b50634e487b7160e01b885260328d52602488fd5b509b9796959a94999850919290927f00000000000000000000000000000000000000000000000000000000000000009b5b60ff81168d81101561046d57908b6103fd610468938d610f9c565b61044d565b5050979098506104839195949992969a50611281565b600184019081851161049f57906104999161189d565b89610377565b634e487b7160e01b8a5260118b5260248afd5b505034610202576020366003190112610202576104d7906104d1611742565b356112e8565b80f35b50346101b45760203660031901126101b4576104f4611742565b600154835261014c602052813590832055610510600154610f65565b6001556101718054917f000000000000000000000000000000000000000000000000000000000000000083018093116105585750558061016f5561016e60ff19815416905580f35b634e487b7160e01b845260119052602483fd5b50346101b45760603660031901126101b45736602312156101b45780516060810181811067ffffffffffffffff8211176106785782526064813682116106745784905b82821061066457505082516304b98e1d60e31b8152938592915084015b6003831061064d575050506020826064817368B1D87F95878fE05B998F19b66F4baba5De1aed5af491821561064357839261060b575b6020838351908152f35b9091506020813d60201161063b575b8161062760209383610da9565b810103126101b45760209250519038610601565b3d915061061a565b81513d85823e3d90fd5b6001908251815260208091019201920191906105cb565b81358152602091820191016105ae565b8580fd5b634e487b7160e01b855260418452602485fd5b83823461020257816003193601126102025760209060ff61016e541690519015158152f35b83823461020257816003193601126102025760209051818152f35b5090346101b45760a03660031901126101b45736602312156101b4578151906106f382610d8d565b8160a4913660a4116106745760209550905b828210610718575050506101d890611281565b81358152908501908501610705565b838234610202578160031936011261020257905490516001600160a01b039091168152602090f35b5082346101df57806003193601126101df57506101705460015482519182526020820152f35b83346101df57806003193601126101df5761078e611742565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b83823461020257816003193601126102025760209060ff61016e5460081c1690519015158152f35b5090346101b457816003193601126101b45736602312156101b45781519061081e82610d5b565b81604491366044116106745760209550905b828210610843575050506101d8906111df565b81358152908501908501610830565b5082346101df5761086236610dcb565b9083519261086f84610d8d565b60a036853760218210156108b557509060056020956101d8949360021b908160020154855260038201548886015281015486850152015460608301526080820152611281565b634e487b7160e01b815260328652602490fd5b838234610202576020906101d86108de36610dcb565b8351916108ea83610d5b565b843684378252848201526111df565b5082346101df576020928360031936011261020257803567ffffffffffffffff91828211610a4c5736602383011215610a4c5781810135928311610a3957508160051b9084519261094c87840185610da9565b835285830160248193830101913683116106745791859391602489969401905b828210610a2757505086519251858401929150845b818110610a0e575050508161099e9103601f198101835282610da9565b84519080519084845b8381106109f95750505081908101838152039060025afa156109ee577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000019051069051908152f35b9051903d90823e3d90fd5b828101820151858201528795508691016109a7565b8251845289968896509384019390920191600101610981565b8135815287955090860190860161096c565b634e487b7160e01b845260419052602483fd5b8380fd5b5082346101df57806003193601126101df575060ff61016e541615610a7d5760209061016f549051908152f35b51631e596e4360e11b8152fd5b50346101b45760803660031901126101b45736602312156101b4578051916080830183811067ffffffffffffffff821117610b515782526084833682116106745782905b828210610b41575050825163248f667760e01b8152939050848285015b838210610b2a5750505050602082608481733Aa5ebB10DC797CAC828524e59A333d0A371443c5af491821561064357839261060b576020838351908152f35b600190835181526020809101930191019091610aeb565b8135815260209182019101610ace565b634e487b7160e01b855260418252602485fd5b8382346102025781600319360112610202576020906101d861118e565b5082346101df5760203660031901126101df57506101d8602092610ba3611742565b35610fad565b50346101b45760203660031901126101b457610bc3611742565b61017192835492610bd4813561177d565b60019460018501808611610cb5578155610c2890610bf0610eda565b8361016f5561016e60ff198154169055547f000000000000000000000000000000000000000000000000000000000000000090610f20565b15610c38575b6020848451908152f35b7f0000000000000000000000000000000000000000000000000000000000000000906021821015610ca25750819060021b6002018054600154835261014c60205284832055610c88600154610f65565b6001555560865b60a7811015610c2e578181558401610c8f565b634e487b7160e01b835260329052602482fd5b634e487b7160e01b845260118352602484fd5b5082346101df5760203660031901126101df57823590610d08827f0000000000000000000000000000000000000000000000000000000000000000610de6565b61017154809110610d4057506021821015610d2d576020838361014d01549051908152f35b634e487b7160e01b815260328452602490fd5b8460449184865192627289df60e61b84528301526024820152fd5b6040810190811067ffffffffffffffff821117610d7757604052565b634e487b7160e01b600052604160045260246000fd5b60a0810190811067ffffffffffffffff821117610d7757604052565b90601f8019910116810190811067ffffffffffffffff821117610d7757604052565b6040906003190112610de1576004359060243590565b600080fd5b908015610e9c578115610e95578180600114610e8d57600214610e7c5760208110610133831016604e8210600b84101617610e7757600190815b808211610e4e57505081600019048111610e38570290565b634e487b7160e01b600052601160045260246000fd5b909280600019048111610e3857818416610e6e575b800292811c90610e20565b80920291610e63565b900a90565b905060ff8111610e38576001901b90565b505050600190565b5050600090565b5050600190565b6021811015610eb65761012b0190600090565b634e487b7160e01b600052603260045260246000fd5b9060018201809211610e3857565b61014d5b61016e8110610eea5750565b60008155600101610ede565b818110610f01575050565b60008155600101610ef6565b81810292918115918404141715610e3857565b8115610f2a570690565b634e487b7160e01b600052601260045260246000fd5b6021811015610eb65760021b60a70190600090565b6004821015610eb6570190600090565b6000198114610e385760010190565b60405190610f8182610d8d565b60a0368337565b60405190610f9582610d5b565b6040368337565b906005811015610eb65760051b0190565b801561117c5760ff9061016e60ff8154161561116a576020926020831161114a57610171547f000000000000000000000000000000000000000000000000000000000000000094907f00000000000000000000000000000000000000000000000000000000000000005b816110228289610de6565b101561103b5761103461102291610f65565b9050611017565b939495505082851061112d578483036110765750505061016f54916021811015610eb65761014d01829055805461ff00191661010017905590565b61016f5495949291905b8383106110a9575050506021811015610eb65761014d01839055805461ff001916610100179055565b9091956001906110b88861196e565b60005460a0929190831c8616156110f5576110eb92506040918251926110dd84610d5b565b3684378252848201526111df565b965b019190611080565b80611127939260409081519461110a86610d8d565b368637845281878501528301528060608301526080820152611281565b966110ed565b6044858460405191627289df60e61b835260048301526024820152fd5b604051632cd31ae960e01b81526004810184905260206024820152604490fd5b604051631e596e4360e11b8152600490fd5b604051630543d40760e11b8152600490fd5b600180547f000000000000000000000000000000000000000000000000000000000000000092915b816111c18286610de6565b10156111da576111d36111c191610f65565b90506111b6565b925050565b6040516314d2f97b60e11b815290600090600483015b6002831061126a57505050602081604481739A9f2CCfdE556A7E9Ff0848998Aa4a0CFD8863AE5af490811561125e5760009161122f575090565b90506020813d602011611256575b8161124a60209383610da9565b81010312610de1575190565b3d915061123d565b6040513d6000823e3d90fd5b6001908251815260208091019201920191906111f5565b604051630926f44b60e31b815290600090600483015b600583106112d15750505060208160a48173c6e7DF5E7b4f2A278906862b61205850344D4e7d5af490811561125e5760009161122f575090565b600190825181526020809101920192019190611297565b60ff9061016e9160ff8354166116fc576101719081549081156116ea577f0000000000000000000000000000000000000000000000000000000000000000916113318382610f20565b6114c5575b50505050600190815482811461146a575061134f61118e565b90600083610170928354915b611408575b50505061138d827f0000000000000000000000000000000000000000000000000000000000000000610de6565b905483548091146113ba575b50506021811015610eb65760021b60a7015461016f5560ff19825416179055565b836113e47f000000000000000000000000000000000000000000000000000000000000000061196e565b915b8381106113f4575050611399565b61140085600085611990565b0184906113e6565b8554821015611465578015158061145c575b611453578561144a81946114398860006114348a5461170e565b611990565b6114438754610f65565b8755610f65565b9201919261135b565b50505050505050565b5080831461141a565b611360565b9050156114ac576000805261014c6020527f2f1ae789e51094ec473affec14fe3c88a47d4230101ae4544eefebff81efc6d75461016f55815460ff1916179055565b60405163042a2e7160e11b815260006004820152602490fd5b826114d7916114d2611742565b610f20565b61154d57506115057f000000000000000000000000000000000000000000000000000000000000000061196e565b60015460005261014c6020526040600020555b6001549060018201809211610e38578161153492600155610f0d565b9055600061016f55815460ff1916825538808080611336565b7f00000000000000000000000000000000000000000000000000000000000000009060005b8281106115cb5750506021811015610eb65760021b6002015460015460005261014c60205260406000205560025b608681106115b657506115b1610eda565b611518565b806115c5600480930182610ef6565b016115a0565b60218110159081610eb65780608601918254806115f9575b50610eb65760006115f49255610f65565b611572565b999792989394604097929796919651986116128a610d8d565b60a0368b376116208961196e565b956000955b8689168e811015611659578a610eb657878f986103fd8f91938f611652956103f091600290811b01610f55565b9650611625565b5092959c50929a97959998969a9390937f00000000000000000000000000000000000000000000000000000000000000009c5b808d168e8110156116b8578e9695949392918d6103fd6116ac938f610f9c565b9091929394955061168c565b5050979496939b50976116d091995099949199611281565b60018301808411610e38576116e49161189d565b386115e3565b6040516316a0341160e11b8152600490fd5b604051630d36aec160e01b8152600490fd5b80600154111561172a5760005261014c60205260406000205490565b6024906040519063042a2e7160e11b82526004820152fd5b6000546001600160a01b0316330361175657565b60405163118cdaa760e01b8152336004820152602490fd5b600019810191908211610e3857565b907f00000000000000000000000000000000000000000000000000000000000000006000198101908111917f000000000000000000000000000000000000000000000000000000000000000060005b6021811015610eb657806086019585875490610e3857858103611854575090600061184f9261184860406006611840825161180681610d8d565b60a036823760029588871b809701948554835260038801546020840152600488015490830152600587015460608301526080820152611281565b930190610ef6565b9755610f65565b6117cc565b61186e919294979650611887939550600285811b01610f55565b90919082549060031b91821b91600019901b1916179055565b0361188f5750565b6118998154610f65565b9055565b917f00000000000000000000000000000000000000000000000000000000000000009081831161195c577f0000000000000000000000000000000000000000000000000000000000000000916000198301928311935b60218110156119475780608601958587549061193257858103611854575090600061192d9261184860406006611840825161180681610d8d565b6118f3565b60246000634e487b7160e01b81526011600452fd5b60246000634e487b7160e01b81526032600452fd5b60405163d1459f7960e01b8152600490fd5b6021811015610eb657610172015490565b60ff1660ff8114610e385760010190565b9291808211611b03576119af6119a583610ea3565b90549060031b1c90565b906119d97f000000000000000000000000000000000000000000000000000000000000000061176e565b8214611a335750906119ff611a31939461186e611a04946119f985610f40565b50610f55565b610ea3565b611a1a611a158284549060031b1c90565b610f65565b825460001960039390931b92831b1916911b179055565b565b9190611a4560005460ff9060a01c1690565b15611aa05750611a9a611a76611a319495611a5e610f88565b90611a6885610f40565b5054825260208201526111df565b915b611a95611a8482610ea3565b8154906000199060031b1b19169055565b610ecc565b90611990565b9392611aaa610f74565b9260005b60ff811687811015611ade5790611ad9916103fd611ad26119a5846119f98a610f40565b9188610f9c565b611aae565b505092611afd90611a3195611af7611a9a949883610f9c565b52611281565b91611a78565b5050905056fea2646970667358221220a34d78a09c432af375505f56651e0e9f0fb24c10555ffcdc050440903cb42a6664736f6c63430008180033a2646970667358221220caf9dd60d3cc50b4a263d7b87702229abafa90d927932f500453c2c75f691ef964736f6c63430008180033",
  "deployedBytecode": "0x60806040818152600490813610156200001757600080fd5b600092833560e01c908163683f3dc31462000341575063b43c4969146200003d57600080fd5b346200028a57610180806003193601126200033d57816023193601126200033d5760803660631901126200033d578160e3193601126200033d57610124356001600160a01b0381811692918390036200029857610144359281841680940362000339576101643592828416809403620003355760443591660400000000000083101562000325576084359060ff821680920362000321578751906122649182810167ffffffffffffffff938282108583111762000304576020918391620028f883398681520301908cf080156200031757861697895191606083018381108582111762000304578b52825260208201938985528a83019182528a519661256a8089019589871090871117620002f0576200038e89398c35855260243560208601528b85015260643560ff8116809103620002ec576060850152608084015260a43560ff8116809103620002e85760a084015260c4359160ff8316809303620002e857869488809492819360c088015260e43560e08801526101043561010088015251166101208601525116610140840152511661016082015203019087f08015620002de571693823b156200029857835186816024818363f2fde38b60e01b988983528b888401525af18015620002d457620002be575b50843b15620002985783516370e39c9560e11b8152869081818481838b5af18015620002b4576200029c575b5050843b1562000298578351928352820152838160248183875af180156200028e5762000272575b6020838351908152f35b6200027e849162000362565b6200028a578262000268565b8280fd5b82513d86823e3d90fd5b8580fd5b620002a79062000362565b6200029857853862000240565b86513d84823e3d90fd5b620002cc9096919662000362565b943862000214565b85513d89823e3d90fd5b84513d88823e3d90fd5b8c80fd5b8d80fd5b50634e487b7160e01b8e5260418d5260248efd5b634e487b7160e01b8e5260418d5260248efd5b89513d8d823e3d90fd5b8980fd5b86516302c3596560e51b81528890fd5b8780fd5b8680fd5b8380fd5b8490346200035e57816003193601126200035e5780600a60209252f35b5080fd5b67ffffffffffffffff81116200037757604052565b634e487b7160e01b600052604160045260246000fdfe60e0806040526200256a80380380916200001a828562000527565b833981018181039161018083126200048c578051926200003e83602084016200054b565b6080605f198301126200048c57604051946001600160401b03926080870184811188821017620004bd57604052620000796060860162000585565b8752620000896080860162000585565b60208801526200009c60a0860162000585565b94604088019586526060620000c9620000b860c0840162000585565b98828b01998a5260e084016200054b565b9261011f1901126200048c576040516060810181811087821117620004bd576040526101208201516001600160a01b03811681036200048c578152610140820151916001600160a01b03831683036200048c57602082019283526101600151926001600160a01b03841684036200048c576040820193845233156200050e5760008054336001600160a01b0319821681178355604051939290916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a37f0ad794e7fb50257e0edc93fe4616c69ea691e7a6c653333b6a5b507d798947276001557ec31c90221285dc87ee66daadc19f64f922e45a613f4f5429d74ddc7d66e0236002557f2afdf0e1d10d07d0df3a8481202bf2595108195e34d4ccb88742641c576aa77d6003557f177bbb5acaafc1f1deb73b8ae33f97132089ab84039048a096e202b1f8c429106004557f25c1a155f21ae70ca3b8bdb27961efdee58bdafff83274c18dd37d0f0a8bfbb5600555805191602082019283517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001808080858196099380098180828187620292fc090894620292f809096001088181811115620004f8575b508103908111620004e25760009008620004d35750519081600755519081600855604051978860408101109060408a011117620004bd57604088016040526040368937875260208701526040516314d2f97b60e11b8152956000600488015b60028210620004a65750505060208660448173__$1540826e134b1b69b7091c82576ee3aadd$__5af480156200049a576000906200045c575b6020965060805260018060a01b0390511660018060a01b0319601154161760115560018060a01b0390511660018060a01b0319601254161760125560018060a01b0390511660018060a01b0319601354161760135560c0528051600e550151600f5560ff83511663ff00000062ff000061ff00602060105497015160081b16935160101b16935160181b169363ffffffff1916171717176010554260a052604051611fd59081620005958239608051816109eb015260a051818181610540015281816108db01528181610a2d01528181610d1b015281816112fb015281816113d3015281816115a90152611982015260c0518181816105670152818161090201528181610a5401528181610cf70152818161131e015281816113fa015281816115d001526119a90152f35b506020863d60201162000491575b81620004796020938362000527565b810103126200048c576020955162000331565b600080fd5b3d91506200046a565b6040513d6000823e3d90fd5b6020806001928551815201930191019091620002f8565b634e487b7160e01b600052604160045260246000fd5b6379fae7af60e01b8152600490fd5b634e487b7160e01b600052601160045260246000fd5b909150828101809111620004e257903862000299565b604051631e4fbdf760e01b815260006004820152602490fd5b601f909101601f19168101906001600160401b03821190821017620004bd57604052565b91908260409103126200048c57604080519081016001600160401b03811182821017620004bd576040526020808294805184520151910152565b519060ff821682036200048c5756fe6080604052600436101561001257600080fd5b6000803560e01c8062329f2f146119645780630396a0ce1461193f57806306912d3c1461182d5780630f4cf6921461180f578063167fd483146117df578063184ff47f1461159557806331e766a514611570578063394b78a2146113a35780633dfb88b2146113445780634909229f146112e45780634f367f0f146112bf57806358bfc379146111755780635bb93995146111445780635d5909dd1461112657806362a361bb14611101578063683f3dc3146110e5578063715018a61461108b5780637296aaea14610bae5780637d0a81c814610aff57806386f3c3f714610a0e5780638aa0ba92146109d35780638da5cb5b146109ac5780639c971729146108b95780639cfced9714610861578063ac98e5df1461081f578063ae93a21214610520578063b5f38c81146104fd578063bc14ee2b146104c0578063bea140b314610460578063c17268d914610442578063e1c7392a1461023d578063f2fde38b146101a75763fba630f21461018757600080fd5b346101a457806003193601126101a4576020600954604051908152f35b80fd5b50346101a45760203660031901126101a4576004356001600160a01b0381811691829003610239576101d7611f53565b811561022057600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b604051631e4fbdf760e01b815260048101849052602490fd5b8280fd5b50346101a457806003193601126101a45760065460ff81166104305760019060ff1916176006556001600c5401600c5560405161027981611a96565b60403682377f12817f4161f2f5ded33f26c55735a77e80e4f8975483c8c2704745128417f7118152602090818101838152604051916102b783611a96565b600083526040516102c781611ab2565b84610140948536843701526000846040516102e181611a96565b8281520152604051926102f384611ab2565b368437518252518282015260405161030a81611a96565b7f171e826ad4a870fd925e0bf0e87884e70e080879c2205ef10114f28a3b6f6dd78152828101927f2bd407d897fbbca9f88adfd2d15252e69de8c1564eb4d3d27162e259172f1a1d84526040519261036184611a96565b600184528184015284816103758486611c85565b601254604051631ffc735d60e01b815260048101929092529092839160249183916001600160a01b03165af18015610425576103f3575b857fe2067f06dd7b8159b21a5490f8663f6bb031d9b35ed6d298b5489674cb9cda4b6101a08688876103e16040518094611b87565b5161016083015251610180820152a180f35b819392933d831161041e575b6104098183611b23565b81010312610419579038806103ac565b600080fd5b503d6103ff565b6040513d88823e3d90fd5b6040516342a2e18d60e01b8152600490fd5b50346101a457806003193601126101a4576020600b54604051908152f35b50346101a45760603660031901126101a45736602312156101a45760405161048781611b07565b606481368211610419576020926004905b8382106104b157846104a984611eec565b604051908152f35b81358152908401908401610498565b50346101a457806003193601126101a457606060018060a01b03806011541690806012541690601354169060405192835260208301526040820152f35b50346101a457806003193601126101a457602060ff600a54166040519015158152f35b50346101a45760208060031936011261081b5761053b611f53565b6105657f000000000000000000000000000000000000000000000000000000000000000042611c62565b7f0000000000000000000000000000000000000000000000000000000000000000101561080957600a5460ff81166107f75760ff1916600117600a55601154604051630c0775ff60e31b81526001600160a01b03918216908381600481855afa9081156107af578391859187916107ba575b5060046040518094819363b6a64acd60e01b8352165afa9081156107af578591610782575b50156107715782849160246040518094819363dd0982a360e01b835260043560048401525af1908115610766578491610739575b50806009556040519061064282611b07565b6060368337815260ff60105460181c16600019810160ff81116107255760051115610711579161068084926004945484820152866040820152611eec565b600b55601154166040519283809263122db15360e01b82525afa9182156107065783926106d8575b505080600d556009547fa80928657383ff9d374f1409cf51e7460a64472b6baeb5ded1199830c15bae018380a380f35b90809250813d83116106ff575b6106ef8183611b23565b81010312610419575138806106a8565b503d6106e5565b6040513d85823e3d90fd5b634e487b7160e01b85526032600452602485fd5b634e487b7160e01b86526011600452602486fd5b90508281813d831161075f575b6107508183611b23565b81010312610419575138610630565b503d610746565b6040513d86823e3d90fd5b604051624a03c360e31b8152600490fd5b6107a29150843d86116107a8575b61079a8183611b23565b810190611d63565b386105fc565b503d610790565b6040513d87823e3d90fd5b92505081813d83116107f0575b6107d18183611b23565b810103126107ec575182811681036107ec57838391386105d7565b8480fd5b503d6107c7565b60405163084ef7b960e41b8152600490fd5b604051630931513d60e11b8152600490fd5b5080fd5b50346101a457806003193601126101a457608060105460ff604051918181168352818160081c166020840152818160101c16604084015260181c166060820152f35b50346101a45760a03660031901126101a45736602312156101a45760405161088881611aeb565b60a481368211610419576020926004905b8382106108aa57846104a984611e85565b81358152908401908401610899565b50346101a45760203660031901126101a4576004356108d6611f53565b6109007f000000000000000000000000000000000000000000000000000000000000000042611c62565b7f000000000000000000000000000000000000000000000000000000000000000010156108095760125482906001600160a01b0316803b1561081b5781809160246040518094819363c15da65b60e01b83528860048401525af180156109a15761098d575b50807f1245b881cb30fdad22b2f9fde2d5c2a3605bbdf272d5e8a2235d8c9e81aba2ce91a280f35b61099690611a6c565b61081b578138610965565b6040513d84823e3d90fd5b50346101a457806003193601126101a457546040516001600160a01b039091168152602090f35b50346101a457806003193601126101a45760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b50346101a457610a1d36611c4c565b610a28929192611f53565b610a527f000000000000000000000000000000000000000000000000000000000000000042611c62565b7f000000000000000000000000000000000000000000000000000000000000000010156108095760ff600a54166107f7576011546001600160a01b031690813b1561023957829160448392604051948593849263cfa1fa0360e01b845289600485015260248401525af180156109a157610af0575b50907fbe5eae95ff0a9a2779506ae62da06dda1e349311d3f2b6ceb990ea42b6a5f20b8280a280f35b610af990611a6c565b38610ac7565b50346101a45736600319016080811261081b5760405191606083019183831067ffffffffffffffff841117610b9a57604090838252126101a45760206104a98484610b4981611a96565b6004358152602435608083015281528281016044358152604082019060643582528460405193610b7885611acf565b6080368637805151855251015185840152516040830152516060820152611d7b565b634e487b7160e01b82526041600452602482fd5b50346101a45760403660031901126101a45767ffffffffffffffff806004351161081b5736602360043501121561081b5780600435600401351161081b57366024610160600435600401350260043501011161081b57806024351161081b5736602360243501121561081b5760243560040135116101a45736602480356004013560061b81350101116101a45760243560040135600435600401350361107957805b600435600401358110610c61575080f35b6024356004013581101561106557610160600435828202013603602319011261081b5760405190610c9182611a96565b60043561016082020160248101358352366063909101121561023957604051610cb981611ab2565b803661018461016085026004350101116107ec57604461016084026004350101905b61018461016085026004350101821061105557505060208301527f0000000000000000000000000000000000000000000000000000000000000000610d407f000000000000000000000000000000000000000000000000000000000000000042611c62565b101561104357600c54600e5481101561103157600080516020611f8083398151915280602435600685901b01604401358009818060248035600688901b0101358009620292fc090884600080516020611f808339815191528080602435600688901b0160440135800981806024803560068b901b0101358009620292f80909600108600080516020611f8083398151915280602435600688901b0160440135800981806024803560068b901b0101358009620292fc09081115610f65575b600080516020611f8083398151915291610e439083808060243560068a901b0160440135800981806024803560068d901b0101358009620292f8090960010890611c62565b08610f5357600101600c556001825260406023198260061b602435013603011261023957826020610e97604051610e7981611a96565b60248035600687901b01908101358252604401358382015285611c85565b601254604051631ffc735d60e01b815260048101929092529092839160249183916001600160a01b03165af1801561076657610f28575b507fe2067f06dd7b8159b21a5490f8663f6bb031d9b35ed6d298b5489674cb9cda4b6101a0600193610f036040518092611b87565b60248035600686901b019081013561016083015260440135610180820152a101610c50565b602090813d8311610f4c575b610f3e8183611b23565b810103126102395738610ece565b503d610f34565b6040516379fae7af60e01b8152600490fd5b50600080516020611f8083398151915290508080602435600686901b01604401358009818060248035600689901b0101358009620292fc090801600080516020611f8083398151915280602435600686901b01604401358009818060248035600689901b0101358009620292fc09081161101d57600080516020611f8083398151915284610e43828080602435600689901b0160440135800981806024803560068c901b0101358009620292fc090801925050610dfe565b634e487b7160e01b84526011600452602484fd5b604051631ec0b2f760e01b8152600490fd5b60405163148fb9a960e31b8152600490fd5b8135815260209182019101610cdb565b634e487b7160e01b82526032600452602482fd5b60405163ca3487f760e01b8152600490fd5b50346101a457806003193601126101a4576110a4611f53565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346101a457806003193601126101a4576020604051600a8152f35b50346101a45760403660031901126101a45760206104a961112136611b45565b611e1e565b50346101a457806003193601126101a4576020600d54604051908152f35b50346101a45760206104a961115836611c4c565b6040519161116583611a96565b6040368437825283820152611e1e565b50346101a457602090816003193601126101a45767ffffffffffffffff60043581811161023957366023820112156102395780600401359182116112ab578160051b90604051926111c886840185611b23565b835284830160248193830101913683116112a75791859391602488969401905b8282106112955750506040519251858401929150845b81811061127c575050508161121b9103601f198101835282611b23565b6040519080519084845b8381106112675750505081908101838152039060025afa1561125b57600080516020611f80833981519152905106604051908152f35b604051903d90823e3d90fd5b82810182015185820152879550869101611225565b82518452889688965093840193909201916001016111fe565b813581528795509086019086016111e8565b8580fd5b634e487b7160e01b83526041600452602483fd5b50346101a457806003193601126101a4576040600d54600c5482519182526020820152f35b50346101a457806003193601126101a457604080517f000000000000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000006020820152f35b50346101a45760803660031901126101a45736602312156101a45760405161136b81611acf565b806084913660841161139f57602093506004905b83821061139057846104a984611d7b565b8135815290840190840161137f565b8380fd5b50346101a4576101a08060031936011261081b576113c036611bbb565b90604036610163190112610239576113f87f000000000000000000000000000000000000000000000000000000000000000042611c62565b7f0000000000000000000000000000000000000000000000000000000000000000111561104357600c5491600e548310156110315761016435926101843590600080516020611f8083398151915286818780098280808780098180828187620292fc090894620292f80909600108908082811115611542575b509061147c91611c62565b08610f5357600101600c55600182528460206114a061149a36611c21565b85611c85565b601254604051631ffc735d60e01b815260048101929092529092839160249183916001600160a01b03165af1801561042557611517575b507fe2067f06dd7b8159b21a5490f8663f6bb031d9b35ed6d298b5489674cb9cda4b936115076040518094611b87565b610160830152610180820152a180f35b602090813d831161153b575b61152d8183611b23565b810103126107ec57386114d7565b503d611523565b809293508491500180911161155c5788919061147c611471565b634e487b7160e01b89526011600452602489fd5b50346101a457806003193601126101a457604060075460085482519182526020820152f35b50346101a4576115a436611c4c565b6115ce7f000000000000000000000000000000000000000000000000000000000000000042611c62565b7f0000000000000000000000000000000000000000000000000000000000000000111561104357600c54600e5481101561103157600101600c556013546040516323b872dd60e01b81523360048201523060248201526044810183905260209285926001600160a01b039190859084906064908290889087165af19283156107665785936117c2575b506040519561166587611a96565b604036883786528286019081526040519561167f87611a96565b84875260405161168e81611ab2565b846101409889368437015284846040516116a781611a96565b8281520152604051966116b988611ab2565b368837518652518286015260246117386040516116d581611a96565b7f171e826ad4a870fd925e0bf0e87884e70e080879c2205ef10114f28a3b6f6dd781527f2bd407d897fbbca9f88adfd2d15252e69de8c1564eb4d3d27162e259172f1a1d858201526040519761172a89611a96565b600289528589015287611c85565b9160125416916040519485938492631ffc735d60e01b845260048401525af1801561076657611799575b837f935afc7bb7cc33eb3e24e20dcfc75f5b21fa58e9c82cca06435238efaf9a3a58610160856117956040518092611b87565ba180f35b813d83116117bb575b6117ac8183611b23565b8101031261081b573880611762565b503d6117a2565b6117d890843d86116107a85761079a8183611b23565b5038611657565b50346101a4576101a03660031901126101a45760206104a961180036611bbb565b61180936611c21565b90611c85565b50346101a457806003193601126101a4576020600c54604051908152f35b50346101a45760603660031901126101a4576101c09061184c36611b45565b906040519061185a82611a96565b808252602092839160405161186e81611ab2565b83610140958636843701528260405161188681611a96565b82815201526040519261189884611ab2565b36843780518352015182820152604051906118b282611a96565b7f171e826ad4a870fd925e0bf0e87884e70e080879c2205ef10114f28a3b6f6dd78252828201907f2bd407d897fbbca9f88adfd2d15252e69de8c1564eb4d3d27162e259172f1a1d82526040519361190985611a96565b604435855284015261191b8284611c85565b916119296040518095611b87565b51610160840152516101808301526101a0820152f35b50346101a457806003193601126101a4576040600e54600f5482519182526020820152f35b50346101a457806003193601126101a45761197d611f53565b6119a77f000000000000000000000000000000000000000000000000000000000000000042611c62565b7f0000000000000000000000000000000000000000000000000000000000000000101561080957601254601080546040516324a47aeb60e01b8152911c60ff166004820152906020908290602490829086906001600160a01b03165af19081156109a1578291611a3a575b507fc5624680ab5d50c84507f9e0dc2032163de2bda906ab8a661a53dd4d43bd5dc78280a280f35b90506020813d602011611a64575b81611a5560209383611b23565b8101031261081b575138611a12565b3d9150611a48565b67ffffffffffffffff8111611a8057604052565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff821117611a8057604052565b610140810190811067ffffffffffffffff821117611a8057604052565b6080810190811067ffffffffffffffff821117611a8057604052565b60a0810190811067ffffffffffffffff821117611a8057604052565b6060810190811067ffffffffffffffff821117611a8057604052565b90601f8019910116810190811067ffffffffffffffff821117611a8057604052565b80602312156104195760405190611b5b82611a96565b81604491604411610419576004905b828210611b775750505090565b8135815260209182019101611b6a565b805182526020808092015192016000905b600a8210611ba65750505050565b82806001928651815201940191019092611b98565b906101606003198301126104195760405191611bd683611a96565b82600435815281604312156104195760405191611bf283611ab2565b82610164918211610419576024905b828210611c115750505060200152565b8135815260209182019101611c01565b6040906101631901126104195760405190611c3b82611a96565b610164358252610184356020830152565b6040906003190112610419576004359060243590565b91908203918211611c6f57565b634e487b7160e01b600052601160045260246000fd5b906020808301916040805194611c9a86611aeb565b60a0368737845151865283855101518487015281855101518287015260608551015160608701526080855101516080870152610120825195611cdb87611aeb565b60a036883760a081510151875260c0815101518688015260e08151015184880152610100815101516060880152510151608086015281519460a0860186811067ffffffffffffffff821117611a8057611d6097611d4993611d40928652518852611e85565b85870152611e85565b908401528051606084015201516080820152611e85565b90565b90816020910312610419575180151581036104195790565b60405163248f667760e01b81529060049060008284015b838210611e07575050505060208160848173__$e61c65d9562aef5fa6ab22c0f787cf1e30$__5af4908115611dfb57600091611dcc575090565b90506020813d602011611df3575b81611de760209383611b23565b81010312610419575190565b3d9150611dda565b6040513d6000823e3d90fd5b600190835181526020809101930191019091611d92565b6040516314d2f97b60e11b815290600090600483015b60028310611e6e5750505060208160448173__$1540826e134b1b69b7091c82576ee3aadd$__5af4908115611dfb57600091611dcc575090565b600190825181526020809101920192019190611e34565b604051630926f44b60e31b815290600090600483015b60058310611ed55750505060208160a48173__$46fbdf6658faf65265971bdad66851b86c$__5af4908115611dfb57600091611dcc575090565b600190825181526020809101920192019190611e9b565b6040516304b98e1d60e31b815290600090600483015b60038310611f3c5750505060208160648173__$fa059fb1da6d850ca47ea49359bfe89f78$__5af4908115611dfb57600091611dcc575090565b600190825181526020809101920192019190611f02565b6000546001600160a01b03163303611f6757565b60405163118cdaa760e01b8152336004820152602490fdfe30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001a2646970667358221220885293766f7d1db200f1d820722de7fbb2d312142c8c0536813c0bf4c2a107e864736f6c6343000818003360e0346200067c57601f6200226438819003918201601f19168301916001600160401b0383118484101762000681578084926020946040528339810103126200067c575133156200066357600054906040513360018060a01b0384167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a381156200065457506020811162000635576001600160a81b03199091163360ff60a01b1916176000556080819052600560a052620000be9062000697565b60c0527f12817f4161f2f5ded33f26c55735a77e80e4f8975483c8c2704745128417f711610172557f1c8de1edeabc24fc4c1595acaabb70be9b70f351d58c6fa338e1e9a994413bfb610173557f22fcda488c14b34fc60eb073fbe92fe10793e2ab14682e0f057332ddbef3d55c610174557f2db474db7c7212646cb15c6177d87be30711e6c04f1139d8e495ef1d1d998227610175557efde404053ec39a19f6ac347121a2264815dda84f910a388cb372e967a5d08c610176557f0723792ffab6ec6cfb3ece1509b9b4fb07e5bdb2299d1538e6e1db916f90cf89610177557f2a4392ec4e3d1811cd6a950cc865ee6f2342910a6551c5dce38cb995576c7c70610178557f1dead4c14f75e9d8449c80b648dcd4694c2ee50da2ba16e5e438f0d77ab02e34610179557f124c53ce0953fffb7ab5e3c143df6cd48ba747d3959fcb8086405d763ed5455061017a557f02bae19605746a8cd3f0927b2c01630f36f4d1bab9216ca839833e7ff6efa20661017b557f1f8375099becf17173d457d0d07bfb74c7067df1143b5ad987046e8e66817bc961017c557f0e13e954d61bb3fa3b03e7d136ca909b610fa2ca4443d920d94d16684f2b83d461017d557f1416ef2fc4f88fcfc4f9eb12f8e214b1c3e31c6c10ece9cfa51f078a3bbf345761017e557f032f915ff71e198a7955d2697249f40fb94c65812ed24e670c9700f52fdf6e0e61017f557f08bfebf4b3ddb0f8c51dd40193f5996da9f3d799ee0d8beb6be4038132df60b4610180557f065ac498cf4a5acaeb3b6cee826da9f834c961fa39feff6ae925b90dff79b613610181557f2e72c628101a93201b912a3e3fe96d39b0a9076ec39b7935a015c59bb32b8a2a610182557f19bba68e7b9da1e6ec42e52d7ab2adaf3b6a5521b1a454ec70f62e0ab702c085610183557f0de1f72745a5af2a34cac412e00eb6c8b5db1f3b52fa1bff88076c2726b83b08610184557f2e8f152603b2fac10d6a14c841327c23c502537367ccb1e42fab9a3bd9db2a8d610185557f14e16c3e0dcfd7e621a32627ebf37f6c0afb4467d34c7b7aeffded11769dec85610186557f0be1e62127948b4805c85a1d836574f0892ca6473fcde98f3fd1781248a9768f610187557f0930288fbd7c849197c8372f1dd8f9087f8a03f09b9cd904a469c15ef6b1b515610188557f231cac34e215e3f404d2fcfb79e0705deeb3d40978f0ee31072f6cbc1b579e33610189557f2e0e3cd2718ac7199b81dc14e841de40a9536b7ffe95fa1fc9c6b799e43e2c9761018a557f0718452506f0a232e98966d84b1a4675a66bd80263a2dc58bdac873825752fc361018b557f162d4ed998307d6e132edbf5c11f62f53d4636aa10cb3c2244c2bf5577168c3761018c557f247d6a5544a8f295a894ae77c7efcdcbf52e3bf4e5d0c0d2f40557a61d44984861018d557f0b8de3868471f109e91670daca698dba917d1c5535821f33aa9598d1db8e3d1961018e557f29851997020f527c92e20f030d232b81d334144a641e6a8866b46dd925005bbb61018f557f1a9cfcbe29a2b6503a03049727c0bca3111afd62f2836f392080321d1b4ef642610190557f1aa3ead91fa89cc1d6cb1d0eb76a27190c6abfdd3265d6d0a1e5c58feddaddf6610191557f0702fc26a7d367e6677efefd95204a7e00144c2fc7dbc2a581aa00d99f51f08161019255604051611b3f908162000725823960805181818161025c015281816102d601528181610c3a01528181610ff7015281816113c0015281816114e10152818161154f015281816117aa01526118a0015260a05181818161042c01528181610ce401528181610fd401528181611194015281816113690152818161166b01528181611780015281816118c901526119b5015260c05181818161022d0152818161051b01528181610c0301526113070152f35b60449060405190637ccdcc9760e11b8252600482015260206024820152fd5b63682e504160e11b8152600490fd5b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b80156200071e57600190602081108216604e8210831617620007165781906005925b808211620006e957505081600019048111620006d3570290565b634e487b7160e01b600052601160045260246000fd5b909280600019048111620006d3578184166200070c575b800292811c90620006b9565b8092029162000700565b905060050a90565b5060019056fe60406080815260048036101561001457600080fd5b600091823560e01c80631b9b8aa714610cc85780631ffc735d14610ba957806324a47aeb14610b815780633bfa6fce14610b645780633dfb88b214610a8a5780633e1a8cc114610a5057806358bfc379146108f95780635bb93995146108c85780635bf1fa4d1461085257806362a361bb146107f757806369e7c586146107cf578063715018a61461077557806381d6a24a1461074f5780638da5cb5b146107275780639cfced97146106cb578063a27154ba146106b0578063b6a64acd1461068b578063bea140b31461056b578063c00bdbcc146104da578063c15da65b146104b2578063d9c55ce114610206578063dda89a6e146101e2578063e93fb4d4146101b85763f2fde38b1461012857600080fd5b346101b45760203660031901126101b4576001600160a01b038235818116939192908490036101b057610159611742565b831561019a57505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8480fd5b8280fd5b5082346101df5760203660031901126101df57506101d86020923561170e565b9051908152f35b80fd5b838234610202578160031936011261020257602090610171549051908152f35b5080fd5b50829034610202578160031936011261020257610221611742565b610171908154906102537f00000000000000000000000000000000000000000000000000000000000000008093610f20565b6102d4576102807f000000000000000000000000000000000000000000000000000000000000000061196e565b90600154855261014c6020528420555b600154600181018091116102c15790816102ac92600155610f0d565b90558061016f5561016e60ff19815416905580f35b634e487b7160e01b845260118552602484fd5b7f0000000000000000000000000000000000000000000000000000000000000000845b8181106103605750602181101561034d5760021b6002015490600154855261014c6020528420558360025b60868110610339575050610334610eda565b610290565b61034582820182610ef6565b018490610322565b634e487b7160e01b855260328652602485fd5b60218110158061038d5781608601908154806103a0575b5061038d5790866103889255610f65565b6102f7565b634e487b7160e01b875260328852602487fd5b9585979193959894929851976103b589610d8d565b60a0368a376103c38761196e565b93865b60ff81168a81101561041c578761040857908b6103fd610403936103f0848e600290811b01610f55565b90549060031b1c92610f9c565b5261197f565b6103c6565b50634e487b7160e01b885260328d52602488fd5b509b9796959a94999850919290927f00000000000000000000000000000000000000000000000000000000000000009b5b60ff81168d81101561046d57908b6103fd610468938d610f9c565b61044d565b5050979098506104839195949992969a50611281565b600184019081851161049f57906104999161189d565b89610377565b634e487b7160e01b8a5260118b5260248afd5b505034610202576020366003190112610202576104d7906104d1611742565b356112e8565b80f35b50346101b45760203660031901126101b4576104f4611742565b600154835261014c602052813590832055610510600154610f65565b6001556101718054917f000000000000000000000000000000000000000000000000000000000000000083018093116105585750558061016f5561016e60ff19815416905580f35b634e487b7160e01b845260119052602483fd5b50346101b45760603660031901126101b45736602312156101b45780516060810181811067ffffffffffffffff8211176106785782526064813682116106745784905b82821061066457505082516304b98e1d60e31b8152938592915084015b6003831061064d5750505060208260648173__$fa059fb1da6d850ca47ea49359bfe89f78$__5af491821561064357839261060b575b6020838351908152f35b9091506020813d60201161063b575b8161062760209383610da9565b810103126101b45760209250519038610601565b3d915061061a565b81513d85823e3d90fd5b6001908251815260208091019201920191906105cb565b81358152602091820191016105ae565b8580fd5b634e487b7160e01b855260418452602485fd5b83823461020257816003193601126102025760209060ff61016e541690519015158152f35b83823461020257816003193601126102025760209051818152f35b5090346101b45760a03660031901126101b45736602312156101b4578151906106f382610d8d565b8160a4913660a4116106745760209550905b828210610718575050506101d890611281565b81358152908501908501610705565b838234610202578160031936011261020257905490516001600160a01b039091168152602090f35b5082346101df57806003193601126101df57506101705460015482519182526020820152f35b83346101df57806003193601126101df5761078e611742565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b83823461020257816003193601126102025760209060ff61016e5460081c1690519015158152f35b5090346101b457816003193601126101b45736602312156101b45781519061081e82610d5b565b81604491366044116106745760209550905b828210610843575050506101d8906111df565b81358152908501908501610830565b5082346101df5761086236610dcb565b9083519261086f84610d8d565b60a036853760218210156108b557509060056020956101d8949360021b908160020154855260038201548886015281015486850152015460608301526080820152611281565b634e487b7160e01b815260328652602490fd5b838234610202576020906101d86108de36610dcb565b8351916108ea83610d5b565b843684378252848201526111df565b5082346101df576020928360031936011261020257803567ffffffffffffffff91828211610a4c5736602383011215610a4c5781810135928311610a3957508160051b9084519261094c87840185610da9565b835285830160248193830101913683116106745791859391602489969401905b828210610a2757505086519251858401929150845b818110610a0e575050508161099e9103601f198101835282610da9565b84519080519084845b8381106109f95750505081908101838152039060025afa156109ee577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000019051069051908152f35b9051903d90823e3d90fd5b828101820151858201528795508691016109a7565b8251845289968896509384019390920191600101610981565b8135815287955090860190860161096c565b634e487b7160e01b845260419052602483fd5b8380fd5b5082346101df57806003193601126101df575060ff61016e541615610a7d5760209061016f549051908152f35b51631e596e4360e11b8152fd5b50346101b45760803660031901126101b45736602312156101b4578051916080830183811067ffffffffffffffff821117610b515782526084833682116106745782905b828210610b41575050825163248f667760e01b8152939050848285015b838210610b2a575050505060208260848173__$e61c65d9562aef5fa6ab22c0f787cf1e30$__5af491821561064357839261060b576020838351908152f35b600190835181526020809101930191019091610aeb565b8135815260209182019101610ace565b634e487b7160e01b855260418252602485fd5b8382346102025781600319360112610202576020906101d861118e565b5082346101df5760203660031901126101df57506101d8602092610ba3611742565b35610fad565b50346101b45760203660031901126101b457610bc3611742565b61017192835492610bd4813561177d565b60019460018501808611610cb5578155610c2890610bf0610eda565b8361016f5561016e60ff198154169055547f000000000000000000000000000000000000000000000000000000000000000090610f20565b15610c38575b6020848451908152f35b7f0000000000000000000000000000000000000000000000000000000000000000906021821015610ca25750819060021b6002018054600154835261014c60205284832055610c88600154610f65565b6001555560865b60a7811015610c2e578181558401610c8f565b634e487b7160e01b835260329052602482fd5b634e487b7160e01b845260118352602484fd5b5082346101df5760203660031901126101df57823590610d08827f0000000000000000000000000000000000000000000000000000000000000000610de6565b61017154809110610d4057506021821015610d2d576020838361014d01549051908152f35b634e487b7160e01b815260328452602490fd5b8460449184865192627289df60e61b84528301526024820152fd5b6040810190811067ffffffffffffffff821117610d7757604052565b634e487b7160e01b600052604160045260246000fd5b60a0810190811067ffffffffffffffff821117610d7757604052565b90601f8019910116810190811067ffffffffffffffff821117610d7757604052565b6040906003190112610de1576004359060243590565b600080fd5b908015610e9c578115610e95578180600114610e8d57600214610e7c5760208110610133831016604e8210600b84101617610e7757600190815b808211610e4e57505081600019048111610e38570290565b634e487b7160e01b600052601160045260246000fd5b909280600019048111610e3857818416610e6e575b800292811c90610e20565b80920291610e63565b900a90565b905060ff8111610e38576001901b90565b505050600190565b5050600090565b5050600190565b6021811015610eb65761012b0190600090565b634e487b7160e01b600052603260045260246000fd5b9060018201809211610e3857565b61014d5b61016e8110610eea5750565b60008155600101610ede565b818110610f01575050565b60008155600101610ef6565b81810292918115918404141715610e3857565b8115610f2a570690565b634e487b7160e01b600052601260045260246000fd5b6021811015610eb65760021b60a70190600090565b6004821015610eb6570190600090565b6000198114610e385760010190565b60405190610f8182610d8d565b60a0368337565b60405190610f9582610d5b565b6040368337565b906005811015610eb65760051b0190565b801561117c5760ff9061016e60ff8154161561116a576020926020831161114a57610171547f000000000000000000000000000000000000000000000000000000000000000094907f00000000000000000000000000000000000000000000000000000000000000005b816110228289610de6565b101561103b5761103461102291610f65565b9050611017565b939495505082851061112d578483036110765750505061016f54916021811015610eb65761014d01829055805461ff00191661010017905590565b61016f5495949291905b8383106110a9575050506021811015610eb65761014d01839055805461ff001916610100179055565b9091956001906110b88861196e565b60005460a0929190831c8616156110f5576110eb92506040918251926110dd84610d5b565b3684378252848201526111df565b965b019190611080565b80611127939260409081519461110a86610d8d565b368637845281878501528301528060608301526080820152611281565b966110ed565b6044858460405191627289df60e61b835260048301526024820152fd5b604051632cd31ae960e01b81526004810184905260206024820152604490fd5b604051631e596e4360e11b8152600490fd5b604051630543d40760e11b8152600490fd5b600180547f000000000000000000000000000000000000000000000000000000000000000092915b816111c18286610de6565b10156111da576111d36111c191610f65565b90506111b6565b925050565b6040516314d2f97b60e11b815290600090600483015b6002831061126a5750505060208160448173__$1540826e134b1b69b7091c82576ee3aadd$__5af490811561125e5760009161122f575090565b90506020813d602011611256575b8161124a60209383610da9565b81010312610de1575190565b3d915061123d565b6040513d6000823e3d90fd5b6001908251815260208091019201920191906111f5565b604051630926f44b60e31b815290600090600483015b600583106112d15750505060208160a48173__$46fbdf6658faf65265971bdad66851b86c$__5af490811561125e5760009161122f575090565b600190825181526020809101920192019190611297565b60ff9061016e9160ff8354166116fc576101719081549081156116ea577f0000000000000000000000000000000000000000000000000000000000000000916113318382610f20565b6114c5575b50505050600190815482811461146a575061134f61118e565b90600083610170928354915b611408575b50505061138d827f0000000000000000000000000000000000000000000000000000000000000000610de6565b905483548091146113ba575b50506021811015610eb65760021b60a7015461016f5560ff19825416179055565b836113e47f000000000000000000000000000000000000000000000000000000000000000061196e565b915b8381106113f4575050611399565b61140085600085611990565b0184906113e6565b8554821015611465578015158061145c575b611453578561144a81946114398860006114348a5461170e565b611990565b6114438754610f65565b8755610f65565b9201919261135b565b50505050505050565b5080831461141a565b611360565b9050156114ac576000805261014c6020527f2f1ae789e51094ec473affec14fe3c88a47d4230101ae4544eefebff81efc6d75461016f55815460ff1916179055565b60405163042a2e7160e11b815260006004820152602490fd5b826114d7916114d2611742565b610f20565b61154d57506115057f000000000000000000000000000000000000000000000000000000000000000061196e565b60015460005261014c6020526040600020555b6001549060018201809211610e38578161153492600155610f0d565b9055600061016f55815460ff1916825538808080611336565b7f00000000000000000000000000000000000000000000000000000000000000009060005b8281106115cb5750506021811015610eb65760021b6002015460015460005261014c60205260406000205560025b608681106115b657506115b1610eda565b611518565b806115c5600480930182610ef6565b016115a0565b60218110159081610eb65780608601918254806115f9575b50610eb65760006115f49255610f65565b611572565b999792989394604097929796919651986116128a610d8d565b60a0368b376116208961196e565b956000955b8689168e811015611659578a610eb657878f986103fd8f91938f611652956103f091600290811b01610f55565b9650611625565b5092959c50929a97959998969a9390937f00000000000000000000000000000000000000000000000000000000000000009c5b808d168e8110156116b8578e9695949392918d6103fd6116ac938f610f9c565b9091929394955061168c565b5050979496939b50976116d091995099949199611281565b60018301808411610e38576116e49161189d565b386115e3565b6040516316a0341160e11b8152600490fd5b604051630d36aec160e01b8152600490fd5b80600154111561172a5760005261014c60205260406000205490565b6024906040519063042a2e7160e11b82526004820152fd5b6000546001600160a01b0316330361175657565b60405163118cdaa760e01b8152336004820152602490fd5b600019810191908211610e3857565b907f00000000000000000000000000000000000000000000000000000000000000006000198101908111917f000000000000000000000000000000000000000000000000000000000000000060005b6021811015610eb657806086019585875490610e3857858103611854575090600061184f9261184860406006611840825161180681610d8d565b60a036823760029588871b809701948554835260038801546020840152600488015490830152600587015460608301526080820152611281565b930190610ef6565b9755610f65565b6117cc565b61186e919294979650611887939550600285811b01610f55565b90919082549060031b91821b91600019901b1916179055565b0361188f5750565b6118998154610f65565b9055565b917f00000000000000000000000000000000000000000000000000000000000000009081831161195c577f0000000000000000000000000000000000000000000000000000000000000000916000198301928311935b60218110156119475780608601958587549061193257858103611854575090600061192d9261184860406006611840825161180681610d8d565b6118f3565b60246000634e487b7160e01b81526011600452fd5b60246000634e487b7160e01b81526032600452fd5b60405163d1459f7960e01b8152600490fd5b6021811015610eb657610172015490565b60ff1660ff8114610e385760010190565b9291808211611b03576119af6119a583610ea3565b90549060031b1c90565b906119d97f000000000000000000000000000000000000000000000000000000000000000061176e565b8214611a335750906119ff611a31939461186e611a04946119f985610f40565b50610f55565b610ea3565b611a1a611a158284549060031b1c90565b610f65565b825460001960039390931b92831b1916911b179055565b565b9190611a4560005460ff9060a01c1690565b15611aa05750611a9a611a76611a319495611a5e610f88565b90611a6885610f40565b5054825260208201526111df565b915b611a95611a8482610ea3565b8154906000199060031b1b19169055565b610ecc565b90611990565b9392611aaa610f74565b9260005b60ff811687811015611ade5790611ad9916103fd611ad26119a5846119f98a610f40565b9188610f9c565b611aae565b505092611afd90611a3195611af7611a9a949883610f9c565b52611281565b91611a78565b5050905056fea2646970667358221220a34d78a09c432af375505f56651e0e9f0fb24c10555ffcdc050440903cb42a6664736f6c63430008180033a2646970667358221220caf9dd60d3cc50b4a263d7b87702229abafa90d927932f500453c2c75f691ef964736f6c63430008180033",
  "libraries": {
    "PoseidonT3": "0x9A9f2CCfdE556A7E9Ff0848998Aa4a0CFD8863AE",
    "PoseidonT4": "0x68B1D87F95878fE05B998F19b66F4baba5De1aed",
    "PoseidonT5": "0x3Aa5ebB10DC797CAC828524e59A333d0A371443c",
    "PoseidonT6": "0xc6e7DF5E7b4f2A278906862b61205850344D4e7d"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deploy(uint256,(uint256,uint256),(uint8,uint8,uint8,uint8),(uint256,uint256),address,address,address)": {
        "params": {
          "_coordinatorPubKey": "The coordinator's public key",
          "_duration": "The duration of the poll",
          "_maci": "The MACI contract interface reference",
          "_maxValues": "The max values for the poll",
          "_pollOwner": "The owner of the poll",
          "_topupCredit": "The TopupCredit contract",
          "_treeDepths": "The depths of the merkle trees"
        },
        "returns": {
          "pollAddr": "The deployed Poll contract"
        }
      }
    },
    "title": "PollFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "MESSAGE_DATA_LENGTH()": {
        "notice": "the length of a MACI message"
      },
      "constructor": {
        "notice": "The PollFactory constructor"
      },
      "deploy(uint256,(uint256,uint256),(uint8,uint8,uint8,uint8),(uint256,uint256),address,address,address)": {
        "notice": "Deploy a new Poll contract and AccQueue contract for messages."
      }
    },
    "notice": "A factory contract which deploys Poll contracts. It allows the MACI contract size to stay within the limit set by EIP-170.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}