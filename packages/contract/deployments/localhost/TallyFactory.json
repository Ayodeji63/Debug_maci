{
  "address": "0x322813Fd9A801c5507c9de605d63CEA4f2CE6c44",
  "abi": [
    {
      "inputs": [],
      "name": "MESSAGE_DATA_LENGTH",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vkRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_poll",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_messageProcessor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "enum DomainObjs.Mode",
          "name": "_mode",
          "type": "uint8"
        }
      ],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "address",
          "name": "tallyAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe40376aabc2fbabbd698f9e38eb76ed8b85e32a0388df27b66e4040bef669556",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x322813Fd9A801c5507c9de605d63CEA4f2CE6c44",
    "transactionIndex": 0,
    "gasUsed": "1990694",
    "logsBloom": "0x
    "blockHash": "0x871328d4dd0894540db46f030226a046166aa7d3cfc29e9c2fc06cc5922341db",
    "transactionHash": "0xe40376aabc2fbabbd698f9e38eb76ed8b85e32a0388df27b66e4040bef669556",
    "logs": [],
    "blockNumber": 46,
    "cumulativeGasUsed": "1990694",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d4edc97ed9e4f18935e5ac94c4119edc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MESSAGE_DATA_LENGTH\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vkRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poll\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_messageProcessor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"enum DomainObjs.Mode\",\"name\":\"_mode\",\"type\":\"uint8\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tallyAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deploy(address,address,address,address,address,uint8)\":{\"params\":{\"_messageProcessor\":\"MessageProcessor contract\",\"_mode\":\"Voting mode\",\"_owner\":\"Owner of the contract\",\"_poll\":\"Poll contract\",\"_verifier\":\"Verifier contract\",\"_vkRegistry\":\"VkRegistry contract\"},\"returns\":{\"tallyAddr\":\"The deployed contract\"}}},\"title\":\"TallyFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"MESSAGE_DATA_LENGTH()\":{\"notice\":\"the length of a MACI message\"},\"deploy(address,address,address,address,address,uint8)\":{\"notice\":\"Deploy a new Tally contract and return the address.\"}},\"notice\":\"A factory contract which deploys Tally contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"maci-contracts/contracts/TallyFactory.sol\":\"TallyFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"maci-contracts/contracts/Tally.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { IMACI } from \\\"./interfaces/IMACI.sol\\\";\\nimport { Hasher } from \\\"./crypto/Hasher.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IPoll } from \\\"./interfaces/IPoll.sol\\\";\\nimport { IMessageProcessor } from \\\"./interfaces/IMessageProcessor.sol\\\";\\nimport { SnarkCommon } from \\\"./crypto/SnarkCommon.sol\\\";\\nimport { IVerifier } from \\\"./interfaces/IVerifier.sol\\\";\\nimport { IVkRegistry } from \\\"./interfaces/IVkRegistry.sol\\\";\\nimport { CommonUtilities } from \\\"./utilities/CommonUtilities.sol\\\";\\nimport { DomainObjs } from \\\"./utilities/DomainObjs.sol\\\";\\n\\n/// @title Tally\\n/// @notice The Tally contract is used during votes tallying\\n/// and by users to verify the tally results.\\ncontract Tally is Ownable(msg.sender), SnarkCommon, CommonUtilities, Hasher, DomainObjs {\\n  uint256 internal constant TREE_ARITY = 5;\\n\\n  /// @notice The commitment to the tally results. Its initial value is 0, but after\\n  /// the tally of each batch is proven on-chain via a zk-SNARK, it should be\\n  /// updated to:\\n  ///\\n  /// QV:\\n  /// hash3(\\n  ///   hashLeftRight(merkle root of current results, salt0)\\n  ///   hashLeftRight(number of spent voice credits, salt1),\\n  ///   hashLeftRight(merkle root of the no. of spent voice credits per vote option, salt2)\\n  /// )\\n  ///\\n  /// Non-QV:\\n  /// hash2(\\n  ///   hashLeftRight(merkle root of current results, salt0)\\n  ///   hashLeftRight(number of spent voice credits, salt1),\\n  /// )\\n  ///\\n  /// Where each salt is unique and the merkle roots are of arrays of leaves\\n  /// TREE_ARITY ** voteOptionTreeDepth long.\\n  uint256 public tallyCommitment;\\n\\n  uint256 public tallyBatchNum;\\n\\n  // The final commitment to the state and ballot roots\\n  uint256 public sbCommitment;\\n\\n  IVerifier public immutable verifier;\\n  IVkRegistry public immutable vkRegistry;\\n  IPoll public immutable poll;\\n  IMessageProcessor public immutable messageProcessor;\\n  Mode public immutable mode;\\n\\n  /// @notice custom errors\\n  error ProcessingNotComplete();\\n  error InvalidTallyVotesProof();\\n  error AllBallotsTallied();\\n  error NumSignUpsTooLarge();\\n  error BatchStartIndexTooLarge();\\n  error TallyBatchSizeTooLarge();\\n  error NotSupported();\\n\\n  /// @notice Create a new Tally contract\\n  /// @param _verifier The Verifier contract\\n  /// @param _vkRegistry The VkRegistry contract\\n  /// @param _poll The Poll contract\\n  /// @param _mp The MessageProcessor contract\\n  constructor(address _verifier, address _vkRegistry, address _poll, address _mp, Mode _mode) payable {\\n    verifier = IVerifier(_verifier);\\n    vkRegistry = IVkRegistry(_vkRegistry);\\n    poll = IPoll(_poll);\\n    messageProcessor = IMessageProcessor(_mp);\\n    mode = _mode;\\n  }\\n\\n  /// @notice Pack the batch start index and number of signups into a 100-bit value.\\n  /// @param _numSignUps: number of signups\\n  /// @param _batchStartIndex: the start index of given batch\\n  /// @param _tallyBatchSize: size of batch\\n  /// @return result an uint256 representing the 3 inputs packed together\\n  function genTallyVotesPackedVals(\\n    uint256 _numSignUps,\\n    uint256 _batchStartIndex,\\n    uint256 _tallyBatchSize\\n  ) public pure returns (uint256 result) {\\n    if (_numSignUps >= 2 ** 50) revert NumSignUpsTooLarge();\\n    if (_batchStartIndex >= 2 ** 50) revert BatchStartIndexTooLarge();\\n    if (_tallyBatchSize >= 2 ** 50) revert TallyBatchSizeTooLarge();\\n\\n    result = (_batchStartIndex / _tallyBatchSize) + (_numSignUps << uint256(50));\\n  }\\n\\n  /// @notice Check if all ballots are tallied\\n  /// @return tallied whether all ballots are tallied\\n  function isTallied() public view returns (bool tallied) {\\n    (uint8 intStateTreeDepth, , , ) = poll.treeDepths();\\n    (uint256 numSignUps, ) = poll.numSignUpsAndMessages();\\n\\n    // Require that there are untallied ballots left\\n    tallied = tallyBatchNum * (TREE_ARITY ** intStateTreeDepth) >= numSignUps;\\n  }\\n\\n  /// @notice generate hash of public inputs for tally circuit\\n  /// @param _numSignUps: number of signups\\n  /// @param _batchStartIndex: the start index of given batch\\n  /// @param _tallyBatchSize: size of batch\\n  /// @param _newTallyCommitment: the new tally commitment to be updated\\n  /// @return inputHash hash of public inputs\\n  function genTallyVotesPublicInputHash(\\n    uint256 _numSignUps,\\n    uint256 _batchStartIndex,\\n    uint256 _tallyBatchSize,\\n    uint256 _newTallyCommitment\\n  ) public view returns (uint256 inputHash) {\\n    uint256 packedVals = genTallyVotesPackedVals(_numSignUps, _batchStartIndex, _tallyBatchSize);\\n    uint256[] memory input = new uint256[](4);\\n    input[0] = packedVals;\\n    input[1] = sbCommitment;\\n    input[2] = tallyCommitment;\\n    input[3] = _newTallyCommitment;\\n    inputHash = sha256Hash(input);\\n  }\\n\\n  /// @notice Update the state and ballot root commitment\\n  function updateSbCommitment() public onlyOwner {\\n    // Require that all messages have been processed\\n    if (!messageProcessor.processingComplete()) {\\n      revert ProcessingNotComplete();\\n    }\\n\\n    if (sbCommitment == 0) {\\n      sbCommitment = messageProcessor.sbCommitment();\\n    }\\n  }\\n\\n  /// @notice Verify the result of a tally batch\\n  /// @param _newTallyCommitment the new tally commitment to be verified\\n  /// @param _proof the proof generated after tallying this batch\\n  function tallyVotes(uint256 _newTallyCommitment, uint256[8] calldata _proof) public onlyOwner {\\n    _votingPeriodOver(poll);\\n    updateSbCommitment();\\n\\n    // get the batch size and start index\\n    (uint8 intStateTreeDepth, , , ) = poll.treeDepths();\\n    uint256 tallyBatchSize = TREE_ARITY ** intStateTreeDepth;\\n    uint256 batchStartIndex = tallyBatchNum * tallyBatchSize;\\n\\n    // save some gas because we won't overflow uint256\\n    unchecked {\\n      tallyBatchNum++;\\n    }\\n\\n    (uint256 numSignUps, ) = poll.numSignUpsAndMessages();\\n\\n    // Require that there are untallied ballots left\\n    if (batchStartIndex >= numSignUps) {\\n      revert AllBallotsTallied();\\n    }\\n\\n    bool isValid = verifyTallyProof(_proof, numSignUps, batchStartIndex, tallyBatchSize, _newTallyCommitment);\\n\\n    if (!isValid) {\\n      revert InvalidTallyVotesProof();\\n    }\\n\\n    // Update the tally commitment and the tally batch num\\n    tallyCommitment = _newTallyCommitment;\\n  }\\n\\n  /// @notice Verify the tally proof using the verifying key\\n  /// @param _proof the proof generated after processing all messages\\n  /// @param _numSignUps number of signups for a given poll\\n  /// @param _batchStartIndex the number of batches multiplied by the size of the batch\\n  /// @param _tallyBatchSize batch size for the tally\\n  /// @param _newTallyCommitment the tally commitment to be verified at a given batch index\\n  /// @return isValid whether the proof is valid\\n  function verifyTallyProof(\\n    uint256[8] calldata _proof,\\n    uint256 _numSignUps,\\n    uint256 _batchStartIndex,\\n    uint256 _tallyBatchSize,\\n    uint256 _newTallyCommitment\\n  ) public view returns (bool isValid) {\\n    (uint8 intStateTreeDepth, , , uint8 voteOptionTreeDepth) = poll.treeDepths();\\n\\n    (IMACI maci, , ) = poll.extContracts();\\n\\n    // Get the verifying key\\n    VerifyingKey memory vk = vkRegistry.getTallyVk(maci.stateTreeDepth(), intStateTreeDepth, voteOptionTreeDepth, mode);\\n\\n    // Get the public inputs\\n    uint256 publicInputHash = genTallyVotesPublicInputHash(\\n      _numSignUps,\\n      _batchStartIndex,\\n      _tallyBatchSize,\\n      _newTallyCommitment\\n    );\\n\\n    // Verify the proof\\n    isValid = verifier.verify(_proof, vk, publicInputHash);\\n  }\\n\\n  /// @notice Compute the merkle root from the path elements\\n  /// and a leaf\\n  /// @param _depth the depth of the merkle tree\\n  /// @param _index the index of the leaf\\n  /// @param _leaf the leaf\\n  /// @param _pathElements the path elements to reconstruct the merkle root\\n  /// @return current The merkle root\\n  function computeMerkleRootFromPath(\\n    uint8 _depth,\\n    uint256 _index,\\n    uint256 _leaf,\\n    uint256[][] calldata _pathElements\\n  ) internal pure returns (uint256 current) {\\n    uint256 pos = _index % TREE_ARITY;\\n    current = _leaf;\\n    uint8 k;\\n\\n    uint256[TREE_ARITY] memory level;\\n\\n    for (uint8 i = 0; i < _depth; ++i) {\\n      for (uint8 j = 0; j < TREE_ARITY; ++j) {\\n        if (j == pos) {\\n          level[j] = current;\\n        } else {\\n          if (j > pos) {\\n            k = j - 1;\\n          } else {\\n            k = j;\\n          }\\n          level[j] = _pathElements[i][k];\\n        }\\n      }\\n\\n      _index /= TREE_ARITY;\\n      pos = _index % TREE_ARITY;\\n      current = hash5(level);\\n    }\\n  }\\n\\n  /// @notice Verify the number of spent voice credits from the tally.json\\n  /// @param _totalSpent spent field retrieved in the totalSpentVoiceCredits object\\n  /// @param _totalSpentSalt the corresponding salt in the totalSpentVoiceCredit object\\n  /// @param _resultCommitment hashLeftRight(merkle root of the results.tally, results.salt) in tally.json file\\n  /// @param _perVOSpentVoiceCreditsHash only for QV - hashLeftRight(merkle root of the no spent voice credits, salt)\\n  /// @return isValid Whether the provided values are valid\\n  function verifySpentVoiceCredits(\\n    uint256 _totalSpent,\\n    uint256 _totalSpentSalt,\\n    uint256 _resultCommitment,\\n    uint256 _perVOSpentVoiceCreditsHash\\n  ) public view returns (bool isValid) {\\n    uint256[3] memory tally;\\n    tally[0] = _resultCommitment;\\n    tally[1] = hashLeftRight(_totalSpent, _totalSpentSalt);\\n    tally[2] = _perVOSpentVoiceCreditsHash;\\n\\n    if (mode == Mode.QV) {\\n      isValid = verifyQvSpentVoiceCredits(_totalSpent, _totalSpentSalt, _resultCommitment, _perVOSpentVoiceCreditsHash);\\n    } else if (mode == Mode.NON_QV) {\\n      isValid = verifyNonQvSpentVoiceCredits(_totalSpent, _totalSpentSalt, _resultCommitment);\\n    }\\n  }\\n\\n  /// @notice Verify the number of spent voice credits for QV from the tally.json\\n  /// @param _totalSpent spent field retrieved in the totalSpentVoiceCredits object\\n  /// @param _totalSpentSalt the corresponding salt in the totalSpentVoiceCredit object\\n  /// @param _resultCommitment hashLeftRight(merkle root of the results.tally, results.salt) in tally.json file\\n  /// @param _perVOSpentVoiceCreditsHash hashLeftRight(merkle root of the no spent voice credits per vote option, salt)\\n  /// @return isValid Whether the provided values are valid\\n  function verifyQvSpentVoiceCredits(\\n    uint256 _totalSpent,\\n    uint256 _totalSpentSalt,\\n    uint256 _resultCommitment,\\n    uint256 _perVOSpentVoiceCreditsHash\\n  ) internal view returns (bool isValid) {\\n    uint256[3] memory tally;\\n    tally[0] = _resultCommitment;\\n    tally[1] = hashLeftRight(_totalSpent, _totalSpentSalt);\\n    tally[2] = _perVOSpentVoiceCreditsHash;\\n\\n    isValid = hash3(tally) == tallyCommitment;\\n  }\\n\\n  /// @notice Verify the number of spent voice credits for Non-QV from the tally.json\\n  /// @param _totalSpent spent field retrieved in the totalSpentVoiceCredits object\\n  /// @param _totalSpentSalt the corresponding salt in the totalSpentVoiceCredit object\\n  /// @param _resultCommitment hashLeftRight(merkle root of the results.tally, results.salt) in tally.json file\\n  /// @return isValid Whether the provided values are valid\\n  function verifyNonQvSpentVoiceCredits(\\n    uint256 _totalSpent,\\n    uint256 _totalSpentSalt,\\n    uint256 _resultCommitment\\n  ) internal view returns (bool isValid) {\\n    uint256[2] memory tally;\\n    tally[0] = _resultCommitment;\\n    tally[1] = hashLeftRight(_totalSpent, _totalSpentSalt);\\n\\n    isValid = hash2(tally) == tallyCommitment;\\n  }\\n\\n  /// @notice Verify the number of spent voice credits per vote option from the tally.json\\n  /// @param _voteOptionIndex the index of the vote option where credits were spent\\n  /// @param _spent the spent voice credits for a given vote option index\\n  /// @param _spentProof proof generated for the perVOSpentVoiceCredits\\n  /// @param _spentSalt the corresponding salt given in the tally perVOSpentVoiceCredits object\\n  /// @param _voteOptionTreeDepth depth of the vote option tree\\n  /// @param _spentVoiceCreditsHash hashLeftRight(number of spent voice credits, spent salt)\\n  /// @param _resultCommitment hashLeftRight(merkle root of the results.tally, results.salt)\\n  // in the tally.json file\\n  /// @return isValid Whether the provided proof is valid\\n  function verifyPerVOSpentVoiceCredits(\\n    uint256 _voteOptionIndex,\\n    uint256 _spent,\\n    uint256[][] calldata _spentProof,\\n    uint256 _spentSalt,\\n    uint8 _voteOptionTreeDepth,\\n    uint256 _spentVoiceCreditsHash,\\n    uint256 _resultCommitment\\n  ) public view returns (bool isValid) {\\n    if (mode != Mode.QV) {\\n      revert NotSupported();\\n    }\\n\\n    uint256 computedRoot = computeMerkleRootFromPath(_voteOptionTreeDepth, _voteOptionIndex, _spent, _spentProof);\\n\\n    uint256[3] memory tally;\\n    tally[0] = _resultCommitment;\\n    tally[1] = _spentVoiceCreditsHash;\\n    tally[2] = hashLeftRight(computedRoot, _spentSalt);\\n\\n    isValid = hash3(tally) == tallyCommitment;\\n  }\\n\\n  /// @notice Verify the result generated from the tally.json\\n  /// @param _voteOptionIndex the index of the vote option to verify the correctness of the tally\\n  /// @param _tallyResult Flattened array of the tally\\n  /// @param _tallyResultProof Corresponding proof of the tally result\\n  /// @param _tallyResultSalt the respective salt in the results object in the tally.json\\n  /// @param _voteOptionTreeDepth depth of the vote option tree\\n  /// @param _spentVoiceCreditsHash hashLeftRight(number of spent voice credits, spent salt)\\n  /// @param _perVOSpentVoiceCreditsHash hashLeftRight(merkle root of the no spent voice\\n  /// credits per vote option, perVOSpentVoiceCredits salt)\\n  /// @return isValid Whether the provided proof is valid\\n  function verifyTallyResult(\\n    uint256 _voteOptionIndex,\\n    uint256 _tallyResult,\\n    uint256[][] calldata _tallyResultProof,\\n    uint256 _tallyResultSalt,\\n    uint8 _voteOptionTreeDepth,\\n    uint256 _spentVoiceCreditsHash,\\n    uint256 _perVOSpentVoiceCreditsHash\\n  ) public view returns (bool isValid) {\\n    uint256 computedRoot = computeMerkleRootFromPath(\\n      _voteOptionTreeDepth,\\n      _voteOptionIndex,\\n      _tallyResult,\\n      _tallyResultProof\\n    );\\n\\n    if (mode == Mode.QV) {\\n      uint256[3] memory tally;\\n      tally[0] = hashLeftRight(computedRoot, _tallyResultSalt);\\n      tally[1] = _spentVoiceCreditsHash;\\n      tally[2] = _perVOSpentVoiceCreditsHash;\\n\\n      isValid = hash3(tally) == tallyCommitment;\\n    } else if (mode == Mode.NON_QV) {\\n      uint256[2] memory tally;\\n      tally[0] = hashLeftRight(computedRoot, _tallyResultSalt);\\n      tally[1] = _spentVoiceCreditsHash;\\n\\n      isValid = hash2(tally) == tallyCommitment;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x5d9230557c80ff9c84998a7d634f081cbec06d2039e3c2a80eb3aa5abde5396a\",\"license\":\"MIT\"},\"maci-contracts/contracts/TallyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { Tally } from \\\"./Tally.sol\\\";\\nimport { ITallyFactory } from \\\"./interfaces/ITallyFactory.sol\\\";\\nimport { DomainObjs } from \\\"./utilities/DomainObjs.sol\\\";\\n\\n/// @title TallyFactory\\n/// @notice A factory contract which deploys Tally contracts.\\ncontract TallyFactory is ITallyFactory, DomainObjs {\\n  /// @inheritdoc ITallyFactory\\n  function deploy(\\n    address _verifier,\\n    address _vkRegistry,\\n    address _poll,\\n    address _messageProcessor,\\n    address _owner,\\n    Mode _mode\\n  ) public virtual returns (address tallyAddr) {\\n    // deploy Tally for this Poll\\n    Tally tally = new Tally(_verifier, _vkRegistry, _poll, _messageProcessor, _mode);\\n    tally.transferOwnership(_owner);\\n    tallyAddr = address(tally);\\n  }\\n}\\n\",\"keccak256\":\"0xc60cac2ed4b695c838542232e8ad64fe305fb7b42c9d0af8fb99836bec11d26b\",\"license\":\"MIT\"},\"maci-contracts/contracts/TopupCredit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title TopupCredit\\n/// @notice A contract representing a token used to topup a MACI's voter\\n/// credits\\ncontract TopupCredit is ERC20, Ownable(msg.sender) {\\n  uint8 public constant DECIMALS = 1;\\n  uint256 public constant MAXIMUM_AIRDROP_AMOUNT = 100000 * 10 ** DECIMALS;\\n\\n  /// @notice custom errors\\n  error ExceedLimit();\\n\\n  /// @notice create  a new TopupCredit token\\n  constructor() payable ERC20(\\\"TopupCredit\\\", \\\"TopupCredit\\\") {}\\n\\n  /// @notice mint tokens to an account\\n  /// @param account the account to mint tokens to\\n  /// @param amount the amount of tokens to mint\\n  function airdropTo(address account, uint256 amount) public onlyOwner {\\n    if (amount >= MAXIMUM_AIRDROP_AMOUNT) {\\n      revert ExceedLimit();\\n    }\\n\\n    _mint(account, amount);\\n  }\\n\\n  /// @notice mint tokens to the contract owner\\n  /// @param amount the amount of tokens to mint\\n  function airdrop(uint256 amount) public onlyOwner {\\n    if (amount >= MAXIMUM_AIRDROP_AMOUNT) {\\n      revert ExceedLimit();\\n    }\\n\\n    _mint(msg.sender, amount);\\n  }\\n}\\n\",\"keccak256\":\"0x9cddcaa8b2f7d8bccbfdf40d38fb4a950bbeaf0941dee4213c76d69eadbea33c\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/Hasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { SnarkConstants } from \\\"./SnarkConstants.sol\\\";\\nimport { PoseidonT3 } from \\\"./PoseidonT3.sol\\\";\\nimport { PoseidonT4 } from \\\"./PoseidonT4.sol\\\";\\nimport { PoseidonT5 } from \\\"./PoseidonT5.sol\\\";\\nimport { PoseidonT6 } from \\\"./PoseidonT6.sol\\\";\\n\\n/// @notice A SHA256 hash function for any number of input elements, and Poseidon hash\\n/// functions for 2, 3, 4, 5, and 12 input elements.\\ncontract Hasher is SnarkConstants {\\n  /// @notice Computes the SHA256 hash of an array of uint256 elements.\\n  /// @param array The array of uint256 elements.\\n  /// @return result The SHA256 hash of the array.\\n  function sha256Hash(uint256[] memory array) public pure returns (uint256 result) {\\n    result = uint256(sha256(abi.encodePacked(array))) % SNARK_SCALAR_FIELD;\\n  }\\n\\n  /// @notice Computes the Poseidon hash of two uint256 elements.\\n  /// @param array An array of two uint256 elements.\\n  /// @return result The Poseidon hash of the two elements.\\n  function hash2(uint256[2] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT3.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of three uint256 elements.\\n  /// @param array An array of three uint256 elements.\\n  /// @return result The Poseidon hash of the three elements.\\n  function hash3(uint256[3] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT4.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of four uint256 elements.\\n  /// @param array An array of four uint256 elements.\\n  /// @return result The Poseidon hash of the four elements.\\n  function hash4(uint256[4] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT5.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of five uint256 elements.\\n  /// @param array An array of five uint256 elements.\\n  /// @return result The Poseidon hash of the five elements.\\n  function hash5(uint256[5] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT6.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of two uint256 elements.\\n  /// @param left the first element to hash.\\n  /// @param right the second element to hash.\\n  /// @return result The Poseidon hash of the two elements.\\n  function hashLeftRight(uint256 left, uint256 right) public pure returns (uint256 result) {\\n    uint256[2] memory input;\\n    input[0] = left;\\n    input[1] = right;\\n    result = hash2(input);\\n  }\\n}\\n\",\"keccak256\":\"0x5bd9dc3c43c862d8fd566e8ae2d3a52e1271f2aa3b042c71f97fe2dc449b1d5f\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/Pairing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to\\n// deal in the Software without restriction, including without limitation the\\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\\n// sell copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\\n// IN THE SOFTWARE.\\n\\n// 2019 OKIMS\\n\\npragma solidity ^0.8.20;\\n\\n/// @title Pairing\\n/// @notice A library implementing the alt_bn128 elliptic curve operations.\\nlibrary Pairing {\\n  uint256 public constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n  struct G1Point {\\n    uint256 x;\\n    uint256 y;\\n  }\\n\\n  // Encoding of field elements is: X[0] * z + X[1]\\n  struct G2Point {\\n    uint256[2] x;\\n    uint256[2] y;\\n  }\\n\\n  /// @notice custom errors\\n  error PairingAddFailed();\\n  error PairingMulFailed();\\n  error PairingOpcodeFailed();\\n\\n  /// @notice The negation of p, i.e. p.plus(p.negate()) should be zero.\\n  function negate(G1Point memory p) internal pure returns (G1Point memory) {\\n    // The prime q in the base field F_q for G1\\n    if (p.x == 0 && p.y == 0) {\\n      return G1Point(0, 0);\\n    } else {\\n      return G1Point(p.x, PRIME_Q - (p.y % PRIME_Q));\\n    }\\n  }\\n\\n  /// @notice r Returns the sum of two points of G1.\\n  function plus(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {\\n    uint256[4] memory input;\\n    input[0] = p1.x;\\n    input[1] = p1.y;\\n    input[2] = p2.x;\\n    input[3] = p2.y;\\n    bool success;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n\\n    if (!success) {\\n      revert PairingAddFailed();\\n    }\\n  }\\n\\n  /// @notice r Return the product of a point on G1 and a scalar, i.e.\\n  ///         p == p.scalarMul(1) and p.plus(p) == p.scalarMul(2) for all\\n  ///         points p.\\n  function scalarMul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\\n    uint256[3] memory input;\\n    input[0] = p.x;\\n    input[1] = p.y;\\n    input[2] = s;\\n    bool success;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n\\n    if (!success) {\\n      revert PairingMulFailed();\\n    }\\n  }\\n\\n  /// @return isValid The result of computing the pairing check\\n  ///         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n  ///        For example,\\n  ///        pairing([P1(), P1().negate()], [P2(), P2()]) should return true.\\n  function pairing(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2,\\n    G1Point memory c1,\\n    G2Point memory c2,\\n    G1Point memory d1,\\n    G2Point memory d2\\n  ) internal view returns (bool isValid) {\\n    G1Point[4] memory p1;\\n    p1[0] = a1;\\n    p1[1] = b1;\\n    p1[2] = c1;\\n    p1[3] = d1;\\n\\n    G2Point[4] memory p2;\\n    p2[0] = a2;\\n    p2[1] = b2;\\n    p2[2] = c2;\\n    p2[3] = d2;\\n\\n    uint256 inputSize = 24;\\n    uint256[] memory input = new uint256[](inputSize);\\n\\n    for (uint8 i = 0; i < 4; ) {\\n      uint8 j = i * 6;\\n      input[j + 0] = p1[i].x;\\n      input[j + 1] = p1[i].y;\\n      input[j + 2] = p2[i].x[0];\\n      input[j + 3] = p2[i].x[1];\\n      input[j + 4] = p2[i].y[0];\\n      input[j + 5] = p2[i].y[1];\\n\\n      unchecked {\\n        i++;\\n      }\\n    }\\n\\n    uint256[1] memory out;\\n    bool success;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n\\n    if (!success) {\\n      revert PairingOpcodeFailed();\\n    }\\n\\n    isValid = out[0] != 0;\\n  }\\n}\\n\",\"keccak256\":\"0x3efa7d9dc2beee359445d7083d857e4c08a399443ac3f489a73ccc270bcc8bdd\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/PoseidonT3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT3 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[2] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0x27b66b331502146590287b856ab767b2a2fb66a16da114961e3cef9e160d7263\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/PoseidonT4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT4 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[3] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xd38b24182625dab43ccd72c623df1263f2fec8ef828852189bf8ac17e59ae12b\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/PoseidonT5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT5 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[4] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0x93228facf0feb920e3b92e536040ba3c6fd5ffcdd5ae415373f153e05cec78b9\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/PoseidonT6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT6 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[5] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0x792080273729327555e4bed7ba86e51a22e63769732308ac0a59dce88e451505\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/SnarkCommon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\nimport { Pairing } from \\\"./Pairing.sol\\\";\\n\\n/// @title SnarkCommon\\n/// @notice a Contract which holds a struct\\n/// representing a Groth16 verifying key\\ncontract SnarkCommon {\\n  /// @notice a struct representing a Groth16 verifying key\\n  struct VerifyingKey {\\n    Pairing.G1Point alpha1;\\n    Pairing.G2Point beta2;\\n    Pairing.G2Point gamma2;\\n    Pairing.G2Point delta2;\\n    Pairing.G1Point[] ic;\\n  }\\n}\\n\",\"keccak256\":\"0x41a3c06b5e34c032c618e3b9bf2286e128a1565f12bfec58b8b3951f3601be2d\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/SnarkConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @title SnarkConstants\\n/// @notice This contract contains constants related to the SNARK\\n/// components of MACI.\\ncontract SnarkConstants {\\n  /// @notice The scalar field\\n  uint256 internal constant SNARK_SCALAR_FIELD =\\n    21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n  /// @notice The public key here is the first Pedersen base\\n  /// point from iden3's circomlib implementation of the Pedersen hash.\\n  /// Since it is generated using a hash-to-curve function, we are\\n  /// confident that no-one knows the private key associated with this\\n  /// public key. See:\\n  /// https://github.com/iden3/circomlib/blob/d5ed1c3ce4ca137a6b3ca48bec4ac12c1b38957a/src/pedersen_printbases.js\\n  /// Its hash should equal\\n  /// 6769006970205099520508948723718471724660867171122235270773600567925038008762.\\n  uint256 internal constant PAD_PUBKEY_X =\\n    10457101036533406547632367118273992217979173478358440826365724437999023779287;\\n  uint256 internal constant PAD_PUBKEY_Y =\\n    19824078218392094440610104313265183977899662750282163392862422243483260492317;\\n\\n  /// @notice The Keccack256 hash of 'Maci'\\n  uint256 internal constant NOTHING_UP_MY_SLEEVE =\\n    8370432830353022751713833565135785980866757267633941821328460903436894336785;\\n}\\n\",\"keccak256\":\"0xef88737ff3d47333964f4fd6b939a12fe6e2ca64b069b26600a10c6a8f52fc7b\",\"license\":\"MIT\"},\"maci-contracts/contracts/interfaces/IMACI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { AccQueue } from \\\"../trees/AccQueue.sol\\\";\\n\\n/// @title IMACI\\n/// @notice MACI interface\\ninterface IMACI {\\n  /// @notice Get the depth of the state tree\\n  /// @return The depth of the state tree\\n  function stateTreeDepth() external view returns (uint8);\\n\\n  /// @notice Return the main root of the StateAq contract\\n  /// @return The Merkle root\\n  function getStateAqRoot() external view returns (uint256);\\n\\n  /// @notice Allow Poll contracts to merge the state subroots\\n  /// @param _numSrQueueOps Number of operations\\n  /// @param _pollId The ID of the active Poll\\n  function mergeStateAqSubRoots(uint256 _numSrQueueOps, uint256 _pollId) external;\\n\\n  /// @notice Allow Poll contracts to merge the state root\\n  /// @param _pollId The active Poll ID\\n  /// @return The calculated Merkle root\\n  function mergeStateAq(uint256 _pollId) external returns (uint256);\\n\\n  /// @notice Get the number of signups\\n  /// @return numsignUps The number of signups\\n  function numSignUps() external view returns (uint256);\\n\\n  /// @notice Get the state AccQueue\\n  /// @return The state AccQueue\\n  function stateAq() external view returns (AccQueue);\\n}\\n\",\"keccak256\":\"0x1c1f514b23fe09d8703aea3e89769dc6667625c3f47d2931d6294ef53b3d6e9f\",\"license\":\"MIT\"},\"maci-contracts/contracts/interfaces/IMessageProcessor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @title IMessageProcessor\\n/// @notice MessageProcessor interface\\ninterface IMessageProcessor {\\n  /// @notice Get the result of whether there are unprocessed messages left\\n  /// @return Whether there are unprocessed messages left\\n  function processingComplete() external view returns (bool);\\n\\n  /// @notice Get the commitment to the state and ballot roots\\n  /// @return The commitment to the state and ballot roots\\n  function sbCommitment() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x917bdb4c5eae4d20ccf6d0c9dc0c2cf1868a6951bc6fb74efbc91977309f505a\",\"license\":\"MIT\"},\"maci-contracts/contracts/interfaces/IPoll.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { DomainObjs } from \\\"../utilities/DomainObjs.sol\\\";\\nimport { IMACI } from \\\"./IMACI.sol\\\";\\nimport { AccQueue } from \\\"../trees/AccQueue.sol\\\";\\nimport { TopupCredit } from \\\"../TopupCredit.sol\\\";\\n\\n/// @title IPoll\\n/// @notice Poll interface\\ninterface IPoll {\\n  /// @notice The number of messages which have been processed and the number of signups\\n  /// @return numSignups The number of signups\\n  /// @return numMsgs The number of messages sent by voters\\n  function numSignUpsAndMessages() external view returns (uint256 numSignups, uint256 numMsgs);\\n\\n  /// @notice Allows to publish a Topup message\\n  /// @param stateIndex The index of user in the state queue\\n  /// @param amount The amount of credits to topup\\n  function topup(uint256 stateIndex, uint256 amount) external;\\n\\n  /// @notice Allows anyone to publish a message (an encrypted command and signature).\\n  /// This function also enqueues the message.\\n  /// @param _message The message to publish\\n  /// @param _encPubKey An epheremal public key which can be combined with the\\n  /// coordinator's private key to generate an ECDH shared key with which\\n  /// to encrypt the message.\\n  function publishMessage(DomainObjs.Message memory _message, DomainObjs.PubKey calldata _encPubKey) external;\\n\\n  /// @notice The first step of merging the MACI state AccQueue. This allows the\\n  /// ProcessMessages circuit to access the latest state tree and ballots via\\n  /// currentSbCommitment.\\n  /// @param _numSrQueueOps Number of operations\\n  /// @param _pollId The ID of the active Poll\\n  function mergeMaciStateAqSubRoots(uint256 _numSrQueueOps, uint256 _pollId) external;\\n\\n  /// @notice The second step of merging the MACI state AccQueue. This allows the\\n  /// ProcessMessages circuit to access the latest state tree and ballots via\\n  /// currentSbCommitment.\\n  /// @param _pollId The ID of the active Poll\\n  function mergeMaciStateAq(uint256 _pollId) external;\\n\\n  /// @notice The first step in merging the message AccQueue so that the\\n  /// ProcessMessages circuit can access the message root.\\n  /// @param _numSrQueueOps The number of subroot queue operations to perform\\n  function mergeMessageAqSubRoots(uint256 _numSrQueueOps) external;\\n\\n  /// @notice The second step in merging the message AccQueue so that the\\n  /// ProcessMessages circuit can access the message root.\\n  function mergeMessageAq() external;\\n\\n  /// @notice Returns the Poll's deploy time and duration\\n  /// @return _deployTime The deployment timestamp\\n  /// @return _duration The duration of the poll\\n  function getDeployTimeAndDuration() external view returns (uint256 _deployTime, uint256 _duration);\\n\\n  /// @notice Get the result of whether the MACI contract's stateAq has been merged by this contract\\n  /// @return Whether the MACI contract's stateAq has been merged by this contract\\n  function stateAqMerged() external view returns (bool);\\n\\n  /// @notice Get the depths of the merkle trees\\n  /// @return intStateTreeDepth The depth of the state tree\\n  /// @return messageTreeSubDepth The subdepth of the message tree\\n  /// @return messageTreeDepth The depth of the message tree\\n  /// @return voteOptionTreeDepth The subdepth of the vote option tree\\n  function treeDepths()\\n    external\\n    view\\n    returns (uint8 intStateTreeDepth, uint8 messageTreeSubDepth, uint8 messageTreeDepth, uint8 voteOptionTreeDepth);\\n\\n  /// @notice Get the max values for the poll\\n  /// @return maxMessages The maximum number of messages\\n  /// @return maxVoteOptions The maximum number of vote options\\n  function maxValues() external view returns (uint256 maxMessages, uint256 maxVoteOptions);\\n\\n  /// @notice Get the external contracts\\n  /// @return maci The IMACI contract\\n  /// @return messageAq The AccQueue contract\\n  /// @return topupCredit The TopupCredit contract\\n  function extContracts() external view returns (IMACI maci, AccQueue messageAq, TopupCredit topupCredit);\\n\\n  /// @notice Get the hash of coordinator's public key\\n  /// @return _coordinatorPubKeyHash the hash of coordinator's public key\\n  function coordinatorPubKeyHash() external view returns (uint256 _coordinatorPubKeyHash);\\n\\n  /// @notice Get the commitment to the state leaves and the ballots. This is\\n  /// hash3(stateRoot, ballotRoot, salt).\\n  /// Its initial value should be\\n  /// hash(maciStateRootSnapshot, emptyBallotRoot, 0)\\n  /// Each successful invocation of processMessages() should use a different\\n  /// salt to update this value, so that an external observer cannot tell in\\n  /// the case that none of the messages are valid.\\n  /// @return The commitment to the state leaves and the ballots\\n  function currentSbCommitment() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6543c65572462d7e052503a4094a1900a12cb450ed91f097bed1e8d97ad0243c\",\"license\":\"MIT\"},\"maci-contracts/contracts/interfaces/ITallyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { DomainObjs } from \\\"../utilities/DomainObjs.sol\\\";\\n\\n/// @title ITallyFactory\\n/// @notice TallyFactory interface\\ninterface ITallyFactory {\\n  /// @notice Deploy a new Tally contract and return the address.\\n  /// @param _verifier Verifier contract\\n  /// @param _vkRegistry VkRegistry contract\\n  /// @param _poll Poll contract\\n  /// @param _messageProcessor MessageProcessor contract\\n  /// @param _owner Owner of the contract\\n  /// @param _mode Voting mode\\n  /// @return The deployed contract\\n  function deploy(\\n    address _verifier,\\n    address _vkRegistry,\\n    address _poll,\\n    address _messageProcessor,\\n    address _owner,\\n    DomainObjs.Mode _mode\\n  ) external returns (address);\\n}\\n\",\"keccak256\":\"0x941442404bf8dc477bb99516c25ac2b46f27a8d32707d4a72fc3bb77e39f7362\",\"license\":\"MIT\"},\"maci-contracts/contracts/interfaces/IVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { SnarkCommon } from \\\"../crypto/SnarkCommon.sol\\\";\\n\\n/// @title IVerifier\\n/// @notice an interface for a Groth16 verifier contract\\ninterface IVerifier {\\n  /// @notice Verify a zk-SNARK proof\\n  /// @param _proof The proof\\n  /// @param vk The verifying key\\n  /// @param input The public inputs to the circuit\\n  /// @return Whether the proof is valid given the verifying key and public\\n  ///          input. Note that this function only supports one public input.\\n  ///          Refer to the Semaphore source code for a verifier that supports\\n  ///          multiple public inputs.\\n  function verify(\\n    uint256[8] memory _proof,\\n    SnarkCommon.VerifyingKey memory vk,\\n    uint256 input\\n  ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf237bf3e3dbc948b577cb689eeecf3633c38205e6bd8e8ef0eb1356197e02247\",\"license\":\"MIT\"},\"maci-contracts/contracts/interfaces/IVkRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { SnarkCommon } from \\\"../crypto/SnarkCommon.sol\\\";\\nimport { DomainObjs } from \\\"../utilities/DomainObjs.sol\\\";\\n\\n/// @title IVkRegistry\\n/// @notice VkRegistry interface\\ninterface IVkRegistry {\\n  /// @notice Get the tally verifying key\\n  /// @param _stateTreeDepth The state tree depth\\n  /// @param _intStateTreeDepth The intermediate state tree depth\\n  /// @param _voteOptionTreeDepth The vote option tree depth\\n  /// @param _mode QV or Non-QV\\n  /// @return The verifying key\\n  function getTallyVk(\\n    uint256 _stateTreeDepth,\\n    uint256 _intStateTreeDepth,\\n    uint256 _voteOptionTreeDepth,\\n    DomainObjs.Mode _mode\\n  ) external view returns (SnarkCommon.VerifyingKey memory);\\n\\n  /// @notice Get the process verifying key\\n  /// @param _stateTreeDepth The state tree depth\\n  /// @param _messageTreeDepth The message tree depth\\n  /// @param _voteOptionTreeDepth The vote option tree depth\\n  /// @param _messageBatchSize The message batch size\\n  /// @param _mode QV or Non-QV\\n  /// @return The verifying key\\n  function getProcessVk(\\n    uint256 _stateTreeDepth,\\n    uint256 _messageTreeDepth,\\n    uint256 _voteOptionTreeDepth,\\n    uint256 _messageBatchSize,\\n    DomainObjs.Mode _mode\\n  ) external view returns (SnarkCommon.VerifyingKey memory);\\n}\\n\",\"keccak256\":\"0xc657458febca15dc42c4b03a6f359022d6fb96e83d30d06bb0570c652db30a24\",\"license\":\"MIT\"},\"maci-contracts/contracts/trees/AccQueue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Hasher } from \\\"../crypto/Hasher.sol\\\";\\n\\n/// @title AccQueue\\n/// @notice This contract defines a Merkle tree where each leaf insertion only updates a\\n/// subtree. To obtain the main tree root, the contract owner must merge the\\n/// subtrees together. Merging subtrees requires at least 2 operations:\\n/// mergeSubRoots(), and merge(). To get around the gas limit,\\n/// the mergeSubRoots() can be performed in multiple transactions.\\nabstract contract AccQueue is Ownable(msg.sender), Hasher {\\n  // The maximum tree depth\\n  uint256 public constant MAX_DEPTH = 32;\\n\\n  /// @notice A Queue is a 2D array of Merkle roots and indices which represents nodes\\n  /// in a Merkle tree while it is progressively updated.\\n  struct Queue {\\n    /// @notice IMPORTANT: the following declares an array of b elements of type T: T[b]\\n    /// And the following declares an array of b elements of type T[a]: T[a][b]\\n    /// As such, the following declares an array of MAX_DEPTH+1 arrays of\\n    /// uint256[4] arrays, **not the other way round**:\\n    uint256[4][MAX_DEPTH + 1] levels;\\n    uint256[MAX_DEPTH + 1] indices;\\n  }\\n\\n  // The depth of each subtree\\n  uint256 internal immutable subDepth;\\n\\n  // The number of elements per hash operation. Should be either 2 (for\\n  // binary trees) or 5 (quinary trees). The limit is 5 because that is the\\n  // maximum supported number of inputs for the EVM implementation of the\\n  // Poseidon hash function\\n  uint256 internal immutable hashLength;\\n\\n  // hashLength ** subDepth\\n  uint256 internal immutable subTreeCapacity;\\n\\n  // True hashLength == 2, false if hashLength == 5\\n  bool internal isBinary;\\n\\n  // The index of the current subtree. e.g. the first subtree has index 0, the\\n  // second has 1, and so on\\n  uint256 internal currentSubtreeIndex;\\n\\n  // Tracks the current subtree.\\n  Queue internal leafQueue;\\n\\n  // Tracks the smallest tree of subroots\\n  Queue internal subRootQueue;\\n\\n  // Subtree roots\\n  mapping(uint256 => uint256) internal subRoots;\\n\\n  // Merged roots\\n  uint256[MAX_DEPTH + 1] internal mainRoots;\\n\\n  // Whether the subtrees have been merged\\n  bool public subTreesMerged;\\n\\n  // Whether entire merkle tree has been merged\\n  bool public treeMerged;\\n\\n  // The root of the shortest possible tree which fits all current subtree\\n  // roots\\n  uint256 internal smallSRTroot;\\n\\n  // Tracks the next subroot to queue\\n  uint256 internal nextSubRootIndex;\\n\\n  // The number of leaves inserted across all subtrees so far\\n  uint256 public numLeaves;\\n\\n  /// @notice custom errors\\n  error SubDepthCannotBeZero();\\n  error SubdepthTooLarge(uint256 _subDepth, uint256 max);\\n  error InvalidHashLength();\\n  error DepthCannotBeZero();\\n  error SubTreesAlreadyMerged();\\n  error NothingToMerge();\\n  error SubTreesNotMerged();\\n  error DepthTooLarge(uint256 _depth, uint256 max);\\n  error DepthTooSmall(uint256 _depth, uint256 min);\\n  error InvalidIndex(uint256 _index);\\n  error InvalidLevel();\\n\\n  /// @notice Create a new AccQueue\\n  /// @param _subDepth The depth of each subtree.\\n  /// @param _hashLength The number of leaves per node (2 or 5).\\n  constructor(uint256 _subDepth, uint256 _hashLength) payable {\\n    /// validation\\n    if (_subDepth == 0) revert SubDepthCannotBeZero();\\n    if (_subDepth > MAX_DEPTH) revert SubdepthTooLarge(_subDepth, MAX_DEPTH);\\n    if (_hashLength != 2 && _hashLength != 5) revert InvalidHashLength();\\n\\n    isBinary = _hashLength == 2;\\n    subDepth = _subDepth;\\n    hashLength = _hashLength;\\n    subTreeCapacity = _hashLength ** _subDepth;\\n  }\\n\\n  /// @notice Hash the contents of the specified level and the specified leaf.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which require\\n  /// different input array lengths.\\n  /// @param _level The level to hash.\\n  /// @param _leaf The leaf include with the level.\\n  /// @return _hash The hash of the level and leaf.\\n  // solhint-disable-next-line no-empty-blocks\\n  function hashLevel(uint256 _level, uint256 _leaf) internal virtual returns (uint256 _hash) {}\\n\\n  /// @notice Hash the contents of the specified level and the specified leaf.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which require\\n  /// different input array lengths.\\n  /// @param _level The level to hash.\\n  /// @param _leaf The leaf include with the level.\\n  /// @return _hash The hash of the level and leaf.\\n  // solhint-disable-next-line no-empty-blocks\\n  function hashLevelLeaf(uint256 _level, uint256 _leaf) public view virtual returns (uint256 _hash) {}\\n\\n  /// @notice Returns the zero leaf at a specified level.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which will produce\\n  /// different zero values (e.g. hashLeftRight(0, 0) vs\\n  /// hash5([0, 0, 0, 0, 0]). Moreover, the zero value may be a\\n  /// nothing-up-my-sleeve value.\\n  /// @param _level The level at which to return the zero leaf.\\n  /// @return zero The zero leaf at the specified level.\\n  // solhint-disable-next-line no-empty-blocks\\n  function getZero(uint256 _level) internal virtual returns (uint256 zero) {}\\n\\n  /// @notice Add a leaf to the queue for the current subtree.\\n  /// @param _leaf The leaf to add.\\n  /// @return leafIndex The index of the leaf in the queue.\\n  function enqueue(uint256 _leaf) public onlyOwner returns (uint256 leafIndex) {\\n    leafIndex = numLeaves;\\n    // Recursively queue the leaf\\n    _enqueue(_leaf, 0);\\n\\n    // Update the leaf counter\\n    numLeaves = leafIndex + 1;\\n\\n    // Now that a new leaf has been added, mainRoots and smallSRTroot are\\n    // obsolete\\n    delete mainRoots;\\n    delete smallSRTroot;\\n    subTreesMerged = false;\\n\\n    // If a subtree is full\\n    if (numLeaves % subTreeCapacity == 0) {\\n      // Store the subroot\\n      subRoots[currentSubtreeIndex] = leafQueue.levels[subDepth][0];\\n\\n      // Increment the index\\n      currentSubtreeIndex++;\\n\\n      // Delete ancillary data\\n      delete leafQueue.levels[subDepth][0];\\n      delete leafQueue.indices;\\n    }\\n  }\\n\\n  /// @notice Updates the queue at a given level and hashes any subroots\\n  /// that need to be hashed.\\n  /// @param _leaf The leaf to add.\\n  /// @param _level The level at which to queue the leaf.\\n  function _enqueue(uint256 _leaf, uint256 _level) internal {\\n    if (_level > subDepth) {\\n      revert InvalidLevel();\\n    }\\n\\n    while (true) {\\n      uint256 n = leafQueue.indices[_level];\\n\\n      if (n != hashLength - 1) {\\n        // Just store the leaf\\n        leafQueue.levels[_level][n] = _leaf;\\n\\n        if (_level != subDepth) {\\n          // Update the index\\n          leafQueue.indices[_level]++;\\n        }\\n\\n        return;\\n      }\\n\\n      // Hash the leaves to next level\\n      _leaf = hashLevel(_level, _leaf);\\n\\n      // Reset the index for this level\\n      delete leafQueue.indices[_level];\\n\\n      // Queue the hash of the leaves into to the next level\\n      _level++;\\n    }\\n  }\\n\\n  /// @notice Fill any empty leaves of the current subtree with zeros and store the\\n  /// resulting subroot.\\n  function fill() public onlyOwner {\\n    if (numLeaves % subTreeCapacity == 0) {\\n      // If the subtree is completely empty, then the subroot is a\\n      // precalculated zero value\\n      subRoots[currentSubtreeIndex] = getZero(subDepth);\\n    } else {\\n      // Otherwise, fill the rest of the subtree with zeros\\n      _fill(0);\\n\\n      // Store the subroot\\n      subRoots[currentSubtreeIndex] = leafQueue.levels[subDepth][0];\\n\\n      // Reset the subtree data\\n      delete leafQueue.levels;\\n\\n      // Reset the merged roots\\n      delete mainRoots;\\n    }\\n\\n    // Increment the subtree index\\n    uint256 curr = currentSubtreeIndex + 1;\\n    currentSubtreeIndex = curr;\\n\\n    // Update the number of leaves\\n    numLeaves = curr * subTreeCapacity;\\n\\n    // Reset the subroot tree root now that it is obsolete\\n    delete smallSRTroot;\\n\\n    subTreesMerged = false;\\n  }\\n\\n  /// @notice A function that queues zeros to the specified level, hashes,\\n  /// the level, and enqueues the hash to the next level.\\n  /// @param _level The level at which to queue zeros.\\n  // solhint-disable-next-line no-empty-blocks\\n  function _fill(uint256 _level) internal virtual {}\\n\\n  /// Insert a subtree. Used for batch enqueues.\\n  function insertSubTree(uint256 _subRoot) public onlyOwner {\\n    subRoots[currentSubtreeIndex] = _subRoot;\\n\\n    // Increment the subtree index\\n    currentSubtreeIndex++;\\n\\n    // Update the number of leaves\\n    numLeaves += subTreeCapacity;\\n\\n    // Reset the subroot tree root now that it is obsolete\\n    delete smallSRTroot;\\n\\n    subTreesMerged = false;\\n  }\\n\\n  /// @notice Calculate the lowest possible height of a tree with\\n  /// all the subroots merged together.\\n  /// @return depth The lowest possible height of a tree with all the\\n  function calcMinHeight() public view returns (uint256 depth) {\\n    depth = 1;\\n    while (true) {\\n      if (hashLength ** depth >= currentSubtreeIndex) {\\n        break;\\n      }\\n      depth++;\\n    }\\n  }\\n\\n  /// @notice Merge all subtrees to form the shortest possible tree.\\n  /// This function can be called either once to merge all subtrees in a\\n  /// single transaction, or multiple times to do the same in multiple\\n  /// transactions.\\n  /// @param _numSrQueueOps The number of times this function will call\\n  ///                       queueSubRoot(), up to the maximum number of times\\n  ///                       necessary. If it is set to 0, it will call\\n  ///                       queueSubRoot() as many times as is necessary. Set\\n  ///                       this to a low number and call this function\\n  ///                       multiple times if there are many subroots to\\n  ///                       merge, or a single transaction could run out of\\n  ///                       gas.\\n  function mergeSubRoots(uint256 _numSrQueueOps) public onlyOwner {\\n    // This function can only be called once unless a new subtree is created\\n    if (subTreesMerged) revert SubTreesAlreadyMerged();\\n\\n    // There must be subtrees to merge\\n    if (numLeaves == 0) revert NothingToMerge();\\n\\n    // Fill any empty leaves in the current subtree with zeros only if the\\n    // current subtree is not full\\n    if (numLeaves % subTreeCapacity != 0) {\\n      fill();\\n    }\\n\\n    // If there is only 1 subtree, use its root\\n    if (currentSubtreeIndex == 1) {\\n      smallSRTroot = getSubRoot(0);\\n      subTreesMerged = true;\\n      return;\\n    }\\n\\n    uint256 depth = calcMinHeight();\\n\\n    uint256 queueOpsPerformed = 0;\\n    for (uint256 i = nextSubRootIndex; i < currentSubtreeIndex; i++) {\\n      if (_numSrQueueOps != 0 && queueOpsPerformed == _numSrQueueOps) {\\n        // If the limit is not 0, stop if the limit has been reached\\n        return;\\n      }\\n\\n      // Queue the next subroot\\n      queueSubRoot(getSubRoot(nextSubRootIndex), 0, depth);\\n\\n      // Increment the next subroot counter\\n      nextSubRootIndex++;\\n\\n      // Increment the ops counter\\n      queueOpsPerformed++;\\n    }\\n\\n    // The height of the tree of subroots\\n    uint256 m = hashLength ** depth;\\n\\n    // Queue zeroes to fill out the SRT\\n    if (nextSubRootIndex == currentSubtreeIndex) {\\n      uint256 z = getZero(subDepth);\\n      for (uint256 i = currentSubtreeIndex; i < m; i++) {\\n        queueSubRoot(z, 0, depth);\\n      }\\n    }\\n\\n    // Store the smallest main root\\n    smallSRTroot = subRootQueue.levels[depth][0];\\n    subTreesMerged = true;\\n  }\\n\\n  /// @notice Queues a subroot into the subroot tree.\\n  /// @param _leaf The value to queue.\\n  /// @param _level The level at which to queue _leaf.\\n  /// @param _maxDepth The depth of the tree.\\n  function queueSubRoot(uint256 _leaf, uint256 _level, uint256 _maxDepth) internal {\\n    if (_level > _maxDepth) {\\n      return;\\n    }\\n\\n    uint256 n = subRootQueue.indices[_level];\\n\\n    if (n != hashLength - 1) {\\n      // Just store the leaf\\n      subRootQueue.levels[_level][n] = _leaf;\\n      subRootQueue.indices[_level]++;\\n    } else {\\n      // Hash the elements in this level and queue it in the next level\\n      uint256 hashed;\\n      if (isBinary) {\\n        uint256[2] memory inputs;\\n        inputs[0] = subRootQueue.levels[_level][0];\\n        inputs[1] = _leaf;\\n        hashed = hash2(inputs);\\n      } else {\\n        uint256[5] memory inputs;\\n        for (uint8 i = 0; i < n; i++) {\\n          inputs[i] = subRootQueue.levels[_level][i];\\n        }\\n        inputs[n] = _leaf;\\n        hashed = hash5(inputs);\\n      }\\n\\n      // TODO: change recursion to a while loop\\n      // Recurse\\n      delete subRootQueue.indices[_level];\\n      queueSubRoot(hashed, _level + 1, _maxDepth);\\n    }\\n  }\\n\\n  /// @notice Merge all subtrees to form a main tree with a desired depth.\\n  /// @param _depth The depth of the main tree. It must fit all the leaves or\\n  ///               this function will revert.\\n  /// @return root The root of the main tree.\\n  function merge(uint256 _depth) public onlyOwner returns (uint256 root) {\\n    // The tree depth must be more than 0\\n    if (_depth == 0) revert DepthCannotBeZero();\\n\\n    // Ensure that the subtrees have been merged\\n    if (!subTreesMerged) revert SubTreesNotMerged();\\n\\n    // Check the depth\\n    if (_depth > MAX_DEPTH) revert DepthTooLarge(_depth, MAX_DEPTH);\\n\\n    // Calculate the SRT depth\\n    uint256 srtDepth = subDepth;\\n    while (true) {\\n      if (hashLength ** srtDepth >= numLeaves) {\\n        break;\\n      }\\n      srtDepth++;\\n    }\\n\\n    if (_depth < srtDepth) revert DepthTooSmall(_depth, srtDepth);\\n\\n    // If the depth is the same as the SRT depth, just use the SRT root\\n    if (_depth == srtDepth) {\\n      mainRoots[_depth] = smallSRTroot;\\n      treeMerged = true;\\n      return smallSRTroot;\\n    } else {\\n      root = smallSRTroot;\\n\\n      // Calculate the main root\\n\\n      for (uint256 i = srtDepth; i < _depth; i++) {\\n        uint256 z = getZero(i);\\n\\n        if (isBinary) {\\n          uint256[2] memory inputs;\\n          inputs[0] = root;\\n          inputs[1] = z;\\n          root = hash2(inputs);\\n        } else {\\n          uint256[5] memory inputs;\\n          inputs[0] = root;\\n          inputs[1] = z;\\n          inputs[2] = z;\\n          inputs[3] = z;\\n          inputs[4] = z;\\n          root = hash5(inputs);\\n        }\\n      }\\n\\n      mainRoots[_depth] = root;\\n      treeMerged = true;\\n    }\\n  }\\n\\n  /// @notice Returns the subroot at the specified index. Reverts if the index refers\\n  /// to a subtree which has not been filled yet.\\n  /// @param _index The subroot index.\\n  /// @return subRoot The subroot at the specified index.\\n  function getSubRoot(uint256 _index) public view returns (uint256 subRoot) {\\n    if (currentSubtreeIndex <= _index) revert InvalidIndex(_index);\\n    subRoot = subRoots[_index];\\n  }\\n\\n  /// @notice Returns the subroot tree (SRT) root. Its value must first be computed\\n  /// using mergeSubRoots.\\n  /// @return smallSubTreeRoot The SRT root.\\n  function getSmallSRTroot() public view returns (uint256 smallSubTreeRoot) {\\n    if (!subTreesMerged) revert SubTreesNotMerged();\\n    smallSubTreeRoot = smallSRTroot;\\n  }\\n\\n  /// @notice Return the merged Merkle root of all the leaves at a desired depth.\\n  /// @dev merge() or merged(_depth) must be called first.\\n  /// @param _depth The depth of the main tree. It must first be computed\\n  ///               using mergeSubRoots() and merge().\\n  /// @return mainRoot The root of the main tree.\\n  function getMainRoot(uint256 _depth) public view returns (uint256 mainRoot) {\\n    if (hashLength ** _depth < numLeaves) revert DepthTooSmall(_depth, numLeaves);\\n\\n    mainRoot = mainRoots[_depth];\\n  }\\n\\n  /// @notice Get the next subroot index and the current subtree index.\\n  function getSrIndices() public view returns (uint256 next, uint256 current) {\\n    next = nextSubRootIndex;\\n    current = currentSubtreeIndex;\\n  }\\n}\\n\",\"keccak256\":\"0xf7b3357a612808b59e27300842bd92fefc42e276348fc2f4bf794192e2499de8\",\"license\":\"MIT\"},\"maci-contracts/contracts/utilities/CommonUtilities.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { IPoll } from \\\"../interfaces/IPoll.sol\\\";\\n\\n/// @title CommonUtilities\\n/// @notice A contract that holds common utilities\\n/// which are to be used by multiple contracts\\n/// namely Tally and MessageProcessor\\ncontract CommonUtilities {\\n  error VotingPeriodNotPassed();\\n\\n  /// @notice common function for MessageProcessor, and Tally\\n  /// @param _poll the poll to be checked\\n  function _votingPeriodOver(IPoll _poll) internal view {\\n    (uint256 deployTime, uint256 duration) = _poll.getDeployTimeAndDuration();\\n    // Require that the voting period is over\\n    uint256 secondsPassed = block.timestamp - deployTime;\\n    if (secondsPassed <= duration) {\\n      revert VotingPeriodNotPassed();\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x68178c1708e2e90a3b66ad79a6b815f5b01e2990b05c31b97d51653e16df39a5\",\"license\":\"MIT\"},\"maci-contracts/contracts/utilities/DomainObjs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @title DomainObjs\\n/// @notice An utility contract that holds\\n/// a number of domain objects and functions\\ncontract DomainObjs {\\n  /// @notice the length of a MACI message\\n  uint8 public constant MESSAGE_DATA_LENGTH = 10;\\n\\n  /// @notice voting modes\\n  enum Mode {\\n    QV,\\n    NON_QV\\n  }\\n\\n  /// @title Message\\n  /// @notice this struct represents a MACI message\\n  /// @dev msgType: 1 for vote message, 2 for topup message (size 2)\\n  struct Message {\\n    uint256 msgType;\\n    uint256[MESSAGE_DATA_LENGTH] data;\\n  }\\n\\n  /// @title PubKey\\n  /// @notice A MACI public key\\n  struct PubKey {\\n    uint256 x;\\n    uint256 y;\\n  }\\n\\n  /// @title StateLeaf\\n  /// @notice A MACI state leaf\\n  /// @dev used to represent a user's state\\n  /// in the state Merkle tree\\n  struct StateLeaf {\\n    PubKey pubKey;\\n    uint256 voiceCreditBalance;\\n    uint256 timestamp;\\n  }\\n}\\n\",\"keccak256\":\"0x01994d163c6f1bf7020542ac40540c579dd2c9ec37a0cf3697a715261a0109fb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657612327908161001c8239f35b600080fdfe60806040818152600436101561001457600080fd5b600091823560e01c908163431a717514610056575063683f3dc31461003857600080fd5b3461005257816003193601126100525760209051600a8152f35b5080fd5b919050346101a75760c03660031901126101a7576004356001600160a01b038181169182900361017b57602435938185168095036101a3576044359282841680940361019f576064359383851680950361019b57608435948486168096036101975760a43591600283101561019357612146988986019467ffffffffffffffff9a8787108c88111761017f57918795939160a09795936101ac883985526020850152898401526060830152608082015203019086f08015610171571692833b1561017b5782519163f2fde38b60e01b83526004830152848260248183885af180156101715761014a575b6020848451908152f35b811161015d576020935081523880610140565b634e487b7160e01b84526041600452602484fd5b83513d87823e3d90fd5b8480fd5b634e487b7160e01b8d52604160045260248dfd5b8980fd5b8880fd5b8780fd5b8680fd5b8580fd5b8280fdfe610120601f6200214638819003918201601f19168301916001600160401b03831184841017620001a55780849260a094604052833981010312620001a0576200004881620001bb565b906200005760208201620001bb565b6200006560408301620001bb565b9160806200007660608301620001bb565b910151936002851015620001a057331562000187576000549360018060a01b0380948180943360018060a01b03198a161760005560405198823391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3166080521660a0521660c0521660e052610100918252611f759182620001d183396080518281816107ea01528181610dd80152611183015260a0518281816106e7015281816110890152611677015260c0518281816101fd01528181610514015281816105ed0152610e7c015260e05182818161033901528181610ee5015261159901525181818161042c015281816106bb01528181610d3c01528181610e230152818161105d01526116e20152f35b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620001a05756fe608080604052600436101561001357600080fd5b60003560e01c90816310bc5f51146116a65750806313fb89321461166157806316425eeb1461156e57806323e3feb114610e49578063295a521214610e075780632b7ac3f314610dc25780632d966bf414610d265780633dfb88b214610c1657806358bfc37914610b8c5780635bb9399514610b6b5780636175029314610b4d57806362a361bb14610af6578063683f3dc314610ada5780636b148b6014610abe578063715018a614610a655780637485dba1146105c35780638da5cb5b1461059a5780639cfced9714610543578063a1175279146104fe578063a21fb51114610409578063afb93bd3146103eb578063b03698f2146103c7578063bea140b314610368578063d0380fe214610323578063d13181b814610305578063e3ff7606146101dd5763f2fde38b1461014857600080fd5b346101d85760203660031901126101d8576004356001600160a01b03818116918290036101d857610177611dc7565b81156101bf57600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b346101d85760003660031901126101d85760405163ac98e5df60e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316608082600481845afa9081156102c2576004926000926102ce575b50604090815193848092634f367f0f60e01b82525afa9081156102c25760209260009261028c575b506102829061027c60ff600254921661190f565b9061197e565b1015604051908152f35b6102829192506102b39060403d6040116102bb575b6102ab8183611871565b810190611991565b509190610268565b503d6102a1565b6040513d6000823e3d90fd5b60409192506102f49060803d6080116102fe575b6102ec8183611871565b8101906118d1565b5050509190610240565b503d6102e2565b346101d85760003660031901126101d8576020600354604051908152f35b346101d85760003660031901126101d8576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346101d85760603660031901126101d85736602312156101d85760405161038e81611855565b6064813682116101d8576020926004905b8382106103b857846103b084611d60565b604051908152f35b8135815290840190840161039f565b346101d85760603660031901126101d85760206103b0604435602435600435611cdc565b346101d85760003660031901126101d8576020600254604051908152f35b346101d85761042961041a366117ae565b96600098949396919592611e04565b917f00000000000000000000000000000000000000000000000000000000000000009460028610156104e8576020958061049e5750509061047f61048f94926040519461047586611855565b6060368737611a54565b8352848301526040820152611d60565b600154145b6040519015158152f35b6001919550146104b1575b505050610494565b6104dc93506104d190604051936104c78561181d565b6040368637611a54565b825283820152611a72565b600154148280806104a9565b634e487b7160e01b600052602160045260246000fd5b346101d85760003660031901126101d8576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346101d85760a03660031901126101d85736602312156101d85760405161056981611839565b60a4813682116101d8576020926004905b83821061058b57846103b084611c75565b8135815290840190840161057a565b346101d85760003660031901126101d8576000546040516001600160a01b039091168152602090f35b346101d8576101803660031901126101d85736610104116101d85760405163ac98e5df60e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316608082600481845afa9081156102c257600092600092610a38575b509060606004926040519384809263bc14ee2b60e01b82525afa9182156102c2576000926109cc575b5060405163194b1db960e21b815291602090839060049082906001600160a01b03165afa9182156102c25760009261098e575b506040516310b37e4d60e01b815260ff928316600482015292821660248401521660448201526106df606482017f00000000000000000000000000000000000000000000000000000000000000006117a1565b6000816084817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156102c257600091610882575b5061073961016435610144356101243561010435611b08565b6040516308adcb2560e21b81529182906101006004808401376101406101048301526080610324830191602081518051610144870152015161016485015261078a6020820151610184860190611c55565b61079d6040820151610204860190611c55565b6107b06060820151610284860190611c55565b0151906101e061030484015281518091526020610344840192019060005b81811061085d57505050610124820192909252602091819003817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa80156102c257602091600091610830575b506040519015158152f35b6108509150823d8411610856575b6108488183611871565b8101906118ab565b82610825565b503d61083e565b82518051855260209081015181860152879550604090940193909201916001016107ce565b90503d806000833e6108948183611871565b81016020828203126101d857815167ffffffffffffffff928382116101d85701916101e0838303126101d857604051926108cd84611839565b6108d78382611b87565b84526108e68360408301611bf4565b60208501526108f88360c08301611bf4565b604085015261090b836101408301611bf4565b60608501526101c08101519182116101d8570181601f820112156101d857805161093481611893565b926109426040519485611871565b81845260208085019260061b840101928184116101d857602001915b8383106109745750505050608082015281610720565b60206040916109838486611b87565b81520192019161095e565b91506020823d6020116109c4575b816109a960209383611871565b810103126101d85760ff6109bd81936118c3565b925061068c565b3d915061099c565b91506060823d606011610a30575b816109e760609383611871565b810103126101d8578151916001600160a01b03831683036101d85760208101516001600160a01b038116036101d857604001516001600160a01b038116036101d8576020610659565b3d91506109da565b6060935060049250610a589060803d6080116102fe576102ec8183611871565b9592915050939250610630565b346101d85760003660031901126101d857610a7e611dc7565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346101d85760206103b0610ad136611783565b92919091611b08565b346101d85760003660031901126101d8576020604051600a8152f35b346101d85760403660031901126101d85736602312156101d857604051610b1c8161181d565b6044813682116101d8576020926004905b838210610b3e57846103b084611a72565b81358152908401908401610b2d565b346101d85760003660031901126101d8576020600154604051908152f35b346101d85760403660031901126101d85760206103b0602435600435611a54565b346101d8576020806003193601126101d85760043567ffffffffffffffff81116101d857366023820112156101d857806004013590610bca82611893565b91610bd86040519384611871565b8083526024602084019160051b830101913683116101d857602401905b828210610c075760206103b0856119a7565b81358152908401908401610bf5565b346101d85760803660031901126101d85736602312156101d8576040516080810181811067ffffffffffffffff821117610d10576040526084813682116101d8576004905b828210610d005760405163248f667760e01b8152600085600483015b60048310610ce95783602081608481733Aa5ebB10DC797CAC828524e59A333d0A371443c5af480156102c257600090610cb6575b602090604051908152f35b506020813d602011610ce1575b81610cd060209383611871565b810103126101d85760209051610cab565b3d9150610cc3565b600190825181526020809101920192019190610c77565b8135815260209182019101610c5b565b634e487b7160e01b600052604160045260246000fd5b346101d857610d34366117ae565b9496939190917f000000000000000000000000000000000000000000000000000000000000000060028110156104e857610db057602097610da497610d9a96610d7c94611e04565b9060405194610d8a86611855565b6060368737855286850152611a54565b6040820152611d60565b60015414604051908152f35b604051630280e1e560e61b8152600490fd5b346101d85760003660031901126101d8576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346101d85760003660031901126101d8576020604051610e47817f00000000000000000000000000000000000000000000000000000000000000006117a1565bf35b346101d8576101203660031901126101d85736610124116101d857610e6c611dc7565b60408051634909229f60e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169181600481855afa9081156102c25760009060009261154c575b50420342811161153657111561152457610ed6611dc7565b6040516321d8f43160e21b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690602081600481855afa9081156102c257600091611505575b50156114f35760035415611490575b5060405163ac98e5df60e01b80825290608081600481865afa9081156102c257610f6b9160ff9160009161146e575b501661190f565b90600254916001610f7c828561197e565b930160025560408051634f367f0f60e01b8152929083600481885afa9283156102c25760009361144c575b508284101561143a57604051908152608081600481885afa9081156102c257600495600091600093611410575b506060906040519788809263bc14ee2b60e01b82525afa9586156102c2576000966113a4575b5060405163194b1db960e21b815295602090879060049082906001600160a01b03165afa9586156102c257600096611362575b506040516310b37e4d60e01b815260ff9687166004820152908616602482015294166044850152611081606485017f00000000000000000000000000000000000000000000000000000000000000006117a1565b6000846084817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9283156102c257600093611220575b6110d193945060043592611b08565b6040516308adcb2560e21b815291829061010060246004840137610140610104830152608061032483019160208151805161014487015201516101648501526111236020820151610184860190611c55565b6111366040820151610204860190611c55565b6111496060820151610284860190611c55565b0151906101e061030484015281518091526020610344840192019060005b8181106111fb57505050610124820192909252602091819003817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156102c2576000916111dc575b50156111ca57600435600155005b6040516341acf34d60e01b8152600490fd5b6111f5915060203d602011610856576108488183611871565b816111bc565b8251805185526020908101518186015287955060409094019390920191600101611167565b92503d806000863e6112328186611871565b60208582810103126101d857845167ffffffffffffffff908181116101d8578601916101e08382890103126101d8576040519261126e84611839565b61127a82890182611b87565b845261128b82890160408301611bf4565b602085015261129f82890160c08301611bf4565b60408501526112b48289016101408301611bf4565b60608501526101c08101519283116101d857818801601f8483010112156101d85782810151916112e383611893565b936112f16040519586611871565b8385526020850192828b0160208660061b8484010101116101d85790602081830101935b60208660061b8385010101851061133f575050505050506110d194955060808201529250836110c2565b90604060208094936113538f880189611b87565b81520195019490919250611315565b919095506020823d60201161139c575b8161137f60209383611871565b810103126101d85760ff61139381936118c3565b9691925061102d565b3d9150611372565b95506060863d606011611408575b816113bf60609383611871565b810103126101d8578551956001600160a01b03871687036101d85760208101516001600160a01b038116036101d857604001516001600160a01b038116036101d8576020610ffa565b3d91506113b2565b61142e9193506060925060803d6080116102fe576102ec8183611871565b9492939150610fd49050565b60405163b3f8c18960e01b8152600490fd5b61146691935060403d6040116102bb576102ab8183611871565b509185610fa7565b611487915060803d6080116102fe576102ec8183611871565b50505085610f64565b602060049160405192838092631a26303760e31b82525afa9081156102c2576000916114c1575b5060035581610f35565b90506020813d6020116114eb575b816114dc60209383611871565b810103126101d85751826114b7565b3d91506114cf565b60405163f13e1b8560e01b8152600490fd5b61151e915060203d602011610856576108488183611871565b83610f26565b604051635c3017c560e11b8152600490fd5b634e487b7160e01b600052601160045260246000fd5b9050611567915060403d6040116102bb576102ab8183611871565b9083610ebe565b346101d85760003660031901126101d857611587611dc7565b6040516321d8f43160e21b81526020907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316908281600481855afa9081156102c257600091611644575b50156114f357600354156115e957005b8160049160405192838092631a26303760e31b82525afa9182156102c257600092611616575b5050600355005b90809250813d831161163d575b61162d8183611871565b810103126101d85751818061160f565b503d611623565b61165b9150833d8511610856576108488183611871565b836115d9565b346101d85760003660031901126101d8576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346101d8576116b436611783565b928360406000949394966116c781611855565b60603682378581526116d98585611a54565b602082015201527f00000000000000000000000000000000000000000000000000000000000000009460028610156104e8576020958061174557505061048f9391611737916040519461172b86611855565b60603687378552611a54565b848301526040820152611d60565b60019195501461175757505050610494565b6104dc93509061177a916040519361176e8561181d565b60403686378452611a54565b83820152611a72565b60809060031901126101d85760043590602435906044359060643590565b9060028210156104e85752565b9060e06003198301126101d857600435916024359160443567ffffffffffffffff928382116101d857806023830112156101d85781600401359384116101d85760248460051b830101116101d85760240191906064359060843560ff811681036101d8579060a4359060c43590565b6040810190811067ffffffffffffffff821117610d1057604052565b60a0810190811067ffffffffffffffff821117610d1057604052565b6060810190811067ffffffffffffffff821117610d1057604052565b90601f8019910116810190811067ffffffffffffffff821117610d1057604052565b67ffffffffffffffff8111610d105760051b60200190565b908160209103126101d8575180151581036101d85790565b519060ff821682036101d857565b91908260809103126101d8576118e6826118c3565b916118f3602082016118c3565b9161190c6060611905604085016118c3565b93016118c3565b90565b801561197857600190602081108216604e82108316176119705781906005925b80821161194757505081600019048111611536570290565b90928060001904811161153657818416611967575b800292811c9061192f565b8092029161195c565b905060050a90565b50600190565b8181029291811591840414171561153657565b91908260409103126101d8576020825192015190565b604051815160209283019082908482019060005b86828210611a3d575050506119d9925003601f198101835282611871565b604051908051908360005b838110611a2b5750505090806000928101838152039060025afa156102c2577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016000510690565b818184010151818601520184906119e4565b8551845294850194869450909201916001016119bb565b61190c9160405191611a658361181d565b6040368437825260208201525b6040516314d2f97b60e11b815290600090600483015b60028310611af157505050602081604481739A9f2CCfdE556A7E9Ff0848998Aa4a0CFD8863AE5af49081156102c257600091611ac2575090565b90506020813d602011611ae9575b81611add60209383611871565b810103126101d8575190565b3d9150611ad0565b600190825181526020809101920192019190611a88565b90611b139291611cdc565b60405190611b2082611839565b60048252602082016080368237825115611b715752600354815160011015611b71576040820152600154815160021015611b71576060820152805160031015611b715761190c9160808201526119a7565b634e487b7160e01b600052603260045260246000fd5b91908260409103126101d857604051611b9f8161181d565b6020808294805184520151910152565b9080601f830112156101d85760405191611bc88361181d565b8290604081019283116101d857905b828210611be45750505090565b8151815260209182019101611bd7565b91906080838203126101d8576020611c2860405192611c128461181d565b60408496611c208382611baf565b865201611baf565b910152565b6000915b60028310611c3e57505050565b600190825181526020809101920192019190611c31565b9060406020611c7393611c69848251611c2d565b0151910190611c2d565b565b604051630926f44b60e31b815290600090600483015b60058310611cc55750505060208160a48173c6e7DF5E7b4f2A278906862b61205850344D4e7d5af49081156102c257600091611ac2575090565b600190825181526020809101920192019190611c8b565b9190660400000000000080841015611d4e5780821015611d3c57821015611d2a578115611d1457049060321b81018091116115365790565b634e487b7160e01b600052601260045260246000fd5b60405163cdc3c16b60e01b8152600490fd5b6040516334dd29a960e21b8152600490fd5b604051631805864f60e21b8152600490fd5b6040516304b98e1d60e31b815290600090600483015b60038310611db0575050506020816064817368B1D87F95878fE05B998F19b66F4baba5De1aed5af49081156102c257600091611ac2575090565b600190825181526020809101920192019190611d76565b6000546001600160a01b03163303611ddb57565b60405163118cdaa760e01b8152336004820152602490fd5b906005811015611b715760051b0190565b9291949390936005850660405194611e1b86611839565b60a03687376000925b60ff821660ff85161015611f355760005b600560ff82161015611f0a5760ff81168403611e6e57808a611e5b60ff8094168b611df3565b525b1660ff811461153657600101611e35565b8360ff821611600014611f045760001960ff82160160ff811161153657905b8660ff87161015611b7157611fe08660051b16880135601e19893603018112156101d857808901359067ffffffffffffffff82116101d8576020918060051b360383838d0101136101d85760ff85161015611b7157611fe060ff9460051b16908a01010135611efe8383168b611df3565b52611e5d565b80611e8d565b509690929750600591500494600586069060ff806001611f2989611c75565b9a011693919050611e24565b965050505050505056fea2646970667358221220ccfedeeaee5c6d9843a3e92a88411faca88cddea9d782ce298b4f715eda3d47e64736f6c63430008180033a2646970667358221220f4eec47fe9ac139f08b7ea95897b989ef3f121fc5980577823a4fa2ff4bd70ae64736f6c63430008180033",
  "deployedBytecode": "$e61c65d9562aef5fa6ab22c0f787cf1e30$__5af480156102c257600090610cb6575b602090604051908152f35b506020813d602011610ce1575b81610cd060209383611871565b810103126101d85760209051610cab565b3d9150610cc3565b600190825181526020809101920192019190610c77565b8135815260209182019101610c5b565b634e487b7160e01b600052604160045260246000fd5b346101d857610d34366117ae565b9496939190917f000000000000000000000000000000000000000000000000000000000000000060028110156104e857610db057602097610da497610d9a96610d7c94611e04565b9060405194610d8a86611855565b6060368737855286850152611a54565b6040820152611d60565b60015414604051908152f35b604051630280e1e560e61b8152600490fd5b346101d85760003660031901126101d8576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346101d85760003660031901126101d8576020604051610e47817f00000000000000000000000000000000000000000000000000000000000000006117a1565bf35b346101d8576101203660031901126101d85736610124116101d857610e6c611dc7565b60408051634909229f60e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169181600481855afa9081156102c25760009060009261154c575b50420342811161153657111561152457610ed6611dc7565b6040516321d8f43160e21b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690602081600481855afa9081156102c257600091611505575b50156114f35760035415611490575b5060405163ac98e5df60e01b80825290608081600481865afa9081156102c257610f6b9160ff9160009161146e575b501661190f565b90600254916001610f7c828561197e565b930160025560408051634f367f0f60e01b8152929083600481885afa9283156102c25760009361144c575b508284101561143a57604051908152608081600481885afa9081156102c257600495600091600093611410575b506060906040519788809263bc14ee2b60e01b82525afa9586156102c2576000966113a4575b5060405163194b1db960e21b815295602090879060049082906001600160a01b03165afa9586156102c257600096611362575b506040516310b37e4d60e01b815260ff9687166004820152908616602482015294166044850152611081606485017f00000000000000000000000000000000000000000000000000000000000000006117a1565b6000846084817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9283156102c257600093611220575b6110d193945060043592611b08565b6040516308adcb2560e21b815291829061010060246004840137610140610104830152608061032483019160208151805161014487015201516101648501526111236020820151610184860190611c55565b6111366040820151610204860190611c55565b6111496060820151610284860190611c55565b0151906101e061030484015281518091526020610344840192019060005b8181106111fb57505050610124820192909252602091819003817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156102c2576000916111dc575b50156111ca57600435600155005b6040516341acf34d60e01b8152600490fd5b6111f5915060203d602011610856576108488183611871565b816111bc565b8251805185526020908101518186015287955060409094019390920191600101611167565b92503d806000863e6112328186611871565b60208582810103126101d857845167ffffffffffffffff908181116101d8578601916101e08382890103126101d8576040519261126e84611839565b61127a82890182611b87565b845261128b82890160408301611bf4565b602085015261129f82890160c08301611bf4565b60408501526112b48289016101408301611bf4565b60608501526101c08101519283116101d857818801601f8483010112156101d85782810151916112e383611893565b936112f16040519586611871565b8385526020850192828b0160208660061b8484010101116101d85790602081830101935b60208660061b8385010101851061133f575050505050506110d194955060808201529250836110c2565b90604060208094936113538f880189611b87565b81520195019490919250611315565b919095506020823d60201161139c575b8161137f60209383611871565b810103126101d85760ff61139381936118c3565b9691925061102d565b3d9150611372565b95506060863d606011611408575b816113bf60609383611871565b810103126101d8578551956001600160a01b03871687036101d85760208101516001600160a01b038116036101d857604001516001600160a01b038116036101d8576020610ffa565b3d91506113b2565b61142e9193506060925060803d6080116102fe576102ec8183611871565b9492939150610fd49050565b60405163b3f8c18960e01b8152600490fd5b61146691935060403d6040116102bb576102ab8183611871565b509185610fa7565b611487915060803d6080116102fe576102ec8183611871565b50505085610f64565b602060049160405192838092631a26303760e31b82525afa9081156102c2576000916114c1575b5060035581610f35565b90506020813d6020116114eb575b816114dc60209383611871565b810103126101d85751826114b7565b3d91506114cf565b60405163f13e1b8560e01b8152600490fd5b61151e915060203d602011610856576108488183611871565b83610f26565b604051635c3017c560e11b8152600490fd5b634e487b7160e01b600052601160045260246000fd5b9050611567915060403d6040116102bb576102ab8183611871565b9083610ebe565b346101d85760003660031901126101d857611587611dc7565b6040516321d8f43160e21b81526020907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316908281600481855afa9081156102c257600091611644575b50156114f357600354156115e957005b8160049160405192838092631a26303760e31b82525afa9182156102c257600092611616575b5050600355005b90809250813d831161163d575b61162d8183611871565b810103126101d85751818061160f565b503d611623565b61165b9150833d8511610856576108488183611871565b836115d9565b346101d85760003660031901126101d8576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346101d8576116b436611783565b928360406000949394966116c781611855565b60603682378581526116d98585611a54565b602082015201527f00000000000000000000000000000000000000000000000000000000000000009460028610156104e8576020958061174557505061048f9391611737916040519461172b86611855565b60603687378552611a54565b848301526040820152611d60565b60019195501461175757505050610494565b6104dc93509061177a916040519361176e8561181d565b60403686378452611a54565b83820152611a72565b60809060031901126101d85760043590602435906044359060643590565b9060028210156104e85752565b9060e06003198301126101d857600435916024359160443567ffffffffffffffff928382116101d857806023830112156101d85781600401359384116101d85760248460051b830101116101d85760240191906064359060843560ff811681036101d8579060a4359060c43590565b6040810190811067ffffffffffffffff821117610d1057604052565b60a0810190811067ffffffffffffffff821117610d1057604052565b6060810190811067ffffffffffffffff821117610d1057604052565b90601f8019910116810190811067ffffffffffffffff821117610d1057604052565b67ffffffffffffffff8111610d105760051b60200190565b908160209103126101d8575180151581036101d85790565b519060ff821682036101d857565b91908260809103126101d8576118e6826118c3565b916118f3602082016118c3565b9161190c6060611905604085016118c3565b93016118c3565b90565b801561197857600190602081108216604e82108316176119705781906005925b80821161194757505081600019048111611536570290565b90928060001904811161153657818416611967575b800292811c9061192f565b8092029161195c565b905060050a90565b50600190565b8181029291811591840414171561153657565b91908260409103126101d8576020825192015190565b604051815160209283019082908482019060005b86828210611a3d575050506119d9925003601f198101835282611871565b604051908051908360005b838110611a2b5750505090806000928101838152039060025afa156102c2577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016000510690565b818184010151818601520184906119e4565b8551845294850194869450909201916001016119bb565b61190c9160405191611a658361181d565b6040368437825260208201525b6040516314d2f97b60e11b815290600090600483015b60028310611af15750505060208160448173__$1540826e134b1b69b7091c82576ee3aadd$__5af49081156102c257600091611ac2575090565b90506020813d602011611ae9575b81611add60209383611871565b810103126101d8575190565b3d9150611ad0565b600190825181526020809101920192019190611a88565b90611b139291611cdc565b60405190611b2082611839565b60048252602082016080368237825115611b715752600354815160011015611b71576040820152600154815160021015611b71576060820152805160031015611b715761190c9160808201526119a7565b634e487b7160e01b600052603260045260246000fd5b91908260409103126101d857604051611b9f8161181d565b6020808294805184520151910152565b9080601f830112156101d85760405191611bc88361181d565b8290604081019283116101d857905b828210611be45750505090565b8151815260209182019101611bd7565b91906080838203126101d8576020611c2860405192611c128461181d565b60408496611c208382611baf565b865201611baf565b910152565b6000915b60028310611c3e57505050565b600190825181526020809101920192019190611c31565b9060406020611c7393611c69848251611c2d565b0151910190611c2d565b565b604051630926f44b60e31b815290600090600483015b60058310611cc55750505060208160a48173__$46fbdf6658faf65265971bdad66851b86c$__5af49081156102c257600091611ac2575090565b600190825181526020809101920192019190611c8b565b9190660400000000000080841015611d4e5780821015611d3c57821015611d2a578115611d1457049060321b81018091116115365790565b634e487b7160e01b600052601260045260246000fd5b60405163cdc3c16b60e01b8152600490fd5b6040516334dd29a960e21b8152600490fd5b604051631805864f60e21b8152600490fd5b6040516304b98e1d60e31b815290600090600483015b60038310611db05750505060208160648173__$fa059fb1da6d850ca47ea49359bfe89f78$__5af49081156102c257600091611ac2575090565b600190825181526020809101920192019190611d76565b6000546001600160a01b03163303611ddb57565b60405163118cdaa760e01b8152336004820152602490fd5b906005811015611b715760051b0190565b9291949390936005850660405194611e1b86611839565b60a03687376000925b60ff821660ff85161015611f355760005b600560ff82161015611f0a5760ff81168403611e6e57808a611e5b60ff8094168b611df3565b525b1660ff811461153657600101611e35565b8360ff821611600014611f045760001960ff82160160ff811161153657905b8660ff87161015611b7157611fe08660051b16880135601e19893603018112156101d857808901359067ffffffffffffffff82116101d8576020918060051b360383838d0101136101d85760ff85161015611b7157611fe060ff9460051b16908a01010135611efe8383168b611df3565b52611e5d565b80611e8d565b509690929750600591500494600586069060ff806001611f2989611c75565b9a011693919050611e24565b965050505050505056fea2646970667358221220ccfedeeaee5c6d9843a3e92a88411faca88cddea9d782ce298b4f715eda3d47e64736f6c63430008180033a2646970667358221220f4eec47fe9ac139f08b7ea95897b989ef3f121fc5980577823a4fa2ff4bd70ae64736f6c63430008180033",
  "libraries": {
    "PoseidonT3": "0x9A9f2CCfdE556A7E9Ff0848998Aa4a0CFD8863AE",
    "PoseidonT4": "0x68B1D87F95878fE05B998F19b66F4baba5De1aed",
    "PoseidonT5": "0x3Aa5ebB10DC797CAC828524e59A333d0A371443c",
    "PoseidonT6": "0xc6e7DF5E7b4f2A278906862b61205850344D4e7d"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deploy(address,address,address,address,address,uint8)": {
        "params": {
          "_messageProcessor": "MessageProcessor contract",
          "_mode": "Voting mode",
          "_owner": "Owner of the contract",
          "_poll": "Poll contract",
          "_verifier": "Verifier contract",
          "_vkRegistry": "VkRegistry contract"
        },
        "returns": {
          "tallyAddr": "The deployed contract"
        }
      }
    },
    "title": "TallyFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "MESSAGE_DATA_LENGTH()": {
        "notice": "the length of a MACI message"
      },
      "deploy(address,address,address,address,address,uint8)": {
        "notice": "Deploy a new Tally contract and return the address."
      }
    },
    "notice": "A factory contract which deploys Tally contracts.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}